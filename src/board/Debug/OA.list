
OA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008450  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008560  08008560  00018560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a6c  08008a6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008a6c  08008a6c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a6c  08008a6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a6c  08008a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a70  08008a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200001dc  08008c50  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08008c50  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108d0  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f8  00000000  00000000  00030ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e3  00000000  00000000  00034440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d362  00000000  00000000  0004c823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ecc  00000000  00000000  00059b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005514  00000000  00000000  000e3aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008548 	.word	0x08008548

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008548 	.word	0x08008548

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <bme_i2c_down>:
#include "lsm6ds3_reg.h"
#include "bme280.h"


static void bme_i2c_down(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <bme_i2c_down+0x14>)
 8000fee:	f002 fc2d 	bl	800384c <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40011000 	.word	0x40011000

08000ffc <bme_i2c_up>:


static void bme_i2c_up(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2110      	movs	r1, #16
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <bme_i2c_up+0x14>)
 8001006:	f002 fc21 	bl	800384c <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40011000 	.word	0x40011000

08001014 <bme_i2c_read>:


static BME280_INTF_RET_TYPE bme_i2c_read(
		uint8_t reg_addr, uint8_t * data, uint32_t data_len, void *intf_ptr
)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
	extern I2C_HandleTypeDef hi2c2;

	bme_i2c_down();
 8001024:	f7ff ffde 	bl	8000fe4 <bme_i2c_down>
	reg_addr |= (1 << 7); //fixme ?
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, &reg_addr, data, 1, HAL_MAX_DELAY); //FIXME
 8001032:	f107 030f 	add.w	r3, r7, #15
 8001036:	b299      	uxth	r1, r3
 8001038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <bme_i2c_read+0x5c>)
 8001044:	f002 fd5e 	bl	8003b04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, &reg_addr, data, data_len, HAL_MAX_DELAY); //FIXME
 8001048:	f107 030f 	add.w	r3, r7, #15
 800104c:	b299      	uxth	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	b29b      	uxth	r3, r3
 8001052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001056:	9200      	str	r2, [sp, #0]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <bme_i2c_read+0x5c>)
 800105c:	f002 fe50 	bl	8003d00 <HAL_I2C_Master_Receive>
	bme_i2c_up();
 8001060:	f7ff ffcc 	bl	8000ffc <bme_i2c_up>

	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000024c 	.word	0x2000024c

08001074 <bme_i2c_write>:


static BME280_INTF_RET_TYPE bme_i2c_write(
		uint8_t reg_addr, const uint8_t * data, uint32_t data_len, void *intf_ptr
)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
	extern I2C_HandleTypeDef hi2c2;

	bme_i2c_down();
 8001084:	f7ff ffae 	bl	8000fe4 <bme_i2c_down>
	reg_addr &= ~(1 << 7);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, &reg_addr, data, 1, HAL_MAX_DELAY); //FIXME
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	b299      	uxth	r1, r3
 8001098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <bme_i2c_write+0x5c>)
 80010a4:	f002 fd2e 	bl	8003b04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, &reg_addr, data, data_len, HAL_MAX_DELAY); //FIXME
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	b299      	uxth	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <bme_i2c_write+0x5c>)
 80010bc:	f002 fe20 	bl	8003d00 <HAL_I2C_Master_Receive>
	bme_i2c_up();
 80010c0:	f7ff ff9c 	bl	8000ffc <bme_i2c_up>

	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000024c 	.word	0x2000024c

080010d4 <bme_delay_us>:


static void bme_delay_us(uint32_t period, void *intf_ptr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	if (period < 1000)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e4:	d202      	bcs.n	80010ec <bme_delay_us+0x18>
		period = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	e005      	b.n	80010f8 <bme_delay_us+0x24>
	else
		period = period / 1000;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <bme_delay_us+0x34>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	099b      	lsrs	r3, r3, #6
 80010f6:	607b      	str	r3, [r7, #4]

	HAL_Delay(period);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f002 f91b 	bl	8003334 <HAL_Delay>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	10624dd3 	.word	0x10624dd3

0800110c <lsm_i2c_read>:




static int32_t lsm_i2c_read(void *handle, uint8_t reg_addr, uint8_t * data, uint16_t data_len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	460b      	mov	r3, r1
 800111a:	72fb      	strb	r3, [r7, #11]
 800111c:	4613      	mov	r3, r2
 800111e:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read(&hi2c1, LSM6DS3_I2C_ADD_H, reg_addr, 1, data, data_len, HAL_MAX_DELAY);
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	b29a      	uxth	r2, r3
 8001124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	893b      	ldrh	r3, [r7, #8]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	21d7      	movs	r1, #215	; 0xd7
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <lsm_i2c_read+0x3c>)
 8001138:	f003 f948 	bl	80043cc <HAL_I2C_Mem_Read>
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001f8 	.word	0x200001f8

0800114c <lsm_i2c_write>:


static int32_t lsm_i2c_write(void * handle, uint8_t reg_addr, const uint8_t * data, uint16_t data_len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af04      	add	r7, sp, #16
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	460b      	mov	r3, r1
 800115a:	72fb      	strb	r3, [r7, #11]
 800115c:	4613      	mov	r3, r2
 800115e:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Write(&hi2c1, LSM6DS3_I2C_ADD_H, reg_addr, 1, (uint8_t*)data, data_len, HAL_MAX_DELAY);
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	893b      	ldrh	r3, [r7, #8]
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	21d7      	movs	r1, #215	; 0xd7
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <lsm_i2c_write+0x3c>)
 8001178:	f003 f82e 	bl	80041d8 <HAL_I2C_Mem_Write>
	return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001f8 	.word	0x200001f8

0800118c <app_main>:



int app_main(void)
{
 800118c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001190:	b0b8      	sub	sp, #224	; 0xe0
 8001192:	af0a      	add	r7, sp, #40	; 0x28
	// Настройка bme280 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	struct bme280_dev bme = {0};
 8001194:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001198:	2248      	movs	r2, #72	; 0x48
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fca7 	bl	8005af0 <memset>
	bme.intf = BME280_I2C_INTF;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	bme.intf_ptr = NULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	667b      	str	r3, [r7, #100]	; 0x64
	bme.read = bme_i2c_read;
 80011ac:	4bc2      	ldr	r3, [pc, #776]	; (80014b8 <app_main+0x32c>)
 80011ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	bme.write = bme_i2c_write;
 80011b0:	4bc2      	ldr	r3, [pc, #776]	; (80014bc <app_main+0x330>)
 80011b2:	673b      	str	r3, [r7, #112]	; 0x70
	bme.delay_us = bme_delay_us;
 80011b4:	4bc2      	ldr	r3, [pc, #776]	; (80014c0 <app_main+0x334>)
 80011b6:	677b      	str	r3, [r7, #116]	; 0x74

	int rc = bme280_soft_reset(&bme);
 80011b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fb4c 	bl	800185a <bme280_soft_reset>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	printf("bme280 reset rc = %d\n", (int)rc);
 80011c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80011cc:	48bd      	ldr	r0, [pc, #756]	; (80014c4 <app_main+0x338>)
 80011ce:	f005 f8f7 	bl	80063c0 <iprintf>

	rc = bme280_init(&bme);
 80011d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f988 	bl	80014ec <bme280_init>
 80011dc:	4603      	mov	r3, r0
 80011de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	printf("bme280 init rc = %d\n", (int)rc);
 80011e2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80011e6:	48b8      	ldr	r0, [pc, #736]	; (80014c8 <app_main+0x33c>)
 80011e8:	f005 f8ea 	bl	80063c0 <iprintf>

	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 80011ec:	2301      	movs	r3, #1
 80011ee:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 80011f2:	2305      	movs	r3, #5
 80011f4:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 80011f8:	2302      	movs	r3, #2
 80011fa:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	bme.settings.filter = BME280_FILTER_COEFF_16;
 80011fe:	2304      	movs	r3, #4
 8001200:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	bme.settings.standby_time = BME280_STANDBY_TIME_0_5_MS;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

	uint8_t settings_sel;
	settings_sel = BME280_OSR_PRESS_SEL;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	settings_sel |= BME280_OSR_TEMP_SEL;
 8001210:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	settings_sel |= BME280_OSR_HUM_SEL;
 800121c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	settings_sel |= BME280_FILTER_SEL;
 8001228:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	settings_sel |= BME280_STANDBY_SEL;
 8001234:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	rc = bme280_set_sensor_settings(settings_sel, &bme);
 8001240:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001244:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fa53 	bl	80016f6 <bme280_set_sensor_settings>
 8001250:	4603      	mov	r3, r0
 8001252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	printf("bme280 settings set rc = %d\n", rc);
 8001256:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800125a:	489c      	ldr	r0, [pc, #624]	; (80014cc <app_main+0x340>)
 800125c:	f005 f8b0 	bl	80063c0 <iprintf>
	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 8001260:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001264:	4619      	mov	r1, r3
 8001266:	2003      	movs	r0, #3
 8001268:	f000 fa9a 	bl	80017a0 <bme280_set_sensor_mode>
 800126c:	4603      	mov	r3, r0
 800126e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	printf("bme280 set sensor mode rc = %d\n", rc);
 8001272:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001276:	4896      	ldr	r0, [pc, #600]	; (80014d0 <app_main+0x344>)
 8001278:	f005 f8a2 	bl	80063c0 <iprintf>


	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	stmdev_ctx_t ctx = {0};
 800127c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
	ctx.handle = NULL;
 8001288:	2300      	movs	r3, #0
 800128a:	65fb      	str	r3, [r7, #92]	; 0x5c
	ctx.read_reg = lsm_i2c_read;
 800128c:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <app_main+0x348>)
 800128e:	65bb      	str	r3, [r7, #88]	; 0x58
	ctx.write_reg = lsm_i2c_write;
 8001290:	4b91      	ldr	r3, [pc, #580]	; (80014d8 <app_main+0x34c>)
 8001292:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t whoami = 0x00;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	lsm6ds3_device_id_get(&ctx, &whoami);
 800129a:	f107 0253 	add.w	r2, r7, #83	; 0x53
 800129e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fd38 	bl	8002d1a <lsm6ds3_device_id_get>
	printf("got lsm6ds3 whoami 0x%02X, expected 0x%02X\n", (int)whoami, (int)LSM6DS3_ID);
 80012aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012ae:	2269      	movs	r2, #105	; 0x69
 80012b0:	4619      	mov	r1, r3
 80012b2:	488a      	ldr	r0, [pc, #552]	; (80014dc <app_main+0x350>)
 80012b4:	f005 f884 	bl	80063c0 <iprintf>

	lsm6ds3_reset_set(&ctx, PROPERTY_ENABLE);
 80012b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fd3c 	bl	8002d3c <lsm6ds3_reset_set>
	HAL_Delay(100);
 80012c4:	2064      	movs	r0, #100	; 0x64
 80012c6:	f002 f835 	bl	8003334 <HAL_Delay>

	lsm6ds3_xl_full_scale_set(&ctx, LSM6DS3_16g);
 80012ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ce:	2101      	movs	r1, #1
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fbd1 	bl	8002a78 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_xl_data_rate_set(&ctx, LSM6DS3_XL_ODR_104Hz);
 80012d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012da:	2104      	movs	r1, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fbf1 	bl	8002ac4 <lsm6ds3_xl_data_rate_set>

	lsm6ds3_gy_full_scale_set(&ctx, LSM6DS3_2000dps);
 80012e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e6:	2106      	movs	r1, #6
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 fc11 	bl	8002b10 <lsm6ds3_gy_full_scale_set>
	lsm6ds3_gy_data_rate_set(&ctx, LSM6DS3_GY_ODR_104Hz);
 80012ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fc31 	bl	8002b5c <lsm6ds3_gy_data_rate_set>
		// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw;
		int16_t acc_raw[3];
		int16_t gyro_raw[3];
		lsm6ds3_temperature_raw_get(&ctx, &temperature_raw);
 80012fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fc4f 	bl	8002ba8 <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(&ctx, acc_raw);
 800130a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800130e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fcb5 	bl	8002c84 <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(&ctx, gyro_raw);
 800131a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800131e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fc62 	bl	8002bee <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		float temperature_celsius;
		float acc_g[3];
		float gyro_dps[3];
		temperature_celsius = lsm6ds3_from_lsb_to_celsius(temperature_raw);
 800132a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fb86 	bl	8002a40 <lsm6ds3_from_lsb_to_celsius>
 8001334:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		for (int i = 0; i < 3; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800133e:	e03c      	b.n	80013ba <app_main+0x22e>
		{
			acc_g[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 8001340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	33a8      	adds	r3, #168	; 0xa8
 8001348:	f107 0210 	add.w	r2, r7, #16
 800134c:	4413      	add	r3, r2
 800134e:	f933 3c70 	ldrsh.w	r3, [r3, #-112]
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fb40 	bl	80029d8 <lsm6ds3_from_fs16g_to_mg>
 8001358:	4603      	mov	r3, r0
 800135a:	4961      	ldr	r1, [pc, #388]	; (80014e0 <app_main+0x354>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fda5 	bl	8000eac <__aeabi_fdiv>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	33a8      	adds	r3, #168	; 0xa8
 800136e:	f107 0110 	add.w	r1, r7, #16
 8001372:	440b      	add	r3, r1
 8001374:	f843 2c84 	str.w	r2, [r3, #-132]
			gyro_dps[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 8001378:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	33a8      	adds	r3, #168	; 0xa8
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	4413      	add	r3, r2
 8001386:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fb42 	bl	8002a14 <lsm6ds3_from_fs2000dps_to_mdps>
 8001390:	4603      	mov	r3, r0
 8001392:	4953      	ldr	r1, [pc, #332]	; (80014e0 <app_main+0x354>)
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd89 	bl	8000eac <__aeabi_fdiv>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	33a8      	adds	r3, #168	; 0xa8
 80013a6:	f107 0110 	add.w	r1, r7, #16
 80013aa:	440b      	add	r3, r1
 80013ac:	f843 2c90 	str.w	r2, [r3, #-144]
		for (int i = 0; i < 3; i++)
 80013b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013b4:	3301      	adds	r3, #1
 80013b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013be:	2b02      	cmp	r3, #2
 80013c0:	ddbe      	ble.n	8001340 <app_main+0x1b4>

		// Вывод
		printf(
			" acc = %10.4f,%10.4f,%10.4f; gyro=%10.4f,%10.4f,%10.4f" " ||| ", //\n",
			//temperature_celsius,
			acc_g[0], acc_g[1], acc_g[2],
 80013c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		printf(
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
			acc_g[0], acc_g[1], acc_g[2],
 80013ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		printf(
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f829 	bl	8000428 <__aeabi_f2d>
 80013d6:	4604      	mov	r4, r0
 80013d8:	460d      	mov	r5, r1
			acc_g[0], acc_g[1], acc_g[2],
 80013da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		printf(
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f823 	bl	8000428 <__aeabi_f2d>
 80013e2:	4680      	mov	r8, r0
 80013e4:	4689      	mov	r9, r1
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
		printf(
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f81d 	bl	8000428 <__aeabi_f2d>
 80013ee:	4682      	mov	sl, r0
 80013f0:	468b      	mov	fp, r1
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		printf(
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f817 	bl	8000428 <__aeabi_f2d>
 80013fa:	e9c7 0100 	strd	r0, r1, [r7]
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		printf(
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f811 	bl	8000428 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800140e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001412:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001416:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800141a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800141e:	e9cd 4500 	strd	r4, r5, [sp]
 8001422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001426:	482f      	ldr	r0, [pc, #188]	; (80014e4 <app_main+0x358>)
 8001428:	f004 ffca 	bl	80063c0 <iprintf>


		// Чтение данные из bme280
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		bme280_set_sensor_mode(BME280_FORCED_MODE, &bme);
 800142c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001430:	4619      	mov	r1, r3
 8001432:	2001      	movs	r0, #1
 8001434:	f000 f9b4 	bl	80017a0 <bme280_set_sensor_mode>
		HAL_Delay(10);
 8001438:	200a      	movs	r0, #10
 800143a:	f001 ff7b 	bl	8003334 <HAL_Delay>

		struct bme280_data comp_data;
		rc = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 800143e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	2007      	movs	r0, #7
 800144a:	f000 fa55 	bl	80018f8 <bme280_get_sensor_data>
 800144e:	4603      	mov	r3, r0
 8001450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		// Печать
		printf(
			"temp = %8.4f; pressure = %10.4f; hum = %10.4f\n",
			(float)comp_data.temperature,
 8001454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb14 	bl	8000a88 <__aeabi_d2f>
 8001460:	4603      	mov	r3, r0
		printf(
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ffe0 	bl	8000428 <__aeabi_f2d>
 8001468:	4680      	mov	r8, r0
 800146a:	4689      	mov	r9, r1
			(float)comp_data.pressure,
 800146c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb08 	bl	8000a88 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
		printf(
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ffd4 	bl	8000428 <__aeabi_f2d>
 8001480:	4604      	mov	r4, r0
 8001482:	460d      	mov	r5, r1
			(float)comp_data.humidity
 8001484:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fafc 	bl	8000a88 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
		printf(
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffc8 	bl	8000428 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014a0:	e9cd 4500 	strd	r4, r5, [sp]
 80014a4:	4642      	mov	r2, r8
 80014a6:	464b      	mov	r3, r9
 80014a8:	480f      	ldr	r0, [pc, #60]	; (80014e8 <app_main+0x35c>)
 80014aa:	f004 ff89 	bl	80063c0 <iprintf>
		);

		HAL_Delay(100);
 80014ae:	2064      	movs	r0, #100	; 0x64
 80014b0:	f001 ff40 	bl	8003334 <HAL_Delay>
	{
 80014b4:	e721      	b.n	80012fa <app_main+0x16e>
 80014b6:	bf00      	nop
 80014b8:	08001015 	.word	0x08001015
 80014bc:	08001075 	.word	0x08001075
 80014c0:	080010d5 	.word	0x080010d5
 80014c4:	08008560 	.word	0x08008560
 80014c8:	08008578 	.word	0x08008578
 80014cc:	08008590 	.word	0x08008590
 80014d0:	080085b0 	.word	0x080085b0
 80014d4:	0800110d 	.word	0x0800110d
 80014d8:	0800114d 	.word	0x0800114d
 80014dc:	080085d0 	.word	0x080085d0
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	080085fc 	.word	0x080085fc
 80014e8:	08008638 	.word	0x08008638

080014ec <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 80014f4:	2305      	movs	r3, #5
 80014f6:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f001 fa1b 	bl	8002938 <null_ptr_check>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d137      	bne.n	800157e <bme280_init+0x92>
    {
        while (try_count)
 800150e:	e02c      	b.n	800156a <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001510:	f107 010d 	add.w	r1, r7, #13
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	20d0      	movs	r0, #208	; 0xd0
 800151a:	f000 f836 	bl	800158a <bme280_get_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d114      	bne.n	8001554 <bme280_init+0x68>
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	2b60      	cmp	r3, #96	; 0x60
 800152e:	d111      	bne.n	8001554 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8001530:	7b7a      	ldrb	r2, [r7, #13]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f98f 	bl	800185a <bme280_soft_reset>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d114      	bne.n	8001572 <bme280_init+0x86>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f001 f86f 	bl	800262c <get_calib_data>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8001552:	e00e      	b.n	8001572 <bme280_init+0x86>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6852      	ldr	r2, [r2, #4]
 800155c:	4611      	mov	r1, r2
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	4798      	blx	r3
            --try_count;
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	3b01      	subs	r3, #1
 8001568:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1cf      	bne.n	8001510 <bme280_init+0x24>
 8001570:	e000      	b.n	8001574 <bme280_init+0x88>
                break;
 8001572:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <bme280_init+0x92>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 800157a:	23fe      	movs	r3, #254	; 0xfe
 800157c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	4613      	mov	r3, r2
 800159a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f001 f9cb 	bl	8002938 <null_ptr_check>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80015a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11f      	bne.n	80015ee <bme280_get_regs+0x64>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01c      	beq.n	80015ee <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7a1b      	ldrb	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d003      	beq.n	80015c4 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c2:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68dc      	ldr	r4, [r3, #12]
 80015c8:	89ba      	ldrh	r2, [r7, #12]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	7bf8      	ldrb	r0, [r7, #15]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	47a0      	blx	r4
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 80015e8:	23fc      	movs	r3, #252	; 0xfc
 80015ea:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80015ec:	e001      	b.n	80015f2 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80015ee:	23ff      	movs	r3, #255	; 0xff
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}

080015fe <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 80015fe:	b590      	push	{r4, r7, lr}
 8001600:	b08d      	sub	sp, #52	; 0x34
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b0a      	cmp	r3, #10
 8001612:	d901      	bls.n	8001618 <bme280_set_regs+0x1a>
    {
        len = 10;
 8001614:	230a      	movs	r3, #10
 8001616:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001618:	6838      	ldr	r0, [r7, #0]
 800161a:	f001 f98d 	bl	8002938 <null_ptr_check>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001624:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001628:	2b00      	cmp	r3, #0
 800162a:	d159      	bne.n	80016e0 <bme280_set_regs+0xe2>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d056      	beq.n	80016e0 <bme280_set_regs+0xe2>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d053      	beq.n	80016e0 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04c      	beq.n	80016d8 <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	7a1b      	ldrb	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d01a      	beq.n	8001682 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800164c:	2300      	movs	r3, #0
 800164e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001652:	e011      	b.n	8001678 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001662:	68f9      	ldr	r1, [r7, #12]
 8001664:	440b      	add	r3, r1
 8001666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800166e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001672:	3301      	adds	r3, #1
 8001674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001678:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3e8      	bcc.n	8001654 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d90d      	bls.n	80016a4 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f107 0114 	add.w	r1, r7, #20
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f001 f810 	bl	80026b6 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	b29b      	uxth	r3, r3
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80016a2:	e001      	b.n	80016a8 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691c      	ldr	r4, [r3, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	7818      	ldrb	r0, [r3, #0]
 80016b0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f107 0114 	add.w	r1, r7, #20
 80016ba:	47a0      	blx	r4
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 80016d0:	23fc      	movs	r3, #252	; 0xfc
 80016d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80016d6:	e007      	b.n	80016e8 <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80016d8:	23fd      	movs	r3, #253	; 0xfd
 80016da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80016de:	e003      	b.n	80016e8 <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80016e0:	23ff      	movs	r3, #255	; 0xff
 80016e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80016e6:	e000      	b.n	80016ea <bme280_set_regs+0xec>
        if (len != 0)
 80016e8:	bf00      	nop
    }

    return rslt;
 80016ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3734      	adds	r7, #52	; 0x34
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd90      	pop	{r4, r7, pc}

080016f6 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	6039      	str	r1, [r7, #0]
 8001700:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001702:	6838      	ldr	r0, [r7, #0]
 8001704:	f001 f918 	bl	8002938 <null_ptr_check>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d13f      	bne.n	8001794 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001714:	f107 030e 	add.w	r3, r7, #14
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f874 	bl	8001808 <bme280_get_sensor_mode>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <bme280_set_sensor_settings+0x46>
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f000 fb72 	bl	8001e1c <put_device_to_sleep>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BME280_OK)
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d127      	bne.n	8001794 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4619      	mov	r1, r3
 8001748:	2007      	movs	r0, #7
 800174a:	f001 f8da 	bl	8002902 <are_settings_changed>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d009      	beq.n	8001768 <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f9b3 	bl	8001aca <set_osr_settings>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <bme280_set_sensor_settings+0x9e>
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4619      	mov	r1, r3
 8001774:	2018      	movs	r0, #24
 8001776:	f001 f8c4 	bl	8002902 <are_settings_changed>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fa3a 	bl	8001c04 <set_filter_standby_settings>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f001 f8c3 	bl	8002938 <null_ptr_check>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11e      	bne.n	80017fc <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80017be:	f107 030e 	add.w	r3, r7, #14
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f81f 	bl	8001808 <bme280_get_sensor_mode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d107      	bne.n	80017e6 <bme280_set_sensor_mode+0x46>
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f000 fb1d 	bl	8001e1c <put_device_to_sleep>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fadf 	bl	8001db6 <write_power_mode>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f001 f890 	bl	8002938 <null_ptr_check>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d112      	bne.n	800184a <bme280_get_sensor_mode+0x42>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00f      	beq.n	800184a <bme280_get_sensor_mode+0x42>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	20f4      	movs	r0, #244	; 0xf4
 8001832:	f7ff feaa 	bl	800158a <bme280_get_regs>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e001      	b.n	800184e <bme280_get_sensor_mode+0x46>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800184a:	23ff      	movs	r3, #255	; 0xff
 800184c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001862:	23e0      	movs	r3, #224	; 0xe0
 8001864:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 800186a:	2305      	movs	r3, #5
 800186c:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800186e:	23b6      	movs	r3, #182	; 0xb6
 8001870:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f001 f860 	bl	8002938 <null_ptr_check>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800187c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d133      	bne.n	80018ec <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001884:	f107 010b 	add.w	r1, r7, #11
 8001888:	f107 000d 	add.w	r0, r7, #13
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f7ff feb5 	bl	80015fe <bme280_set_regs>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d125      	bne.n	80018ec <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6852      	ldr	r2, [r2, #4]
 80018a8:	4611      	mov	r1, r2
 80018aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ae:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80018b0:	f107 010c 	add.w	r1, r7, #12
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	20f3      	movs	r0, #243	; 0xf3
 80018ba:	f7ff fe66 	bl	800158a <bme280_get_regs>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <bme280_soft_reset+0x84>
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	73ba      	strb	r2, [r7, #14]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <bme280_soft_reset+0x84>
 80018d4:	7b3b      	ldrb	r3, [r7, #12]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e0      	bne.n	80018a0 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80018de:	7b3b      	ldrb	r3, [r7, #12]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80018e8:	23fa      	movs	r3, #250	; 0xfa
 80018ea:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f001 f80c 	bl	8002938 <null_ptr_check>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800192a:	2b00      	cmp	r3, #0
 800192c:	d124      	bne.n	8001978 <bme280_get_sensor_data+0x80>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d021      	beq.n	8001978 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001934:	f107 011c 	add.w	r1, r7, #28
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2208      	movs	r2, #8
 800193c:	20f7      	movs	r0, #247	; 0xf7
 800193e:	f7ff fe24 	bl	800158a <bme280_get_regs>
 8001942:	4603      	mov	r3, r0
 8001944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8001948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800194c:	2b00      	cmp	r3, #0
 800194e:	d116      	bne.n	800197e <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001950:	f107 0210 	add.w	r2, r7, #16
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f815 	bl	800198a <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3318      	adds	r3, #24
 8001964:	f107 0110 	add.w	r1, r7, #16
 8001968:	7bf8      	ldrb	r0, [r7, #15]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f000 f852 	bl	8001a14 <bme280_compensate_data>
 8001970:	4603      	mov	r3, r0
 8001972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001976:	e002      	b.n	800197e <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001978:	23ff      	movs	r3, #255	; 0xff
 800197a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800197e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001982:	4618      	mov	r0, r3
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3302      	adds	r3, #2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3303      	adds	r3, #3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	031b      	lsls	r3, r3, #12
 80019c8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3304      	adds	r3, #4
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3305      	adds	r3, #5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3306      	adds	r3, #6
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3307      	adds	r3, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	609a      	str	r2, [r3, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d045      	beq.n	8001aba <bme280_compensate_data+0xa6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d042      	beq.n	8001aba <bme280_compensate_data+0xa6>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03f      	beq.n	8001aba <bme280_compensate_data+0xa6>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	68b8      	ldr	r0, [r7, #8]
 8001a72:	f000 fa21 	bl	8001eb8 <compensate_temperature>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        if (sensor_comp & BME280_PRESS)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <bme280_compensate_data+0x88>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	68b8      	ldr	r0, [r7, #8]
 8001a8e:	f000 fae3 	bl	8002058 <compensate_pressure>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BME280_HUM)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <bme280_compensate_data+0xaa>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f000 fca3 	bl	80023f4 <compensate_humidity>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (sensor_comp & BME280_HUM)
 8001ab8:	e001      	b.n	8001abe <bme280_compensate_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001aba:	23ff      	movs	r3, #255	; 0xff
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f000 f815 	bl	8001b18 <set_osr_humidity_settings>
 8001aee:	4603      	mov	r3, r0
 8001af0:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f842 	bl	8001b8c <set_osr_press_temp_settings>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001b22:	23f2      	movs	r3, #242	; 0xf2
 8001b24:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	789b      	ldrb	r3, [r3, #2]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001b32:	f107 010e 	add.w	r1, r7, #14
 8001b36:	f107 000c 	add.w	r0, r7, #12
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f7ff fd5e 	bl	80015fe <bme280_set_regs>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001b4e:	23f4      	movs	r3, #244	; 0xf4
 8001b50:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001b52:	7b38      	ldrb	r0, [r7, #12]
 8001b54:	f107 010d 	add.w	r1, r7, #13
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f7ff fd15 	bl	800158a <bme280_get_regs>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001b6c:	f107 010d 	add.w	r1, r7, #13
 8001b70:	f107 000c 	add.w	r0, r7, #12
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f7ff fd41 	bl	80015fe <bme280_set_regs>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001b9a:	23f4      	movs	r3, #244	; 0xf4
 8001b9c:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001b9e:	7db8      	ldrb	r0, [r7, #22]
 8001ba0:	f107 0115 	add.w	r1, r7, #21
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f7ff fcef 	bl	800158a <bme280_get_regs>
 8001bac:	4603      	mov	r3, r0
 8001bae:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d11f      	bne.n	8001bf8 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001bc2:	f107 0315 	add.w	r3, r7, #21
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f88c 	bl	8001ce6 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001bd8:	f107 0315 	add.w	r3, r7, #21
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f89d 	bl	8001d1e <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001be4:	f107 0115 	add.w	r1, r7, #21
 8001be8:	f107 0016 	add.w	r0, r7, #22
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f7ff fd05 	bl	80015fe <bme280_set_regs>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001c12:	23f5      	movs	r3, #245	; 0xf5
 8001c14:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001c16:	7db8      	ldrb	r0, [r7, #22]
 8001c18:	f107 0115 	add.w	r1, r7, #21
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f7ff fcb3 	bl	800158a <bme280_get_regs>
 8001c24:	4603      	mov	r3, r0
 8001c26:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d11f      	bne.n	8001c70 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001c3a:	f107 0315 	add.w	r3, r7, #21
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f81b 	bl	8001c7c <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001c50:	f107 0315 	add.w	r3, r7, #21
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f82c 	bl	8001cb4 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001c5c:	f107 0115 	add.w	r1, r7, #21
 8001c60:	f107 0016 	add.w	r0, r7, #22
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f7ff fcc9 	bl	80015fe <bme280_set_regs>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	f023 031c 	bic.w	r3, r3, #28
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	78db      	ldrb	r3, [r3, #3]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	f003 031c 	and.w	r3, r3, #28
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	701a      	strb	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	791b      	ldrb	r3, [r3, #4]
 8001cce:	015b      	lsls	r3, r3, #5
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	701a      	strb	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	f023 031c 	bic.w	r3, r3, #28
 8001cfa:	b25a      	sxtb	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	f003 031c 	and.w	r3, r3, #28
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	701a      	strb	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	701a      	strb	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	109b      	asrs	r3, r3, #2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3303      	adds	r3, #3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	109b      	asrs	r3, r3, #2
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	711a      	strb	r2, [r3, #4]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	6039      	str	r1, [r7, #0]
 8001dc0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001dc2:	23f4      	movs	r3, #244	; 0xf4
 8001dc4:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001dc6:	7bb8      	ldrb	r0, [r7, #14]
 8001dc8:	f107 010d 	add.w	r1, r7, #13
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f7ff fbdb 	bl	800158a <bme280_get_regs>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d117      	bne.n	8001e10 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	f023 0303 	bic.w	r3, r3, #3
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001dfc:	f107 010d 	add.w	r1, r7, #13
 8001e00:	f107 000e 	add.w	r0, r7, #14
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f7ff fbf9 	bl	80015fe <bme280_set_regs>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001e24:	f107 0110 	add.w	r1, r7, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	20f2      	movs	r0, #242	; 0xf2
 8001e2e:	f7ff fbac 	bl	800158a <bme280_get_regs>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001e3e:	f107 0208 	add.w	r2, r7, #8
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff81 	bl	8001d50 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fd03 	bl	800185a <bme280_soft_reset>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f808 	bl	8001e7c <reload_device_settings>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	201f      	movs	r0, #31
 8001e8c:	f7ff fe1d 	bl	8001aca <set_osr_settings>
 8001e90:	4603      	mov	r3, r0
 8001e92:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	201f      	movs	r0, #31
 8001ea2:	f7ff feaf 	bl	8001c04 <set_filter_standby_settings>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <compensate_temperature+0x184>)
 8001ec8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <compensate_temperature+0x188>)
 8001ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fa82 	bl	80003e4 <__aeabi_ui2d>
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b57      	ldr	r3, [pc, #348]	; (8002044 <compensate_temperature+0x18c>)
 8001ee6:	f7fe fc21 	bl	800072c <__aeabi_ddiv>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4614      	mov	r4, r2
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fa74 	bl	80003e4 <__aeabi_ui2d>
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <compensate_temperature+0x190>)
 8001f02:	f7fe fc13 	bl	800072c <__aeabi_ddiv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	f7fe f92b 	bl	8000168 <__aeabi_dsub>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fa6f 	bl	8000404 <__aeabi_i2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f2e:	f7fe fad3 	bl	80004d8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fa50 	bl	80003e4 <__aeabi_ui2d>
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001f4c:	f7fe fbee 	bl	800072c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa41 	bl	80003e4 <__aeabi_ui2d>
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <compensate_temperature+0x194>)
 8001f68:	f7fe fbe0 	bl	800072c <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4620      	mov	r0, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7fe f8f8 	bl	8000168 <__aeabi_dsub>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8001f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f88:	f7fe faa6 	bl	80004d8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fa32 	bl	8000404 <__aeabi_i2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe fa96 	bl	80004d8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fbc:	f7fe f8d6 	bl	800016c <__adddf3>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fd36 	bl	8000a38 <__aeabi_d2iz>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fda:	f7fe f8c7 	bl	800016c <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <compensate_temperature+0x198>)
 8001fec:	f7fe fb9e 	bl	800072c <__aeabi_ddiv>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if (temperature < temperature_min)
 8001ff8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ffc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002000:	f7fe fcdc 	bl	80009bc <__aeabi_dcmplt>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800200a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800200e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002012:	e00c      	b.n	800202e <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8002014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002018:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800201c:	f7fe fcec 	bl	80009f8 <__aeabi_dcmpgt>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8002026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 800202e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	3730      	adds	r7, #48	; 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	c0440000 	.word	0xc0440000
 8002040:	40554000 	.word	0x40554000
 8002044:	40d00000 	.word	0x40d00000
 8002048:	40900000 	.word	0x40900000
 800204c:	40c00000 	.word	0x40c00000
 8002050:	40b40000 	.word	0x40b40000
 8002054:	00000000 	.word	0x00000000

08002058 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8002062:	a3c5      	add	r3, pc, #788	; (adr r3, 8002378 <compensate_pressure+0x320>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 800206c:	a3c4      	add	r3, pc, #784	; (adr r3, 8002380 <compensate_pressure+0x328>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe f9c2 	bl	8000404 <__aeabi_i2d>
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002088:	f7fe fb50 	bl	800072c <__aeabi_ddiv>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	4bbd      	ldr	r3, [pc, #756]	; (8002390 <compensate_pressure+0x338>)
 800209a:	f7fe f865 	bl	8000168 <__aeabi_dsub>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80020a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ae:	f7fe fa13 	bl	80004d8 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4614      	mov	r4, r2
 80020b8:	461d      	mov	r5, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f99f 	bl	8000404 <__aeabi_i2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe fa03 	bl	80004d8 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4bad      	ldr	r3, [pc, #692]	; (8002394 <compensate_pressure+0x33c>)
 80020e0:	f7fe fb24 	bl	800072c <__aeabi_ddiv>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f986 	bl	8000404 <__aeabi_i2d>
 80020f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020fc:	f7fe f9ec 	bl	80004d8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	f7fe f82e 	bl	800016c <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002118:	f7fe f828 	bl	800016c <__adddf3>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b9b      	ldr	r3, [pc, #620]	; (8002398 <compensate_pressure+0x340>)
 800212a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800212e:	f7fe fafd 	bl	800072c <__aeabi_ddiv>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	461d      	mov	r5, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f95f 	bl	8000404 <__aeabi_i2d>
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b94      	ldr	r3, [pc, #592]	; (800239c <compensate_pressure+0x344>)
 800214c:	f7fe f9c4 	bl	80004d8 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4620      	mov	r0, r4
 8002156:	4629      	mov	r1, r5
 8002158:	f7fe f808 	bl	800016c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f94a 	bl	8000404 <__aeabi_i2d>
 8002170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002174:	f7fe f9b0 	bl	80004d8 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002184:	f7fe f9a8 	bl	80004d8 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <compensate_pressure+0x348>)
 8002196:	f7fe fac9 	bl	800072c <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f92b 	bl	8000404 <__aeabi_i2d>
 80021ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b2:	f7fe f991 	bl	80004d8 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c2:	f7fd ffd3 	bl	800016c <__adddf3>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b73      	ldr	r3, [pc, #460]	; (80023a0 <compensate_pressure+0x348>)
 80021d4:	f7fe faaa 	bl	800072c <__aeabi_ddiv>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <compensate_pressure+0x33c>)
 80021e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ea:	f7fe fa9f 	bl	800072c <__aeabi_ddiv>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <compensate_pressure+0x34c>)
 80021fc:	f7fd ffb6 	bl	800016c <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4614      	mov	r4, r2
 8002206:	461d      	mov	r5, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	88db      	ldrh	r3, [r3, #6]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f8e9 	bl	80003e4 <__aeabi_ui2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f95d 	bl	80004d8 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002232:	f7fe fbe1 	bl	80009f8 <__aeabi_dcmpgt>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80d0 	beq.w	80023de <compensate_pressure+0x386>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f8ce 	bl	80003e4 <__aeabi_ui2d>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	f04f 0000 	mov.w	r0, #0
 8002250:	4955      	ldr	r1, [pc, #340]	; (80023a8 <compensate_pressure+0x350>)
 8002252:	f7fd ff89 	bl	8000168 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b52      	ldr	r3, [pc, #328]	; (80023ac <compensate_pressure+0x354>)
 8002264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002268:	f7fe fa60 	bl	800072c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002274:	f7fd ff78 	bl	8000168 <__aeabi_dsub>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	a341      	add	r3, pc, #260	; (adr r3, 8002388 <compensate_pressure+0x330>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe f927 	bl	80004d8 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002296:	f7fe fa49 	bl	800072c <__aeabi_ddiv>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe f8ab 	bl	8000404 <__aeabi_i2d>
 80022ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022b2:	f7fe f911 	bl	80004d8 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022c2:	f7fe f909 	bl	80004d8 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <compensate_pressure+0x358>)
 80022d4:	f7fe fa2a 	bl	800072c <__aeabi_ddiv>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f88c 	bl	8000404 <__aeabi_i2d>
 80022ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022f0:	f7fe f8f2 	bl	80004d8 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <compensate_pressure+0x33c>)
 8002302:	f7fe fa13 	bl	800072c <__aeabi_ddiv>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800230e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002316:	f7fd ff29 	bl	800016c <__adddf3>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4614      	mov	r4, r2
 8002320:	461d      	mov	r5, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f86b 	bl	8000404 <__aeabi_i2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fd ff19 	bl	800016c <__adddf3>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <compensate_pressure+0x35c>)
 8002348:	f7fe f9f0 	bl	800072c <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002354:	f7fd ff0a 	bl	800016c <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        if (pressure < pressure_min)
 8002360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002364:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002368:	f7fe fb28 	bl	80009bc <__aeabi_dcmplt>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d027      	beq.n	80023c2 <compensate_pressure+0x36a>
 8002372:	e021      	b.n	80023b8 <compensate_pressure+0x360>
 8002374:	f3af 8000 	nop.w
 8002378:	00000000 	.word	0x00000000
 800237c:	40dd4c00 	.word	0x40dd4c00
 8002380:	00000000 	.word	0x00000000
 8002384:	40fadb00 	.word	0x40fadb00
 8002388:	00000000 	.word	0x00000000
 800238c:	40b86a00 	.word	0x40b86a00
 8002390:	40ef4000 	.word	0x40ef4000
 8002394:	40e00000 	.word	0x40e00000
 8002398:	40100000 	.word	0x40100000
 800239c:	40f00000 	.word	0x40f00000
 80023a0:	41200000 	.word	0x41200000
 80023a4:	3ff00000 	.word	0x3ff00000
 80023a8:	41300000 	.word	0x41300000
 80023ac:	40b00000 	.word	0x40b00000
 80023b0:	41e00000 	.word	0x41e00000
 80023b4:	40300000 	.word	0x40300000
        {
            pressure = pressure_min;
 80023b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80023c0:	e011      	b.n	80023e6 <compensate_pressure+0x38e>
        }
        else if (pressure > pressure_max)
 80023c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023ca:	f7fe fb15 	bl	80009f8 <__aeabi_dcmpgt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <compensate_pressure+0x38e>
        {
            pressure = pressure_max;
 80023d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80023dc:	e003      	b.n	80023e6 <compensate_pressure+0x38e>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 80023de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 80023e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}

080023f4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b094      	sub	sp, #80	; 0x50
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b7f      	ldr	r3, [pc, #508]	; (800260c <compensate_humidity+0x218>)
 8002410:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	4618      	mov	r0, r3
 800241a:	f7fd fff3 	bl	8000404 <__aeabi_i2d>
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <compensate_humidity+0x21c>)
 8002424:	f7fd fea0 	bl	8000168 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd ffe4 	bl	8000404 <__aeabi_i2d>
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b74      	ldr	r3, [pc, #464]	; (8002614 <compensate_humidity+0x220>)
 8002442:	f7fe f849 	bl	80004d8 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4614      	mov	r4, r2
 800244c:	461d      	mov	r5, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd ffd5 	bl	8000404 <__aeabi_i2d>
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <compensate_humidity+0x224>)
 8002460:	f7fe f964 	bl	800072c <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002470:	f7fe f832 	bl	80004d8 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd fe76 	bl	800016c <__adddf3>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fd ffa9 	bl	80003e4 <__aeabi_ui2d>
 8002492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002496:	f7fd fe67 	bl	8000168 <__aeabi_dsub>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd ffab 	bl	8000404 <__aeabi_i2d>
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b5a      	ldr	r3, [pc, #360]	; (800261c <compensate_humidity+0x228>)
 80024b4:	f7fe f93a 	bl	800072c <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	7f1b      	ldrb	r3, [r3, #28]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fd ff8d 	bl	80003e4 <__aeabi_ui2d>
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <compensate_humidity+0x22c>)
 80024d0:	f7fe f92c 	bl	800072c <__aeabi_ddiv>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024e0:	f7fd fffa 	bl	80004d8 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <compensate_humidity+0x230>)
 80024f2:	f7fd fe3b 	bl	800016c <__adddf3>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ff7d 	bl	8000404 <__aeabi_i2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <compensate_humidity+0x22c>)
 8002510:	f7fe f90c 	bl	800072c <__aeabi_ddiv>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002520:	f7fd ffda 	bl	80004d8 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002530:	f7fd ffd2 	bl	80004d8 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <compensate_humidity+0x230>)
 8002542:	f7fd fe13 	bl	800016c <__adddf3>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 800254e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002552:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002556:	f7fd ffbf 	bl	80004d8 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4614      	mov	r4, r2
 8002560:	461d      	mov	r5, r3
 8002562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002566:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800256a:	f7fd ffb5 	bl	80004d8 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	f7fd ffaf 	bl	80004d8 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7e1b      	ldrb	r3, [r3, #24]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ff2c 	bl	80003e4 <__aeabi_ui2d>
 800258c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002590:	f7fd ffa2 	bl	80004d8 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <compensate_humidity+0x234>)
 80025a2:	f7fe f8c3 	bl	800072c <__aeabi_ddiv>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	491d      	ldr	r1, [pc, #116]	; (8002624 <compensate_humidity+0x230>)
 80025b0:	f7fd fdda 	bl	8000168 <__aeabi_dsub>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025bc:	f7fd ff8c 	bl	80004d8 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 80025c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025d0:	f7fe fa12 	bl	80009f8 <__aeabi_dcmpgt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 80025da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80025e2:	e00c      	b.n	80025fe <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 80025e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025ec:	f7fe f9e6 	bl	80009bc <__aeabi_dcmplt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 80025f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 80025fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	3750      	adds	r7, #80	; 0x50
 8002608:	46bd      	mov	sp, r7
 800260a:	bdb0      	pop	{r4, r5, r7, pc}
 800260c:	40590000 	.word	0x40590000
 8002610:	40f2c000 	.word	0x40f2c000
 8002614:	40500000 	.word	0x40500000
 8002618:	40d00000 	.word	0x40d00000
 800261c:	40f00000 	.word	0x40f00000
 8002620:	41900000 	.word	0x41900000
 8002624:	3ff00000 	.word	0x3ff00000
 8002628:	41200000 	.word	0x41200000

0800262c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002634:	2388      	movs	r3, #136	; 0x88
 8002636:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002650:	f107 010c 	add.w	r1, r7, #12
 8002654:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	221a      	movs	r2, #26
 800265c:	f7fe ff95 	bl	800158a <bme280_get_regs>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 8002666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11d      	bne.n	80026aa <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f849 	bl	800270c <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800267a:	23e1      	movs	r3, #225	; 0xe1
 800267c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002680:	f107 010c 	add.w	r1, r7, #12
 8002684:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2207      	movs	r2, #7
 800268c:	f7fe ff7d 	bl	800158a <bme280_get_regs>
 8002690:	4603      	mov	r3, r0
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8002696:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f8df 	bl	8002868 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80026aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b087      	sub	sp, #28
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
 80026c8:	e016      	b.n	80026f8 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	441a      	add	r2, r3
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	3b01      	subs	r3, #1
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	440b      	add	r3, r1
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	441a      	add	r2, r3
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4619      	mov	r1, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	440b      	add	r3, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	3301      	adds	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
 80026f8:	7dfa      	ldrb	r2, [r7, #23]
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d3e4      	bcc.n	80026ca <interleave_reg_addr+0x14>
    }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3318      	adds	r3, #24
 800271a:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	b21a      	sxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21b      	sxth	r3, r3
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3303      	adds	r3, #3
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	b21a      	sxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3302      	adds	r3, #2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b21b      	sxth	r3, r3
 8002748:	4313      	orrs	r3, r2
 800274a:	b21a      	sxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3305      	adds	r3, #5
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	b21a      	sxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b21b      	sxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b21a      	sxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3307      	adds	r3, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21a      	sxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3306      	adds	r3, #6
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b21b      	sxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b21b      	sxth	r3, r3
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3309      	adds	r3, #9
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3308      	adds	r3, #8
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21a      	sxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	330b      	adds	r3, #11
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b21a      	sxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	330a      	adds	r3, #10
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	330d      	adds	r3, #13
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	330c      	adds	r3, #12
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	330f      	adds	r3, #15
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	b21a      	sxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	330e      	adds	r3, #14
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3311      	adds	r3, #17
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3310      	adds	r3, #16
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b21b      	sxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b21a      	sxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3313      	adds	r3, #19
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b21a      	sxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3312      	adds	r3, #18
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b21b      	sxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b21a      	sxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3315      	adds	r3, #21
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21a      	sxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3314      	adds	r3, #20
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b21b      	sxth	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b21a      	sxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3317      	adds	r3, #23
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	b21a      	sxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3316      	adds	r3, #22
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b21b      	sxth	r3, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	b21a      	sxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7e5a      	ldrb	r2, [r3, #25]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	761a      	strb	r2, [r3, #24]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	3318      	adds	r3, #24
 8002876:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3301      	adds	r3, #1
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b21a      	sxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21a      	sxth	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	789a      	ldrb	r2, [r3, #2]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3303      	adds	r3, #3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80028b6:	8a7a      	ldrh	r2, [r7, #18]
 80028b8:	8a3b      	ldrh	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b21a      	sxth	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3305      	adds	r3, #5
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80028de:	89fa      	ldrh	r2, [r7, #14]
 80028e0:	89bb      	ldrh	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3306      	adds	r3, #6
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25a      	sxtb	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	460a      	mov	r2, r1
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	4613      	mov	r3, r2
 8002910:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002916:	79fa      	ldrb	r2, [r7, #7]
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	4013      	ands	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e001      	b.n	800292c <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <null_ptr_check+0x26>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <null_ptr_check+0x26>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <null_ptr_check+0x26>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800295e:	23ff      	movs	r3, #255	; 0xff
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e001      	b.n	8002968 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002976:	b590      	push	{r4, r7, lr}
 8002978:	b087      	sub	sp, #28
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	461a      	mov	r2, r3
 8002982:	460b      	mov	r3, r1
 8002984:	72fb      	strb	r3, [r7, #11]
 8002986:	4613      	mov	r3, r2
 8002988:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685c      	ldr	r4, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6898      	ldr	r0, [r3, #8]
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	7af9      	ldrb	r1, [r7, #11]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	47a0      	blx	r4
 800299a:	6178      	str	r0, [r7, #20]

  return ret;
 800299c:	697b      	ldr	r3, [r7, #20]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}

080029a6 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80029a6:	b590      	push	{r4, r7, lr}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	461a      	mov	r2, r3
 80029b2:	460b      	mov	r3, r1
 80029b4:	72fb      	strb	r3, [r7, #11]
 80029b6:	4613      	mov	r3, r2
 80029b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681c      	ldr	r4, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6898      	ldr	r0, [r3, #8]
 80029c2:	893b      	ldrh	r3, [r7, #8]
 80029c4:	7af9      	ldrb	r1, [r7, #11]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	47a0      	blx	r4
 80029ca:	6178      	str	r0, [r7, #20]

  return ret;
 80029cc:	697b      	ldr	r3, [r7, #20]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
	...

080029d8 <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 80029e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe f958 	bl	8000c9c <__aeabi_i2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4907      	ldr	r1, [pc, #28]	; (8002a0c <lsm6ds3_from_fs16g_to_mg+0x34>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f9a7 	bl	8000d44 <__aeabi_fmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4905      	ldr	r1, [pc, #20]	; (8002a10 <lsm6ds3_from_fs16g_to_mg+0x38>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fa56 	bl	8000eac <__aeabi_fdiv>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	43f40000 	.word	0x43f40000
 8002a10:	447a0000 	.word	0x447a0000

08002a14 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f93a 	bl	8000c9c <__aeabi_i2f>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <lsm6ds3_from_fs2000dps_to_mdps+0x28>)
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe f989 	bl	8000d44 <__aeabi_fmul>
 8002a32:	4603      	mov	r3, r0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	428c0000 	.word	0x428c0000

08002a40 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 8002a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f924 	bl	8000c9c <__aeabi_i2f>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fa26 	bl	8000eac <__aeabi_fdiv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4904      	ldr	r1, [pc, #16]	; (8002a74 <lsm6ds3_from_lsb_to_celsius+0x34>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f865 	bl	8000b34 <__addsf3>
 8002a6a:	4603      	mov	r3, r0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	41c80000 	.word	0x41c80000

08002a78 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a84:	f107 0208 	add.w	r2, r7, #8
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff72 	bl	8002976 <lsm6ds3_read_reg>
 8002a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	7a3b      	ldrb	r3, [r7, #8]
 8002aa4:	f362 0383 	bfi	r3, r2, #2, #2
 8002aa8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002aaa:	f107 0208 	add.w	r2, r7, #8
 8002aae:	2301      	movs	r3, #1
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ff77 	bl	80029a6 <lsm6ds3_write_reg>
 8002ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aba:	68fb      	ldr	r3, [r7, #12]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002ad0:	f107 0208 	add.w	r2, r7, #8
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff4c 	bl	8002976 <lsm6ds3_read_reg>
 8002ade:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	7a3b      	ldrb	r3, [r7, #8]
 8002af0:	f362 1307 	bfi	r3, r2, #4, #4
 8002af4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002af6:	f107 0208 	add.w	r2, r7, #8
 8002afa:	2301      	movs	r3, #1
 8002afc:	2110      	movs	r1, #16
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff51 	bl	80029a6 <lsm6ds3_write_reg>
 8002b04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b1c:	f107 0208 	add.w	r2, r7, #8
 8002b20:	2301      	movs	r3, #1
 8002b22:	2111      	movs	r1, #17
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff26 	bl	8002976 <lsm6ds3_read_reg>
 8002b2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	7a3b      	ldrb	r3, [r7, #8]
 8002b3c:	f362 0343 	bfi	r3, r2, #1, #3
 8002b40:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b42:	f107 0208 	add.w	r2, r7, #8
 8002b46:	2301      	movs	r3, #1
 8002b48:	2111      	movs	r1, #17
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff2b 	bl	80029a6 <lsm6ds3_write_reg>
 8002b50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b68:	f107 0208 	add.w	r2, r7, #8
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	2111      	movs	r1, #17
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff00 	bl	8002976 <lsm6ds3_read_reg>
 8002b76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	7a3b      	ldrb	r3, [r7, #8]
 8002b88:	f362 1307 	bfi	r3, r2, #4, #4
 8002b8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b8e:	f107 0208 	add.w	r2, r7, #8
 8002b92:	2301      	movs	r3, #1
 8002b94:	2111      	movs	r1, #17
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff05 	bl	80029a6 <lsm6ds3_write_reg>
 8002b9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8002bb2:	f107 0208 	add.w	r2, r7, #8
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	2120      	movs	r1, #32
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fedb 	bl	8002976 <lsm6ds3_read_reg>
 8002bc0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002bc2:	7a7b      	ldrb	r3, [r7, #9]
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	7a3b      	ldrb	r3, [r7, #8]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b21a      	sxth	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002be4:	68fb      	ldr	r3, [r7, #12]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8002bf8:	f107 020c 	add.w	r2, r7, #12
 8002bfc:	2306      	movs	r3, #6
 8002bfe:	2122      	movs	r1, #34	; 0x22
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff feb8 	bl	8002976 <lsm6ds3_read_reg>
 8002c06:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c08:	7b7b      	ldrb	r3, [r7, #13]
 8002c0a:	b21a      	sxth	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	7b3b      	ldrb	r3, [r7, #12]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3302      	adds	r3, #2
 8002c30:	b212      	sxth	r2, r2
 8002c32:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3302      	adds	r3, #2
 8002c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	b212      	sxth	r2, r2
 8002c50:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002c52:	7c7a      	ldrb	r2, [r7, #17]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	3304      	adds	r3, #4
 8002c58:	b212      	sxth	r2, r2
 8002c5a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	7c3b      	ldrb	r3, [r7, #16]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	3304      	adds	r3, #4
 8002c76:	b212      	sxth	r2, r2
 8002c78:	801a      	strh	r2, [r3, #0]

  return ret;
 8002c7a:	697b      	ldr	r3, [r7, #20]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8002c8e:	f107 020c 	add.w	r2, r7, #12
 8002c92:	2306      	movs	r3, #6
 8002c94:	2128      	movs	r1, #40	; 0x28
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fe6d 	bl	8002976 <lsm6ds3_read_reg>
 8002c9c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ca0:	b21a      	sxth	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	7b3b      	ldrb	r3, [r7, #12]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	b212      	sxth	r2, r2
 8002cc8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3302      	adds	r3, #2
 8002cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	7bbb      	ldrb	r3, [r7, #14]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	b212      	sxth	r2, r2
 8002ce6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002ce8:	7c7a      	ldrb	r2, [r7, #17]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3304      	adds	r3, #4
 8002cee:	b212      	sxth	r2, r2
 8002cf0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	7c3b      	ldrb	r3, [r7, #16]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	b212      	sxth	r2, r2
 8002d0e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002d10:	697b      	ldr	r3, [r7, #20]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8002d24:	2301      	movs	r3, #1
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	210f      	movs	r1, #15
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fe23 	bl	8002976 <lsm6ds3_read_reg>
 8002d30:	60f8      	str	r0, [r7, #12]

  return ret;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d48:	f107 0208 	add.w	r2, r7, #8
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2112      	movs	r1, #18
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fe10 	bl	8002976 <lsm6ds3_read_reg>
 8002d56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	7a3b      	ldrb	r3, [r7, #8]
 8002d68:	f362 0300 	bfi	r3, r2, #0, #1
 8002d6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d6e:	f107 0208 	add.w	r2, r7, #8
 8002d72:	2301      	movs	r3, #1
 8002d74:	2112      	movs	r1, #18
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fe15 	bl	80029a6 <lsm6ds3_write_reg>
 8002d7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d8c:	f000 fa70 	bl	8003270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d90:	f000 f809 	bl	8002da6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d94:	f000 f89e 	bl	8002ed4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d98:	f000 f840 	bl	8002e1c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002d9c:	f000 f86c 	bl	8002e78 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8002da0:	f7fe f9f4 	bl	800118c <app_main>
  //bme280_set_regs( 4, BME280_I2C_INTF);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002da4:	e7fe      	b.n	8002da4 <main+0x1c>

08002da6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b090      	sub	sp, #64	; 0x40
 8002daa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dac:	f107 0318 	add.w	r3, r7, #24
 8002db0:	2228      	movs	r2, #40	; 0x28
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 fe9b 	bl	8005af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd8:	f107 0318 	add.w	r3, r7, #24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fa61 	bl	80052a4 <HAL_RCC_OscConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002de8:	f000 f88a 	bl	8002f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dec:	230f      	movs	r3, #15
 8002dee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fccf 	bl	80057a8 <HAL_RCC_ClockConfig>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002e10:	f000 f876 	bl	8002f00 <Error_Handler>
  }
}
 8002e14:	bf00      	nop
 8002e16:	3740      	adds	r7, #64	; 0x40
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <MX_I2C1_Init+0x54>)
 8002e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e28:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <MX_I2C1_Init+0x58>)
 8002e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	; (8002e6c <MX_I2C1_Init+0x50>)
 8002e5a:	f000 fd0f 	bl	800387c <HAL_I2C_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e64:	f000 f84c 	bl	8002f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	200001f8 	.word	0x200001f8
 8002e70:	40005400 	.word	0x40005400
 8002e74:	000186a0 	.word	0x000186a0

08002e78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002e7e:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <MX_I2C2_Init+0x54>)
 8002e80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002e84:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <MX_I2C2_Init+0x58>)
 8002e86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002eb4:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <MX_I2C2_Init+0x50>)
 8002eb6:	f000 fce1 	bl	800387c <HAL_I2C_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002ec0:	f000 f81e 	bl	8002f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000024c 	.word	0x2000024c
 8002ecc:	40005800 	.word	0x40005800
 8002ed0:	000186a0 	.word	0x000186a0

08002ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_GPIO_Init+0x28>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <MX_GPIO_Init+0x28>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6193      	str	r3, [r2, #24]
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <MX_GPIO_Init+0x28>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000

08002f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f04:	b672      	cpsid	i
}
 8002f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f08:	e7fe      	b.n	8002f08 <Error_Handler+0x8>
	...

08002f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_MspInit+0x40>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <HAL_MspInit+0x40>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6193      	str	r3, [r2, #24]
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_MspInit+0x40>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_MspInit+0x40>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <HAL_MspInit+0x40>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	61d3      	str	r3, [r2, #28]
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_MspInit+0x40>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	; 0x30
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 031c 	add.w	r3, r7, #28
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_I2C_MspInit+0xe4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d133      	bne.n	8002fd8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a30      	ldr	r2, [pc, #192]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6193      	str	r3, [r2, #24]
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f8e:	2312      	movs	r3, #18
 8002f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4827      	ldr	r0, [pc, #156]	; (800303c <HAL_I2C_MspInit+0xec>)
 8002f9e:	f000 fad1 	bl	8003544 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002fa2:	4b27      	ldr	r3, [pc, #156]	; (8003040 <HAL_I2C_MspInit+0xf0>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_I2C_MspInit+0xf0>)
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002fd6:	e029      	b.n	800302c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_I2C_MspInit+0xf4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d124      	bne.n	800302c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	6193      	str	r3, [r2, #24]
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ffa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003000:	2312      	movs	r3, #18
 8003002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	4619      	mov	r1, r3
 800300e:	480b      	ldr	r0, [pc, #44]	; (800303c <HAL_I2C_MspInit+0xec>)
 8003010:	f000 fa98 	bl	8003544 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 800301a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800301e:	61d3      	str	r3, [r2, #28]
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_I2C_MspInit+0xe8>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	bf00      	nop
 800302e:	3730      	adds	r7, #48	; 0x30
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40005400 	.word	0x40005400
 8003038:	40021000 	.word	0x40021000
 800303c:	40010c00 	.word	0x40010c00
 8003040:	40010000 	.word	0x40010000
 8003044:	40005800 	.word	0x40005800

08003048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800304c:	e7fe      	b.n	800304c <NMI_Handler+0x4>

0800304e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003052:	e7fe      	b.n	8003052 <HardFault_Handler+0x4>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler+0x4>

0800305a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <BusFault_Handler+0x4>

08003060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <UsageFault_Handler+0x4>

08003066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800308e:	f000 f935 	bl	80032fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}

08003096 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  return 1;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <_kill>:

int _kill(int pid, int sig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ae:	f002 fcf5 	bl	8005a9c <__errno>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2216      	movs	r2, #22
 80030b6:	601a      	str	r2, [r3, #0]
  return -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_exit>:

void _exit (int status)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ffe7 	bl	80030a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030d6:	e7fe      	b.n	80030d6 <_exit+0x12>

080030d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e00a      	b.n	8003100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ea:	f3af 8000 	nop.w
 80030ee:	4601      	mov	r1, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	60ba      	str	r2, [r7, #8]
 80030f6:	b2ca      	uxtb	r2, r1
 80030f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3301      	adds	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	dbf0      	blt.n	80030ea <_read+0x12>
  }

  return len;
 8003108:	687b      	ldr	r3, [r7, #4]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e009      	b.n	8003138 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	60ba      	str	r2, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3301      	adds	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	dbf1      	blt.n	8003124 <_write+0x12>
  }
  return len;
 8003140:	687b      	ldr	r3, [r7, #4]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <_close>:

int _close(int file)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003170:	605a      	str	r2, [r3, #4]
  return 0;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <_isatty>:

int _isatty(int file)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
	...

080031ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <_sbrk+0x5c>)
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <_sbrk+0x60>)
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <_sbrk+0x64>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <_sbrk+0x64>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <_sbrk+0x68>)
 80031cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d207      	bcs.n	80031ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031dc:	f002 fc5e 	bl	8005a9c <__errno>
 80031e0:	4603      	mov	r3, r0
 80031e2:	220c      	movs	r2, #12
 80031e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ea:	e009      	b.n	8003200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <_sbrk+0x64>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <_sbrk+0x64>)
 80031fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20005000 	.word	0x20005000
 800320c:	00000400 	.word	0x00000400
 8003210:	200002a0 	.word	0x200002a0
 8003214:	200002b8 	.word	0x200002b8

08003218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003224:	f7ff fff8 	bl	8003218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800322a:	490c      	ldr	r1, [pc, #48]	; (800325c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800322c:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003230:	e002      	b.n	8003238 <LoopCopyDataInit>

08003232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003236:	3304      	adds	r3, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800323c:	d3f9      	bcc.n	8003232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003240:	4c09      	ldr	r4, [pc, #36]	; (8003268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003244:	e001      	b.n	800324a <LoopFillZerobss>

08003246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003248:	3204      	adds	r2, #4

0800324a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800324c:	d3fb      	bcc.n	8003246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800324e:	f002 fc2b 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003252:	f7ff fd99 	bl	8002d88 <main>
  bx lr
 8003256:	4770      	bx	lr
  ldr r0, =_sdata
 8003258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800325c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003260:	08008a74 	.word	0x08008a74
  ldr r2, =_sbss
 8003264:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003268:	200002b8 	.word	0x200002b8

0800326c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC1_2_IRQHandler>
	...

08003270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_Init+0x28>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_Init+0x28>)
 800327a:	f043 0310 	orr.w	r3, r3, #16
 800327e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003280:	2003      	movs	r0, #3
 8003282:	f000 f92b 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003286:	200f      	movs	r0, #15
 8003288:	f000 f808 	bl	800329c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800328c:	f7ff fe3e 	bl	8002f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40022000 	.word	0x40022000

0800329c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x54>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_InitTick+0x58>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f935 	bl	800352a <HAL_SYSTICK_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00e      	b.n	80032e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	d80a      	bhi.n	80032e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d0:	2200      	movs	r2, #0
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032d8:	f000 f90b 	bl	80034f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_InitTick+0x5c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000008 	.word	0x20000008
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_IncTick+0x1c>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_IncTick+0x20>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	4a03      	ldr	r2, [pc, #12]	; (800331c <HAL_IncTick+0x20>)
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	20000008 	.word	0x20000008
 800331c:	200002a4 	.word	0x200002a4

08003320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return uwTick;
 8003324:	4b02      	ldr	r3, [pc, #8]	; (8003330 <HAL_GetTick+0x10>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	200002a4 	.word	0x200002a4

08003334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7ff fff0 	bl	8003320 <HAL_GetTick>
 8003340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334c:	d005      	beq.n	800335a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_Delay+0x44>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800335a:	bf00      	nop
 800335c:	f7ff ffe0 	bl	8003320 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	429a      	cmp	r2, r3
 800336a:	d8f7      	bhi.n	800335c <HAL_Delay+0x28>
  {
  }
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000008 	.word	0x20000008

0800337c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ae:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	60d3      	str	r3, [r2, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_GetPriorityGrouping+0x18>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 0307 	and.w	r3, r3, #7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034bc:	f7ff ff90 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff49 	bl	800337c <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003504:	f7ff ff5e 	bl	80033c4 <__NVIC_GetPriorityGrouping>
 8003508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff90 	bl	8003434 <NVIC_EncodePriority>
 8003514:	4602      	mov	r2, r0
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff5f 	bl	80033e0 <__NVIC_SetPriority>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffb0 	bl	8003498 <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b08b      	sub	sp, #44	; 0x2c
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003556:	e169      	b.n	800382c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003558:	2201      	movs	r2, #1
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	f040 8158 	bne.w	8003826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a9a      	ldr	r2, [pc, #616]	; (80037e4 <HAL_GPIO_Init+0x2a0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003580:	4a98      	ldr	r2, [pc, #608]	; (80037e4 <HAL_GPIO_Init+0x2a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d875      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003586:	4a98      	ldr	r2, [pc, #608]	; (80037e8 <HAL_GPIO_Init+0x2a4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d058      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 800358c:	4a96      	ldr	r2, [pc, #600]	; (80037e8 <HAL_GPIO_Init+0x2a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d86f      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003592:	4a96      	ldr	r2, [pc, #600]	; (80037ec <HAL_GPIO_Init+0x2a8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d052      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003598:	4a94      	ldr	r2, [pc, #592]	; (80037ec <HAL_GPIO_Init+0x2a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d869      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 800359e:	4a94      	ldr	r2, [pc, #592]	; (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04c      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035a4:	4a92      	ldr	r2, [pc, #584]	; (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d863      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035aa:	4a92      	ldr	r2, [pc, #584]	; (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d046      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035b0:	4a90      	ldr	r2, [pc, #576]	; (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d85d      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035b6:	2b12      	cmp	r3, #18
 80035b8:	d82a      	bhi.n	8003610 <HAL_GPIO_Init+0xcc>
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d859      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_GPIO_Init+0x80>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	0800363f 	.word	0x0800363f
 80035c8:	08003619 	.word	0x08003619
 80035cc:	0800362b 	.word	0x0800362b
 80035d0:	0800366d 	.word	0x0800366d
 80035d4:	08003673 	.word	0x08003673
 80035d8:	08003673 	.word	0x08003673
 80035dc:	08003673 	.word	0x08003673
 80035e0:	08003673 	.word	0x08003673
 80035e4:	08003673 	.word	0x08003673
 80035e8:	08003673 	.word	0x08003673
 80035ec:	08003673 	.word	0x08003673
 80035f0:	08003673 	.word	0x08003673
 80035f4:	08003673 	.word	0x08003673
 80035f8:	08003673 	.word	0x08003673
 80035fc:	08003673 	.word	0x08003673
 8003600:	08003673 	.word	0x08003673
 8003604:	08003673 	.word	0x08003673
 8003608:	08003621 	.word	0x08003621
 800360c:	08003635 	.word	0x08003635
 8003610:	4a79      	ldr	r2, [pc, #484]	; (80037f8 <HAL_GPIO_Init+0x2b4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003616:	e02c      	b.n	8003672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	623b      	str	r3, [r7, #32]
          break;
 800361e:	e029      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	623b      	str	r3, [r7, #32]
          break;
 8003628:	e024      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	3308      	adds	r3, #8
 8003630:	623b      	str	r3, [r7, #32]
          break;
 8003632:	e01f      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	330c      	adds	r3, #12
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e01a      	b.n	8003674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003646:	2304      	movs	r3, #4
 8003648:	623b      	str	r3, [r7, #32]
          break;
 800364a:	e013      	b.n	8003674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003654:	2308      	movs	r3, #8
 8003656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	611a      	str	r2, [r3, #16]
          break;
 800365e:	e009      	b.n	8003674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003660:	2308      	movs	r3, #8
 8003662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	615a      	str	r2, [r3, #20]
          break;
 800366a:	e003      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
          break;
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x130>
          break;
 8003672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2bff      	cmp	r3, #255	; 0xff
 8003678:	d801      	bhi.n	800367e <HAL_GPIO_Init+0x13a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e001      	b.n	8003682 <HAL_GPIO_Init+0x13e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d802      	bhi.n	8003690 <HAL_GPIO_Init+0x14c>
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x152>
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	3b08      	subs	r3, #8
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	210f      	movs	r1, #15
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b1 	beq.w	8003826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_GPIO_Init+0x2b8>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	4a4c      	ldr	r2, [pc, #304]	; (80037fc <HAL_GPIO_Init+0x2b8>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6193      	str	r3, [r2, #24]
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_GPIO_Init+0x2b8>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036dc:	4a48      	ldr	r2, [pc, #288]	; (8003800 <HAL_GPIO_Init+0x2bc>)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_GPIO_Init+0x2c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3f      	ldr	r2, [pc, #252]	; (8003808 <HAL_GPIO_Init+0x2c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00d      	beq.n	800372c <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_GPIO_Init+0x2c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <HAL_GPIO_Init+0x2cc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_GPIO_Init+0x1e0>
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003724:	2304      	movs	r3, #4
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003730:	2300      	movs	r3, #0
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003742:	492f      	ldr	r1, [pc, #188]	; (8003800 <HAL_GPIO_Init+0x2bc>)
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	492c      	ldr	r1, [pc, #176]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4928      	ldr	r1, [pc, #160]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003784:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4922      	ldr	r1, [pc, #136]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	43db      	mvns	r3, r3
 800379a:	491e      	ldr	r1, [pc, #120]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800379c:	4013      	ands	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4918      	ldr	r1, [pc, #96]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e006      	b.n	80037c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ba:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	4914      	ldr	r1, [pc, #80]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e021      	b.n	8003826 <HAL_GPIO_Init+0x2e2>
 80037e2:	bf00      	nop
 80037e4:	10320000 	.word	0x10320000
 80037e8:	10310000 	.word	0x10310000
 80037ec:	10220000 	.word	0x10220000
 80037f0:	10210000 	.word	0x10210000
 80037f4:	10120000 	.word	0x10120000
 80037f8:	10110000 	.word	0x10110000
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010000 	.word	0x40010000
 8003804:	40010800 	.word	0x40010800
 8003808:	40010c00 	.word	0x40010c00
 800380c:	40011000 	.word	0x40011000
 8003810:	40011400 	.word	0x40011400
 8003814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_GPIO_Init+0x304>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	43db      	mvns	r3, r3
 8003820:	4909      	ldr	r1, [pc, #36]	; (8003848 <HAL_GPIO_Init+0x304>)
 8003822:	4013      	ands	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	3301      	adds	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae8e 	bne.w	8003558 <HAL_GPIO_Init+0x14>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	372c      	adds	r7, #44	; 0x2c
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e12b      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fb54 	bl	8002f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e0:	f002 f8aa 	bl	8005a38 <HAL_RCC_GetPCLK1Freq>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a81      	ldr	r2, [pc, #516]	; (8003af0 <HAL_I2C_Init+0x274>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d807      	bhi.n	8003900 <HAL_I2C_Init+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_I2C_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e006      	b.n	800390e <HAL_I2C_Init+0x92>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a7d      	ldr	r2, [pc, #500]	; (8003af8 <HAL_I2C_Init+0x27c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e7      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a78      	ldr	r2, [pc, #480]	; (8003afc <HAL_I2C_Init+0x280>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_I2C_Init+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <HAL_I2C_Init+0xd4>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	e009      	b.n	8003964 <HAL_I2C_Init+0xe8>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	4a69      	ldr	r2, [pc, #420]	; (8003b00 <HAL_I2C_Init+0x284>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	3301      	adds	r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	495c      	ldr	r1, [pc, #368]	; (8003af0 <HAL_I2C_Init+0x274>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d819      	bhi.n	80039b8 <HAL_I2C_Init+0x13c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003998:	400b      	ands	r3, r1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_I2C_Init+0x138>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e59      	subs	r1, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	e051      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e04f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_I2C_Init+0x168>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e012      	b.n	8003a0a <HAL_I2C_Init+0x18e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x196>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e022      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_I2C_Init+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e58      	subs	r0, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	0099      	lsls	r1, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6809      	ldr	r1, [r1, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6911      	ldr	r1, [r2, #16]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	000186a0 	.word	0x000186a0
 8003af4:	001e847f 	.word	0x001e847f
 8003af8:	003d08ff 	.word	0x003d08ff
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	817b      	strh	r3, [r7, #10]
 8003b14:	4613      	mov	r3, r2
 8003b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff fc02 	bl	8003320 <HAL_GetTick>
 8003b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	f040 80e0 	bne.w	8003cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2319      	movs	r3, #25
 8003b32:	2201      	movs	r2, #1
 8003b34:	4970      	ldr	r1, [pc, #448]	; (8003cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f001 f97e 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	e0d3      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2C_Master_Transmit+0x50>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e0cc      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d007      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2210      	movs	r2, #16
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a50      	ldr	r2, [pc, #320]	; (8003cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bbc:	8979      	ldrh	r1, [r7, #10]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fe6a 	bl	800489c <I2C_MasterRequestWrite>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e08d      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003be8:	e066      	b.n	8003cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f001 fa3c 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d107      	bne.n	8003c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06b      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d11b      	bne.n	8003c8c <HAL_I2C_Master_Transmit+0x188>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	6a39      	ldr	r1, [r7, #32]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f001 fa33 	bl	80050fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d107      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e01a      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d194      	bne.n	8003bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	00100002 	.word	0x00100002
 8003cfc:	ffff0000 	.word	0xffff0000

08003d00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
 8003d10:	4613      	mov	r3, r2
 8003d12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7ff fb02 	bl	8003320 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	f040 824b 	bne.w	80041c2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	497f      	ldr	r1, [pc, #508]	; (8003f34 <HAL_I2C_Master_Receive+0x234>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f001 f87e 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
 8003d44:	e23e      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2C_Master_Receive+0x54>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e237      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d007      	beq.n	8003d7a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2222      	movs	r2, #34	; 0x22
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2210      	movs	r2, #16
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a5f      	ldr	r2, [pc, #380]	; (8003f38 <HAL_I2C_Master_Receive+0x238>)
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fdec 	bl	80049a0 <I2C_MasterRequestRead>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e1f8      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d113      	bne.n	8003e02 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e1cc      	b.n	800419c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d11e      	bne.n	8003e48 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e1a:	b672      	cpsid	i
}
 8003e1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e44:	b662      	cpsie	i
}
 8003e46:	e035      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d11e      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
}
 8003e62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e8a:	b662      	cpsie	i
}
 8003e8c:	e012      	b.n	8003eb4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003eb4:	e172      	b.n	800419c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	f200 811f 	bhi.w	80040fe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d123      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f001 f95d 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e173      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f0e:	e145      	b.n	800419c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d152      	bne.n	8003fbe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	2200      	movs	r2, #0
 8003f20:	4906      	ldr	r1, [pc, #24]	; (8003f3c <HAL_I2C_Master_Receive+0x23c>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 ff88 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e148      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
 8003f32:	bf00      	nop
 8003f34:	00100002 	.word	0x00100002
 8003f38:	ffff0000 	.word	0xffff0000
 8003f3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f40:	b672      	cpsid	i
}
 8003f42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f86:	b662      	cpsie	i
}
 8003f88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fbc:	e0ee      	b.n	800419c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4981      	ldr	r1, [pc, #516]	; (80041cc <HAL_I2C_Master_Receive+0x4cc>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 ff35 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0f5      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe8:	b672      	cpsid	i
}
 8003fea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800401e:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <HAL_I2C_Master_Receive+0x4d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	08db      	lsrs	r3, r3, #3
 8004024:	4a6b      	ldr	r2, [pc, #428]	; (80041d4 <HAL_I2C_Master_Receive+0x4d4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0a1a      	lsrs	r2, r3, #8
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	00da      	lsls	r2, r3, #3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	3b01      	subs	r3, #1
 800403c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d118      	bne.n	8004076 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004066:	b662      	cpsie	i
}
 8004068:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0a6      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d1d9      	bne.n	8004038 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040c6:	b662      	cpsie	i
}
 80040c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040fc:	e04e      	b.n	800419c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f001 f842 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e058      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d124      	bne.n	800419c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	2b03      	cmp	r3, #3
 8004158:	d107      	bne.n	800416a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f47f ae88 	bne.w	8003eb6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	00010004 	.word	0x00010004
 80041d0:	20000000 	.word	0x20000000
 80041d4:	14f8b589 	.word	0x14f8b589

080041d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	817b      	strh	r3, [r7, #10]
 80041ea:	460b      	mov	r3, r1
 80041ec:	813b      	strh	r3, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041f2:	f7ff f895 	bl	8003320 <HAL_GetTick>
 80041f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	f040 80d9 	bne.w	80043b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2319      	movs	r3, #25
 800420c:	2201      	movs	r2, #1
 800420e:	496d      	ldr	r1, [pc, #436]	; (80043c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fe11 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
 800421e:	e0cc      	b.n	80043ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_I2C_Mem_Write+0x56>
 800422a:	2302      	movs	r3, #2
 800422c:	e0c5      	b.n	80043ba <HAL_I2C_Mem_Write+0x1e2>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d007      	beq.n	8004254 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2221      	movs	r2, #33	; 0x21
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2240      	movs	r2, #64	; 0x40
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004296:	88f8      	ldrh	r0, [r7, #6]
 8004298:	893a      	ldrh	r2, [r7, #8]
 800429a:	8979      	ldrh	r1, [r7, #10]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	4603      	mov	r3, r0
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fc48 	bl	8004b3c <I2C_RequestMemoryWrite>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d052      	beq.n	8004358 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e081      	b.n	80043ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fed6 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d107      	bne.n	80042de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06b      	b.n	80043ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d11b      	bne.n	8004358 <HAL_I2C_Mem_Write+0x180>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d017      	beq.n	8004358 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1aa      	bne.n	80042b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fec9 	bl	80050fc <I2C_WaitOnBTFFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00d      	beq.n	800438c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b04      	cmp	r3, #4
 8004376:	d107      	bne.n	8004388 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e016      	b.n	80043ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	00100002 	.word	0x00100002
 80043c8:	ffff0000 	.word	0xffff0000

080043cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	4603      	mov	r3, r0
 80043dc:	817b      	strh	r3, [r7, #10]
 80043de:	460b      	mov	r3, r1
 80043e0:	813b      	strh	r3, [r7, #8]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ea:	f7fe ff99 	bl	8003320 <HAL_GetTick>
 80043ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	f040 8244 	bne.w	8004886 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2319      	movs	r3, #25
 8004404:	2201      	movs	r2, #1
 8004406:	4982      	ldr	r1, [pc, #520]	; (8004610 <HAL_I2C_Mem_Read+0x244>)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fd15 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	e237      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_I2C_Mem_Read+0x5a>
 8004422:	2302      	movs	r3, #2
 8004424:	e230      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d007      	beq.n	800444c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2222      	movs	r2, #34	; 0x22
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a62      	ldr	r2, [pc, #392]	; (8004614 <HAL_I2C_Mem_Read+0x248>)
 800448c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800448e:	88f8      	ldrh	r0, [r7, #6]
 8004490:	893a      	ldrh	r2, [r7, #8]
 8004492:	8979      	ldrh	r1, [r7, #10]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4603      	mov	r3, r0
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fbe2 	bl	8004c68 <I2C_RequestMemoryRead>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e1ec      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d113      	bne.n	80044de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e1c0      	b.n	8004860 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d11e      	bne.n	8004524 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044f6:	b672      	cpsid	i
}
 80044f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004520:	b662      	cpsie	i
}
 8004522:	e035      	b.n	8004590 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b02      	cmp	r3, #2
 800452a:	d11e      	bne.n	800456a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800453c:	b672      	cpsid	i
}
 800453e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004566:	b662      	cpsie	i
}
 8004568:	e012      	b.n	8004590 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004590:	e166      	b.n	8004860 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	2b03      	cmp	r3, #3
 8004598:	f200 811f 	bhi.w	80047da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d123      	bne.n	80045ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fdef 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e167      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ea:	e139      	b.n	8004860 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d152      	bne.n	800469a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	2200      	movs	r2, #0
 80045fc:	4906      	ldr	r1, [pc, #24]	; (8004618 <HAL_I2C_Mem_Read+0x24c>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fc1a 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e13c      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
 800460e:	bf00      	nop
 8004610:	00100002 	.word	0x00100002
 8004614:	ffff0000 	.word	0xffff0000
 8004618:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800461c:	b672      	cpsid	i
}
 800461e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004662:	b662      	cpsie	i
}
 8004664:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004698:	e0e2      	b.n	8004860 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2200      	movs	r2, #0
 80046a2:	497b      	ldr	r1, [pc, #492]	; (8004890 <HAL_I2C_Mem_Read+0x4c4>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fbc7 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0e9      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
}
 80046c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046fa:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_I2C_Mem_Read+0x4c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	08db      	lsrs	r3, r3, #3
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <HAL_I2C_Mem_Read+0x4cc>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	0a1a      	lsrs	r2, r3, #8
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00da      	lsls	r2, r3, #3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	3b01      	subs	r3, #1
 8004718:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d118      	bne.n	8004752 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004742:	b662      	cpsie	i
}
 8004744:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e09a      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d1d9      	bne.n	8004714 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047a2:	b662      	cpsie	i
}
 80047a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d8:	e042      	b.n	8004860 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fcd4 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e04c      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d118      	bne.n	8004860 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	f47f ae94 	bne.w	8004592 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3728      	adds	r7, #40	; 0x28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	00010004 	.word	0x00010004
 8004894:	20000000 	.word	0x20000000
 8004898:	14f8b589 	.word	0x14f8b589

0800489c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	460b      	mov	r3, r1
 80048aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d006      	beq.n	80048c6 <I2C_MasterRequestWrite+0x2a>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d003      	beq.n	80048c6 <I2C_MasterRequestWrite+0x2a>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048c4:	d108      	bne.n	80048d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e00b      	b.n	80048f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	2b12      	cmp	r3, #18
 80048de:	d107      	bne.n	80048f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa9b 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	d103      	bne.n	8004920 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e035      	b.n	8004990 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492c:	d108      	bne.n	8004940 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800493c:	611a      	str	r2, [r3, #16]
 800493e:	e01b      	b.n	8004978 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004940:	897b      	ldrh	r3, [r7, #10]
 8004942:	11db      	asrs	r3, r3, #7
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f063 030f 	orn	r3, r3, #15
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	490e      	ldr	r1, [pc, #56]	; (8004998 <I2C_MasterRequestWrite+0xfc>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fae4 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e010      	b.n	8004990 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4907      	ldr	r1, [pc, #28]	; (800499c <I2C_MasterRequestWrite+0x100>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fad4 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	00010008 	.word	0x00010008
 800499c:	00010002 	.word	0x00010002

080049a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	460b      	mov	r3, r1
 80049ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d006      	beq.n	80049da <I2C_MasterRequestRead+0x3a>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d003      	beq.n	80049da <I2C_MasterRequestRead+0x3a>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d8:	d108      	bne.n	80049ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e00b      	b.n	8004a04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	2b11      	cmp	r3, #17
 80049f2:	d107      	bne.n	8004a04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fa11 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2a:	d103      	bne.n	8004a34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e079      	b.n	8004b2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a40:	d108      	bne.n	8004a54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]
 8004a52:	e05f      	b.n	8004b14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a54:	897b      	ldrh	r3, [r7, #10]
 8004a56:	11db      	asrs	r3, r3, #7
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0306 	and.w	r3, r3, #6
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f063 030f 	orn	r3, r3, #15
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4930      	ldr	r1, [pc, #192]	; (8004b34 <I2C_MasterRequestRead+0x194>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa5a 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e054      	b.n	8004b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4929      	ldr	r1, [pc, #164]	; (8004b38 <I2C_MasterRequestRead+0x198>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fa4a 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e044      	b.n	8004b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f9af 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	d103      	bne.n	8004af8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e017      	b.n	8004b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	11db      	asrs	r3, r3, #7
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0306 	and.w	r3, r3, #6
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f063 030e 	orn	r3, r3, #14
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4907      	ldr	r1, [pc, #28]	; (8004b38 <I2C_MasterRequestRead+0x198>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa06 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	00010008 	.word	0x00010008
 8004b38:	00010002 	.word	0x00010002

08004b3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	813b      	strh	r3, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f960 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8c:	d103      	bne.n	8004b96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e05f      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	492d      	ldr	r1, [pc, #180]	; (8004c64 <I2C_RequestMemoryWrite+0x128>)
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f9bb 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04c      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	6a39      	ldr	r1, [r7, #32]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa46 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d107      	bne.n	8004bfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e02b      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c08:	893b      	ldrh	r3, [r7, #8]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	611a      	str	r2, [r3, #16]
 8004c12:	e021      	b.n	8004c58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fa20 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d107      	bne.n	8004c4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e005      	b.n	8004c5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4e:	893b      	ldrh	r3, [r7, #8]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	00010002 	.word	0x00010002

08004c68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	813b      	strh	r3, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f8c2 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc8:	d103      	bne.n	8004cd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0aa      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	4952      	ldr	r1, [pc, #328]	; (8004e34 <I2C_RequestMemoryRead+0x1cc>)
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f91d 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e097      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	6a39      	ldr	r1, [r7, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f9a8 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d107      	bne.n	8004d3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e076      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	611a      	str	r2, [r3, #16]
 8004d4e:	e021      	b.n	8004d94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d50:	893b      	ldrh	r3, [r7, #8]
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d60:	6a39      	ldr	r1, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f982 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e050      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d8a:	893b      	ldrh	r3, [r7, #8]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d96:	6a39      	ldr	r1, [r7, #32]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f967 	bl	800506c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d107      	bne.n	8004dbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e035      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f82b 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d103      	bne.n	8004e00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e013      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e04:	897b      	ldrh	r3, [r7, #10]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	4906      	ldr	r1, [pc, #24]	; (8004e34 <I2C_RequestMemoryRead+0x1cc>)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f886 	bl	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	00010002 	.word	0x00010002

08004e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	e048      	b.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e50:	d044      	beq.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fe fa65 	bl	8003320 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d139      	bne.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10d      	bne.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	e00c      	b.n	8004ea8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	43da      	mvns	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d116      	bne.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e023      	b.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10d      	bne.n	8004f02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	e00c      	b.n	8004f1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d093      	beq.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3a:	e071      	b.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4a:	d123      	bne.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e067      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9a:	d041      	beq.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fe f9c0 	bl	8003320 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d136      	bne.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10c      	bne.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e00b      	b.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	43da      	mvns	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e021      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10c      	bne.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	43da      	mvns	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e00b      	b.n	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf14      	ite	ne
 8005056:	2301      	movne	r3, #1
 8005058:	2300      	moveq	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	f47f af6d 	bne.w	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005078:	e034      	b.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f8e3 	bl	8005246 <I2C_IsAcknowledgeFailed>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e034      	b.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005090:	d028      	beq.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fe f945 	bl	8003320 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11d      	bne.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d016      	beq.n	80050e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e007      	b.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d1c3      	bne.n	800507a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005108:	e034      	b.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f89b 	bl	8005246 <I2C_IsAcknowledgeFailed>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e034      	b.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005120:	d028      	beq.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fe f8fd 	bl	8003320 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11d      	bne.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b04      	cmp	r3, #4
 8005144:	d016      	beq.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e007      	b.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d1c3      	bne.n	800510a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005198:	e049      	b.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d119      	bne.n	80051dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0210 	mvn.w	r2, #16
 80051b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e030      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051dc:	f7fe f8a0 	bl	8003320 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11d      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d016      	beq.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e007      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d1ae      	bne.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525c:	d11b      	bne.n	8005296 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005266:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e272      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8087 	beq.w	80053d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c4:	4b92      	ldr	r3, [pc, #584]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 030c 	and.w	r3, r3, #12
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d00c      	beq.n	80052ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052d0:	4b8f      	ldr	r3, [pc, #572]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d112      	bne.n	8005302 <HAL_RCC_OscConfig+0x5e>
 80052dc:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d10b      	bne.n	8005302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ea:	4b89      	ldr	r3, [pc, #548]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d06c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x12c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d168      	bne.n	80053d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e24c      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x76>
 800530c:	4b80      	ldr	r3, [pc, #512]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7f      	ldr	r2, [pc, #508]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e02e      	b.n	8005378 <HAL_RCC_OscConfig+0xd4>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0x98>
 8005322:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a7a      	ldr	r2, [pc, #488]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4b78      	ldr	r3, [pc, #480]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a77      	ldr	r2, [pc, #476]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e01d      	b.n	8005378 <HAL_RCC_OscConfig+0xd4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0xbc>
 8005346:	4b72      	ldr	r3, [pc, #456]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a71      	ldr	r2, [pc, #452]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800534c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6e      	ldr	r2, [pc, #440]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0xd4>
 8005360:	4b6b      	ldr	r3, [pc, #428]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6a      	ldr	r2, [pc, #424]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b68      	ldr	r3, [pc, #416]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a67      	ldr	r2, [pc, #412]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd ffce 	bl	8003320 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7fd ffca 	bl	8003320 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	; 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e200      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b5d      	ldr	r3, [pc, #372]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0xe4>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd ffba 	bl	8003320 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd ffb6 	bl	8003320 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1ec      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	4b53      	ldr	r3, [pc, #332]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x10c>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d063      	beq.n	80054a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053de:	4b4c      	ldr	r3, [pc, #304]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053ea:	4b49      	ldr	r3, [pc, #292]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d11c      	bne.n	8005430 <HAL_RCC_OscConfig+0x18c>
 80053f6:	4b46      	ldr	r3, [pc, #280]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005402:	4b43      	ldr	r3, [pc, #268]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCC_OscConfig+0x176>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d001      	beq.n	800541a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e1c0      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4939      	ldr	r1, [pc, #228]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542e:	e03a      	b.n	80054a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005438:	4b36      	ldr	r3, [pc, #216]	; (8005514 <HAL_RCC_OscConfig+0x270>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fd ff6f 	bl	8003320 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005446:	f7fd ff6b 	bl	8003320 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e1a1      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4927      	ldr	r1, [pc, #156]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	600b      	str	r3, [r1, #0]
 8005478:	e015      	b.n	80054a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b26      	ldr	r3, [pc, #152]	; (8005514 <HAL_RCC_OscConfig+0x270>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fd ff4e 	bl	8003320 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005488:	f7fd ff4a 	bl	8003320 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e180      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03a      	beq.n	8005528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d019      	beq.n	80054ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <HAL_RCC_OscConfig+0x274>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c0:	f7fd ff2e 	bl	8003320 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c8:	f7fd ff2a 	bl	8003320 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e160      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <HAL_RCC_OscConfig+0x26c>)
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 faba 	bl	8005a60 <RCC_Delay>
 80054ec:	e01c      	b.n	8005528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <HAL_RCC_OscConfig+0x274>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fd ff14 	bl	8003320 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fa:	e00f      	b.n	800551c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fc:	f7fd ff10 	bl	8003320 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d908      	bls.n	800551c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e146      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000
 8005514:	42420000 	.word	0x42420000
 8005518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	4b92      	ldr	r3, [pc, #584]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e9      	bne.n	80054fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80a6 	beq.w	8005682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553a:	4b8b      	ldr	r3, [pc, #556]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	4b88      	ldr	r3, [pc, #544]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4a87      	ldr	r2, [pc, #540]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	61d3      	str	r3, [r2, #28]
 8005552:	4b85      	ldr	r3, [pc, #532]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005562:	4b82      	ldr	r3, [pc, #520]	; (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556e:	4b7f      	ldr	r3, [pc, #508]	; (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7e      	ldr	r2, [pc, #504]	; (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557a:	f7fd fed1 	bl	8003320 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005582:	f7fd fecd 	bl	8003320 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b64      	cmp	r3, #100	; 0x64
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e103      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b75      	ldr	r3, [pc, #468]	; (800576c <HAL_RCC_OscConfig+0x4c8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d106      	bne.n	80055b6 <HAL_RCC_OscConfig+0x312>
 80055a8:	4b6f      	ldr	r3, [pc, #444]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	4a6e      	ldr	r2, [pc, #440]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6213      	str	r3, [r2, #32]
 80055b4:	e02d      	b.n	8005612 <HAL_RCC_OscConfig+0x36e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x334>
 80055be:	4b6a      	ldr	r3, [pc, #424]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	4a69      	ldr	r2, [pc, #420]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	6213      	str	r3, [r2, #32]
 80055ca:	4b67      	ldr	r3, [pc, #412]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	4a66      	ldr	r2, [pc, #408]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	6213      	str	r3, [r2, #32]
 80055d6:	e01c      	b.n	8005612 <HAL_RCC_OscConfig+0x36e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b05      	cmp	r3, #5
 80055de:	d10c      	bne.n	80055fa <HAL_RCC_OscConfig+0x356>
 80055e0:	4b61      	ldr	r3, [pc, #388]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4a60      	ldr	r2, [pc, #384]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055e6:	f043 0304 	orr.w	r3, r3, #4
 80055ea:	6213      	str	r3, [r2, #32]
 80055ec:	4b5e      	ldr	r3, [pc, #376]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	4a5d      	ldr	r2, [pc, #372]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6213      	str	r3, [r2, #32]
 80055f8:	e00b      	b.n	8005612 <HAL_RCC_OscConfig+0x36e>
 80055fa:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4a5a      	ldr	r2, [pc, #360]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	6213      	str	r3, [r2, #32]
 8005606:	4b58      	ldr	r3, [pc, #352]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	4a57      	ldr	r2, [pc, #348]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800560c:	f023 0304 	bic.w	r3, r3, #4
 8005610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d015      	beq.n	8005646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561a:	f7fd fe81 	bl	8003320 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005620:	e00a      	b.n	8005638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fd fe7d 	bl	8003320 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e0b1      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005638:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ee      	beq.n	8005622 <HAL_RCC_OscConfig+0x37e>
 8005644:	e014      	b.n	8005670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005646:	f7fd fe6b 	bl	8003320 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564c:	e00a      	b.n	8005664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564e:	f7fd fe67 	bl	8003320 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e09b      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005664:	4b40      	ldr	r3, [pc, #256]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ee      	bne.n	800564e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d105      	bne.n	8005682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005676:	4b3c      	ldr	r3, [pc, #240]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005680:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8087 	beq.w	800579a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800568c:	4b36      	ldr	r3, [pc, #216]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 030c 	and.w	r3, r3, #12
 8005694:	2b08      	cmp	r3, #8
 8005696:	d061      	beq.n	800575c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d146      	bne.n	800572e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a0:	4b33      	ldr	r3, [pc, #204]	; (8005770 <HAL_RCC_OscConfig+0x4cc>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a6:	f7fd fe3b 	bl	8003320 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fd fe37 	bl	8003320 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e06d      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c0:	4b29      	ldr	r3, [pc, #164]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d108      	bne.n	80056e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056d6:	4b24      	ldr	r3, [pc, #144]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4921      	ldr	r1, [pc, #132]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e8:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a19      	ldr	r1, [r3, #32]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	430b      	orrs	r3, r1
 80056fa:	491b      	ldr	r1, [pc, #108]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <HAL_RCC_OscConfig+0x4cc>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005706:	f7fd fe0b 	bl	8003320 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570e:	f7fd fe07 	bl	8003320 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e03d      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x46a>
 800572c:	e035      	b.n	800579a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <HAL_RCC_OscConfig+0x4cc>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fd fdf4 	bl	8003320 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fd fdf0 	bl	8003320 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e026      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <HAL_RCC_OscConfig+0x4c4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x498>
 800575a:	e01e      	b.n	800579a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e019      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
 8005768:	40021000 	.word	0x40021000
 800576c:	40007000 	.word	0x40007000
 8005770:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCC_OscConfig+0x500>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	429a      	cmp	r2, r3
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d001      	beq.n	800579a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40021000 	.word	0x40021000

080057a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0d0      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057bc:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d910      	bls.n	80057ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ca:	4b67      	ldr	r3, [pc, #412]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f023 0207 	bic.w	r2, r3, #7
 80057d2:	4965      	ldr	r1, [pc, #404]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b63      	ldr	r3, [pc, #396]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0b8      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005804:	4b59      	ldr	r3, [pc, #356]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a58      	ldr	r2, [pc, #352]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800580e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800581c:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4a52      	ldr	r2, [pc, #328]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005826:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b50      	ldr	r3, [pc, #320]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	494d      	ldr	r1, [pc, #308]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d040      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d115      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e07f      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005866:	4b41      	ldr	r3, [pc, #260]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e073      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005876:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e06b      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005886:	4b39      	ldr	r3, [pc, #228]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f023 0203 	bic.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4936      	ldr	r1, [pc, #216]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005898:	f7fd fd42 	bl	8003320 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a0:	f7fd fd3e 	bl	8003320 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e053      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b6:	4b2d      	ldr	r3, [pc, #180]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 020c 	and.w	r2, r3, #12
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d1eb      	bne.n	80058a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058c8:	4b27      	ldr	r3, [pc, #156]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d210      	bcs.n	80058f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 0207 	bic.w	r2, r3, #7
 80058de:	4922      	ldr	r1, [pc, #136]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_RCC_ClockConfig+0x1c0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e032      	b.n	800595e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4916      	ldr	r1, [pc, #88]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	490e      	ldr	r1, [pc, #56]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005936:	f000 f821 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800593a:	4602      	mov	r2, r0
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	490a      	ldr	r1, [pc, #40]	; (8005970 <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	5ccb      	ldrb	r3, [r1, r3]
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1cc>)
 8005950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_ClockConfig+0x1d0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fd fca0 	bl	800329c <HAL_InitTick>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40022000 	.word	0x40022000
 800596c:	40021000 	.word	0x40021000
 8005970:	08008668 	.word	0x08008668
 8005974:	20000000 	.word	0x20000000
 8005978:	20000004 	.word	0x20000004

0800597c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x94>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d002      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x30>
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x36>
 80059aa:	e027      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80059ae:	613b      	str	r3, [r7, #16]
      break;
 80059b0:	e027      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	0c9b      	lsrs	r3, r3, #18
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059bc:	5cd3      	ldrb	r3, [r2, r3]
 80059be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x94>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	0c5b      	lsrs	r3, r3, #17
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	4a11      	ldr	r2, [pc, #68]	; (8005a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80059d6:	5cd3      	ldrb	r3, [r2, r3]
 80059d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a0d      	ldr	r2, [pc, #52]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80059de:	fb03 f202 	mul.w	r2, r3, r2
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e004      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <HAL_RCC_GetSysClockFreq+0xa4>)
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	613b      	str	r3, [r7, #16]
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80059fe:	613b      	str	r3, [r7, #16]
      break;
 8005a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a02:	693b      	ldr	r3, [r7, #16]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000
 8005a14:	007a1200 	.word	0x007a1200
 8005a18:	08008680 	.word	0x08008680
 8005a1c:	08008690 	.word	0x08008690
 8005a20:	003d0900 	.word	0x003d0900

08005a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a28:	4b02      	ldr	r3, [pc, #8]	; (8005a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	20000000 	.word	0x20000000

08005a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a3c:	f7ff fff2 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	4903      	ldr	r1, [pc, #12]	; (8005a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	08008678 	.word	0x08008678

08005a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <RCC_Delay+0x34>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <RCC_Delay+0x38>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	0a5b      	lsrs	r3, r3, #9
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a7c:	bf00      	nop
  }
  while (Delay --);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	60fa      	str	r2, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f9      	bne.n	8005a7c <RCC_Delay+0x1c>
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000000 	.word	0x20000000
 8005a98:	10624dd3 	.word	0x10624dd3

08005a9c <__errno>:
 8005a9c:	4b01      	ldr	r3, [pc, #4]	; (8005aa4 <__errno+0x8>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	2600      	movs	r6, #0
 8005aac:	4d0c      	ldr	r5, [pc, #48]	; (8005ae0 <__libc_init_array+0x38>)
 8005aae:	4c0d      	ldr	r4, [pc, #52]	; (8005ae4 <__libc_init_array+0x3c>)
 8005ab0:	1b64      	subs	r4, r4, r5
 8005ab2:	10a4      	asrs	r4, r4, #2
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	f002 fd46 	bl	8008548 <_init>
 8005abc:	2600      	movs	r6, #0
 8005abe:	4d0a      	ldr	r5, [pc, #40]	; (8005ae8 <__libc_init_array+0x40>)
 8005ac0:	4c0a      	ldr	r4, [pc, #40]	; (8005aec <__libc_init_array+0x44>)
 8005ac2:	1b64      	subs	r4, r4, r5
 8005ac4:	10a4      	asrs	r4, r4, #2
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	08008a6c 	.word	0x08008a6c
 8005ae4:	08008a6c 	.word	0x08008a6c
 8005ae8:	08008a6c 	.word	0x08008a6c
 8005aec:	08008a70 	.word	0x08008a70

08005af0 <memset>:
 8005af0:	4603      	mov	r3, r0
 8005af2:	4402      	add	r2, r0
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d100      	bne.n	8005afa <memset+0xa>
 8005af8:	4770      	bx	lr
 8005afa:	f803 1b01 	strb.w	r1, [r3], #1
 8005afe:	e7f9      	b.n	8005af4 <memset+0x4>

08005b00 <__cvt>:
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b06:	461f      	mov	r7, r3
 8005b08:	bfbb      	ittet	lt
 8005b0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	461f      	movlt	r7, r3
 8005b10:	2300      	movge	r3, #0
 8005b12:	232d      	movlt	r3, #45	; 0x2d
 8005b14:	b088      	sub	sp, #32
 8005b16:	4614      	mov	r4, r2
 8005b18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b1c:	7013      	strb	r3, [r2, #0]
 8005b1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b20:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b24:	f023 0820 	bic.w	r8, r3, #32
 8005b28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b2c:	d005      	beq.n	8005b3a <__cvt+0x3a>
 8005b2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b32:	d100      	bne.n	8005b36 <__cvt+0x36>
 8005b34:	3501      	adds	r5, #1
 8005b36:	2302      	movs	r3, #2
 8005b38:	e000      	b.n	8005b3c <__cvt+0x3c>
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	aa07      	add	r2, sp, #28
 8005b3e:	9204      	str	r2, [sp, #16]
 8005b40:	aa06      	add	r2, sp, #24
 8005b42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b46:	e9cd 3500 	strd	r3, r5, [sp]
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	f000 fcdb 	bl	8006508 <_dtoa_r>
 8005b52:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b56:	4606      	mov	r6, r0
 8005b58:	d102      	bne.n	8005b60 <__cvt+0x60>
 8005b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b5c:	07db      	lsls	r3, r3, #31
 8005b5e:	d522      	bpl.n	8005ba6 <__cvt+0xa6>
 8005b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b64:	eb06 0905 	add.w	r9, r6, r5
 8005b68:	d110      	bne.n	8005b8c <__cvt+0x8c>
 8005b6a:	7833      	ldrb	r3, [r6, #0]
 8005b6c:	2b30      	cmp	r3, #48	; 0x30
 8005b6e:	d10a      	bne.n	8005b86 <__cvt+0x86>
 8005b70:	2200      	movs	r2, #0
 8005b72:	2300      	movs	r3, #0
 8005b74:	4620      	mov	r0, r4
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8005b7c:	b918      	cbnz	r0, 8005b86 <__cvt+0x86>
 8005b7e:	f1c5 0501 	rsb	r5, r5, #1
 8005b82:	f8ca 5000 	str.w	r5, [sl]
 8005b86:	f8da 3000 	ldr.w	r3, [sl]
 8005b8a:	4499      	add	r9, r3
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4620      	mov	r0, r4
 8005b92:	4639      	mov	r1, r7
 8005b94:	f7fa ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8005b98:	b108      	cbz	r0, 8005b9e <__cvt+0x9e>
 8005b9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b9e:	2230      	movs	r2, #48	; 0x30
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	454b      	cmp	r3, r9
 8005ba4:	d307      	bcc.n	8005bb6 <__cvt+0xb6>
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bac:	1b9b      	subs	r3, r3, r6
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	b008      	add	sp, #32
 8005bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	9107      	str	r1, [sp, #28]
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e7f0      	b.n	8005ba0 <__cvt+0xa0>

08005bbe <__exponent>:
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	f803 2b02 	strb.w	r2, [r3], #2
 8005bc8:	bfb6      	itet	lt
 8005bca:	222d      	movlt	r2, #45	; 0x2d
 8005bcc:	222b      	movge	r2, #43	; 0x2b
 8005bce:	4249      	neglt	r1, r1
 8005bd0:	2909      	cmp	r1, #9
 8005bd2:	7042      	strb	r2, [r0, #1]
 8005bd4:	dd2b      	ble.n	8005c2e <__exponent+0x70>
 8005bd6:	f10d 0407 	add.w	r4, sp, #7
 8005bda:	46a4      	mov	ip, r4
 8005bdc:	270a      	movs	r7, #10
 8005bde:	fb91 f6f7 	sdiv	r6, r1, r7
 8005be2:	460a      	mov	r2, r1
 8005be4:	46a6      	mov	lr, r4
 8005be6:	fb07 1516 	mls	r5, r7, r6, r1
 8005bea:	2a63      	cmp	r2, #99	; 0x63
 8005bec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005bf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bfa:	dcf0      	bgt.n	8005bde <__exponent+0x20>
 8005bfc:	3130      	adds	r1, #48	; 0x30
 8005bfe:	f1ae 0502 	sub.w	r5, lr, #2
 8005c02:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c06:	4629      	mov	r1, r5
 8005c08:	1c44      	adds	r4, r0, #1
 8005c0a:	4561      	cmp	r1, ip
 8005c0c:	d30a      	bcc.n	8005c24 <__exponent+0x66>
 8005c0e:	f10d 0209 	add.w	r2, sp, #9
 8005c12:	eba2 020e 	sub.w	r2, r2, lr
 8005c16:	4565      	cmp	r5, ip
 8005c18:	bf88      	it	hi
 8005c1a:	2200      	movhi	r2, #0
 8005c1c:	4413      	add	r3, r2
 8005c1e:	1a18      	subs	r0, r3, r0
 8005c20:	b003      	add	sp, #12
 8005c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c28:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c2c:	e7ed      	b.n	8005c0a <__exponent+0x4c>
 8005c2e:	2330      	movs	r3, #48	; 0x30
 8005c30:	3130      	adds	r1, #48	; 0x30
 8005c32:	7083      	strb	r3, [r0, #2]
 8005c34:	70c1      	strb	r1, [r0, #3]
 8005c36:	1d03      	adds	r3, r0, #4
 8005c38:	e7f1      	b.n	8005c1e <__exponent+0x60>
	...

08005c3c <_printf_float>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	b091      	sub	sp, #68	; 0x44
 8005c42:	460c      	mov	r4, r1
 8005c44:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c48:	4616      	mov	r6, r2
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	f001 fb3f 	bl	80072d0 <_localeconv_r>
 8005c52:	6803      	ldr	r3, [r0, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	9309      	str	r3, [sp, #36]	; 0x24
 8005c58:	f7fa fa7a 	bl	8000150 <strlen>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8005c60:	f8d8 3000 	ldr.w	r3, [r8]
 8005c64:	900a      	str	r0, [sp, #40]	; 0x28
 8005c66:	3307      	adds	r3, #7
 8005c68:	f023 0307 	bic.w	r3, r3, #7
 8005c6c:	f103 0208 	add.w	r2, r3, #8
 8005c70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c74:	f8d4 b000 	ldr.w	fp, [r4]
 8005c78:	f8c8 2000 	str.w	r2, [r8]
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c84:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c88:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c92:	4640      	mov	r0, r8
 8005c94:	4b9c      	ldr	r3, [pc, #624]	; (8005f08 <_printf_float+0x2cc>)
 8005c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c98:	f7fa feb8 	bl	8000a0c <__aeabi_dcmpun>
 8005c9c:	bb70      	cbnz	r0, 8005cfc <_printf_float+0xc0>
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4b98      	ldr	r3, [pc, #608]	; (8005f08 <_printf_float+0x2cc>)
 8005ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca8:	f7fa fe92 	bl	80009d0 <__aeabi_dcmple>
 8005cac:	bb30      	cbnz	r0, 8005cfc <_printf_float+0xc0>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	f7fa fe81 	bl	80009bc <__aeabi_dcmplt>
 8005cba:	b110      	cbz	r0, 8005cc2 <_printf_float+0x86>
 8005cbc:	232d      	movs	r3, #45	; 0x2d
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc2:	4b92      	ldr	r3, [pc, #584]	; (8005f0c <_printf_float+0x2d0>)
 8005cc4:	4892      	ldr	r0, [pc, #584]	; (8005f10 <_printf_float+0x2d4>)
 8005cc6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cca:	bf94      	ite	ls
 8005ccc:	4698      	movls	r8, r3
 8005cce:	4680      	movhi	r8, r0
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	f04f 0a00 	mov.w	sl, #0
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	f02b 0304 	bic.w	r3, fp, #4
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	4633      	mov	r3, r6
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	9700      	str	r7, [sp, #0]
 8005ce6:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ce8:	f000 f9d4 	bl	8006094 <_printf_common>
 8005cec:	3001      	adds	r0, #1
 8005cee:	f040 8090 	bne.w	8005e12 <_printf_float+0x1d6>
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf6:	b011      	add	sp, #68	; 0x44
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	4653      	mov	r3, sl
 8005d00:	4640      	mov	r0, r8
 8005d02:	4651      	mov	r1, sl
 8005d04:	f7fa fe82 	bl	8000a0c <__aeabi_dcmpun>
 8005d08:	b148      	cbz	r0, 8005d1e <_printf_float+0xe2>
 8005d0a:	f1ba 0f00 	cmp.w	sl, #0
 8005d0e:	bfb8      	it	lt
 8005d10:	232d      	movlt	r3, #45	; 0x2d
 8005d12:	4880      	ldr	r0, [pc, #512]	; (8005f14 <_printf_float+0x2d8>)
 8005d14:	bfb8      	it	lt
 8005d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d1a:	4b7f      	ldr	r3, [pc, #508]	; (8005f18 <_printf_float+0x2dc>)
 8005d1c:	e7d3      	b.n	8005cc6 <_printf_float+0x8a>
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	d142      	bne.n	8005dae <_printf_float+0x172>
 8005d28:	2306      	movs	r3, #6
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	9206      	str	r2, [sp, #24]
 8005d30:	aa0e      	add	r2, sp, #56	; 0x38
 8005d32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d36:	aa0d      	add	r2, sp, #52	; 0x34
 8005d38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d3c:	9203      	str	r2, [sp, #12]
 8005d3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4653      	mov	r3, sl
 8005d52:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d54:	f7ff fed4 	bl	8005b00 <__cvt>
 8005d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	2947      	cmp	r1, #71	; 0x47
 8005d5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d60:	d108      	bne.n	8005d74 <_printf_float+0x138>
 8005d62:	1cc8      	adds	r0, r1, #3
 8005d64:	db02      	blt.n	8005d6c <_printf_float+0x130>
 8005d66:	6863      	ldr	r3, [r4, #4]
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	dd40      	ble.n	8005dee <_printf_float+0x1b2>
 8005d6c:	f1a9 0902 	sub.w	r9, r9, #2
 8005d70:	fa5f f989 	uxtb.w	r9, r9
 8005d74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d78:	d81f      	bhi.n	8005dba <_printf_float+0x17e>
 8005d7a:	464a      	mov	r2, r9
 8005d7c:	3901      	subs	r1, #1
 8005d7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d82:	910d      	str	r1, [sp, #52]	; 0x34
 8005d84:	f7ff ff1b 	bl	8005bbe <__exponent>
 8005d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	1813      	adds	r3, r2, r0
 8005d8e:	2a01      	cmp	r2, #1
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	dc02      	bgt.n	8005d9a <_printf_float+0x15e>
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	07d2      	lsls	r2, r2, #31
 8005d98:	d501      	bpl.n	8005d9e <_printf_float+0x162>
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d09b      	beq.n	8005cde <_printf_float+0xa2>
 8005da6:	232d      	movs	r3, #45	; 0x2d
 8005da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dac:	e797      	b.n	8005cde <_printf_float+0xa2>
 8005dae:	2947      	cmp	r1, #71	; 0x47
 8005db0:	d1bc      	bne.n	8005d2c <_printf_float+0xf0>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ba      	bne.n	8005d2c <_printf_float+0xf0>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e7b7      	b.n	8005d2a <_printf_float+0xee>
 8005dba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005dbe:	d118      	bne.n	8005df2 <_printf_float+0x1b6>
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	dd0b      	ble.n	8005dde <_printf_float+0x1a2>
 8005dc6:	6121      	str	r1, [r4, #16]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <_printf_float+0x194>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	07d0      	lsls	r0, r2, #31
 8005dce:	d502      	bpl.n	8005dd6 <_printf_float+0x19a>
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	440b      	add	r3, r1
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	f04f 0a00 	mov.w	sl, #0
 8005dda:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ddc:	e7df      	b.n	8005d9e <_printf_float+0x162>
 8005dde:	b913      	cbnz	r3, 8005de6 <_printf_float+0x1aa>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	07d2      	lsls	r2, r2, #31
 8005de4:	d501      	bpl.n	8005dea <_printf_float+0x1ae>
 8005de6:	3302      	adds	r3, #2
 8005de8:	e7f4      	b.n	8005dd4 <_printf_float+0x198>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7f2      	b.n	8005dd4 <_printf_float+0x198>
 8005dee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df4:	4299      	cmp	r1, r3
 8005df6:	db05      	blt.n	8005e04 <_printf_float+0x1c8>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	6121      	str	r1, [r4, #16]
 8005dfc:	07d8      	lsls	r0, r3, #31
 8005dfe:	d5ea      	bpl.n	8005dd6 <_printf_float+0x19a>
 8005e00:	1c4b      	adds	r3, r1, #1
 8005e02:	e7e7      	b.n	8005dd4 <_printf_float+0x198>
 8005e04:	2900      	cmp	r1, #0
 8005e06:	bfcc      	ite	gt
 8005e08:	2201      	movgt	r2, #1
 8005e0a:	f1c1 0202 	rsble	r2, r1, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	e7e0      	b.n	8005dd4 <_printf_float+0x198>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	055a      	lsls	r2, r3, #21
 8005e16:	d407      	bmi.n	8005e28 <_printf_float+0x1ec>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	d12b      	bne.n	8005e7e <_printf_float+0x242>
 8005e26:	e764      	b.n	8005cf2 <_printf_float+0xb6>
 8005e28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e2c:	f240 80dd 	bls.w	8005fea <_printf_float+0x3ae>
 8005e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e34:	2200      	movs	r2, #0
 8005e36:	2300      	movs	r3, #0
 8005e38:	f7fa fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d033      	beq.n	8005ea8 <_printf_float+0x26c>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <_printf_float+0x2e0>)
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af51 	beq.w	8005cf2 <_printf_float+0xb6>
 8005e50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e54:	429a      	cmp	r2, r3
 8005e56:	db02      	blt.n	8005e5e <_printf_float+0x222>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	07d8      	lsls	r0, r3, #31
 8005e5c:	d50f      	bpl.n	8005e7e <_printf_float+0x242>
 8005e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f af42 	beq.w	8005cf2 <_printf_float+0xb6>
 8005e6e:	f04f 0800 	mov.w	r8, #0
 8005e72:	f104 091a 	add.w	r9, r4, #26
 8005e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	4543      	cmp	r3, r8
 8005e7c:	dc09      	bgt.n	8005e92 <_printf_float+0x256>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	079b      	lsls	r3, r3, #30
 8005e82:	f100 8102 	bmi.w	800608a <_printf_float+0x44e>
 8005e86:	68e0      	ldr	r0, [r4, #12]
 8005e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8a:	4298      	cmp	r0, r3
 8005e8c:	bfb8      	it	lt
 8005e8e:	4618      	movlt	r0, r3
 8005e90:	e731      	b.n	8005cf6 <_printf_float+0xba>
 8005e92:	2301      	movs	r3, #1
 8005e94:	464a      	mov	r2, r9
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	f43f af28 	beq.w	8005cf2 <_printf_float+0xb6>
 8005ea2:	f108 0801 	add.w	r8, r8, #1
 8005ea6:	e7e6      	b.n	8005e76 <_printf_float+0x23a>
 8005ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dc38      	bgt.n	8005f20 <_printf_float+0x2e4>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <_printf_float+0x2e0>)
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f af1a 	beq.w	8005cf2 <_printf_float+0xb6>
 8005ebe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d102      	bne.n	8005ecc <_printf_float+0x290>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07d9      	lsls	r1, r3, #31
 8005eca:	d5d8      	bpl.n	8005e7e <_printf_float+0x242>
 8005ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af0b 	beq.w	8005cf2 <_printf_float+0xb6>
 8005edc:	f04f 0900 	mov.w	r9, #0
 8005ee0:	f104 0a1a 	add.w	sl, r4, #26
 8005ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee6:	425b      	negs	r3, r3
 8005ee8:	454b      	cmp	r3, r9
 8005eea:	dc01      	bgt.n	8005ef0 <_printf_float+0x2b4>
 8005eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eee:	e794      	b.n	8005e1a <_printf_float+0x1de>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4652      	mov	r2, sl
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f aef9 	beq.w	8005cf2 <_printf_float+0xb6>
 8005f00:	f109 0901 	add.w	r9, r9, #1
 8005f04:	e7ee      	b.n	8005ee4 <_printf_float+0x2a8>
 8005f06:	bf00      	nop
 8005f08:	7fefffff 	.word	0x7fefffff
 8005f0c:	08008698 	.word	0x08008698
 8005f10:	0800869c 	.word	0x0800869c
 8005f14:	080086a4 	.word	0x080086a4
 8005f18:	080086a0 	.word	0x080086a0
 8005f1c:	080086a8 	.word	0x080086a8
 8005f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f24:	429a      	cmp	r2, r3
 8005f26:	bfa8      	it	ge
 8005f28:	461a      	movge	r2, r3
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	4691      	mov	r9, r2
 8005f2e:	dc37      	bgt.n	8005fa0 <_printf_float+0x364>
 8005f30:	f04f 0b00 	mov.w	fp, #0
 8005f34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f38:	f104 021a 	add.w	r2, r4, #26
 8005f3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f40:	ebaa 0309 	sub.w	r3, sl, r9
 8005f44:	455b      	cmp	r3, fp
 8005f46:	dc33      	bgt.n	8005fb0 <_printf_float+0x374>
 8005f48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	db3b      	blt.n	8005fc8 <_printf_float+0x38c>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	07da      	lsls	r2, r3, #31
 8005f54:	d438      	bmi.n	8005fc8 <_printf_float+0x38c>
 8005f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f5a:	eba3 020a 	sub.w	r2, r3, sl
 8005f5e:	eba3 0901 	sub.w	r9, r3, r1
 8005f62:	4591      	cmp	r9, r2
 8005f64:	bfa8      	it	ge
 8005f66:	4691      	movge	r9, r2
 8005f68:	f1b9 0f00 	cmp.w	r9, #0
 8005f6c:	dc34      	bgt.n	8005fd8 <_printf_float+0x39c>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f76:	f104 0a1a 	add.w	sl, r4, #26
 8005f7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	eba3 0309 	sub.w	r3, r3, r9
 8005f84:	4543      	cmp	r3, r8
 8005f86:	f77f af7a 	ble.w	8005e7e <_printf_float+0x242>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	f43f aeac 	beq.w	8005cf2 <_printf_float+0xb6>
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	e7ec      	b.n	8005f7a <_printf_float+0x33e>
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	d1c0      	bne.n	8005f30 <_printf_float+0x2f4>
 8005fae:	e6a0      	b.n	8005cf2 <_printf_float+0xb6>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f ae99 	beq.w	8005cf2 <_printf_float+0xb6>
 8005fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fc2:	f10b 0b01 	add.w	fp, fp, #1
 8005fc6:	e7b9      	b.n	8005f3c <_printf_float+0x300>
 8005fc8:	4631      	mov	r1, r6
 8005fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d1bf      	bne.n	8005f56 <_printf_float+0x31a>
 8005fd6:	e68c      	b.n	8005cf2 <_printf_float+0xb6>
 8005fd8:	464b      	mov	r3, r9
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	eb08 020a 	add.w	r2, r8, sl
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1c2      	bne.n	8005f6e <_printf_float+0x332>
 8005fe8:	e683      	b.n	8005cf2 <_printf_float+0xb6>
 8005fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fec:	2a01      	cmp	r2, #1
 8005fee:	dc01      	bgt.n	8005ff4 <_printf_float+0x3b8>
 8005ff0:	07db      	lsls	r3, r3, #31
 8005ff2:	d537      	bpl.n	8006064 <_printf_float+0x428>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f ae77 	beq.w	8005cf2 <_printf_float+0xb6>
 8006004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f ae6f 	beq.w	8005cf2 <_printf_float+0xb6>
 8006014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006018:	2200      	movs	r2, #0
 800601a:	2300      	movs	r3, #0
 800601c:	f7fa fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8006020:	b9d8      	cbnz	r0, 800605a <_printf_float+0x41e>
 8006022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006024:	f108 0201 	add.w	r2, r8, #1
 8006028:	3b01      	subs	r3, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	d10e      	bne.n	8006052 <_printf_float+0x416>
 8006034:	e65d      	b.n	8005cf2 <_printf_float+0xb6>
 8006036:	2301      	movs	r3, #1
 8006038:	464a      	mov	r2, r9
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f ae56 	beq.w	8005cf2 <_printf_float+0xb6>
 8006046:	f108 0801 	add.w	r8, r8, #1
 800604a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800604c:	3b01      	subs	r3, #1
 800604e:	4543      	cmp	r3, r8
 8006050:	dcf1      	bgt.n	8006036 <_printf_float+0x3fa>
 8006052:	4653      	mov	r3, sl
 8006054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006058:	e6e0      	b.n	8005e1c <_printf_float+0x1e0>
 800605a:	f04f 0800 	mov.w	r8, #0
 800605e:	f104 091a 	add.w	r9, r4, #26
 8006062:	e7f2      	b.n	800604a <_printf_float+0x40e>
 8006064:	2301      	movs	r3, #1
 8006066:	4642      	mov	r2, r8
 8006068:	e7df      	b.n	800602a <_printf_float+0x3ee>
 800606a:	2301      	movs	r3, #1
 800606c:	464a      	mov	r2, r9
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	f43f ae3c 	beq.w	8005cf2 <_printf_float+0xb6>
 800607a:	f108 0801 	add.w	r8, r8, #1
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006082:	1a5b      	subs	r3, r3, r1
 8006084:	4543      	cmp	r3, r8
 8006086:	dcf0      	bgt.n	800606a <_printf_float+0x42e>
 8006088:	e6fd      	b.n	8005e86 <_printf_float+0x24a>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	f104 0919 	add.w	r9, r4, #25
 8006092:	e7f4      	b.n	800607e <_printf_float+0x442>

08006094 <_printf_common>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4616      	mov	r6, r2
 800609a:	4699      	mov	r9, r3
 800609c:	688a      	ldr	r2, [r1, #8]
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	4607      	mov	r7, r0
 80060a2:	4293      	cmp	r3, r2
 80060a4:	bfb8      	it	lt
 80060a6:	4613      	movlt	r3, r2
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060ae:	460c      	mov	r4, r1
 80060b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b4:	b10a      	cbz	r2, 80060ba <_printf_common+0x26>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	bf42      	ittt	mi
 80060c0:	6833      	ldrmi	r3, [r6, #0]
 80060c2:	3302      	addmi	r3, #2
 80060c4:	6033      	strmi	r3, [r6, #0]
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	f015 0506 	ands.w	r5, r5, #6
 80060cc:	d106      	bne.n	80060dc <_printf_common+0x48>
 80060ce:	f104 0a19 	add.w	sl, r4, #25
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dc28      	bgt.n	800612e <_printf_common+0x9a>
 80060dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e0:	1e13      	subs	r3, r2, #0
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	0692      	lsls	r2, r2, #26
 80060ea:	d42d      	bmi.n	8006148 <_printf_common+0xb4>
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d020      	beq.n	800613c <_printf_common+0xa8>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	68e5      	ldr	r5, [r4, #12]
 80060fe:	f003 0306 	and.w	r3, r3, #6
 8006102:	2b04      	cmp	r3, #4
 8006104:	bf18      	it	ne
 8006106:	2500      	movne	r5, #0
 8006108:	6832      	ldr	r2, [r6, #0]
 800610a:	f04f 0600 	mov.w	r6, #0
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	bf08      	it	eq
 8006112:	1aad      	subeq	r5, r5, r2
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	bf08      	it	eq
 8006118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800611c:	4293      	cmp	r3, r2
 800611e:	bfc4      	itt	gt
 8006120:	1a9b      	subgt	r3, r3, r2
 8006122:	18ed      	addgt	r5, r5, r3
 8006124:	341a      	adds	r4, #26
 8006126:	42b5      	cmp	r5, r6
 8006128:	d11a      	bne.n	8006160 <_printf_common+0xcc>
 800612a:	2000      	movs	r0, #0
 800612c:	e008      	b.n	8006140 <_printf_common+0xac>
 800612e:	2301      	movs	r3, #1
 8006130:	4652      	mov	r2, sl
 8006132:	4649      	mov	r1, r9
 8006134:	4638      	mov	r0, r7
 8006136:	47c0      	blx	r8
 8006138:	3001      	adds	r0, #1
 800613a:	d103      	bne.n	8006144 <_printf_common+0xb0>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	3501      	adds	r5, #1
 8006146:	e7c4      	b.n	80060d2 <_printf_common+0x3e>
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	18e1      	adds	r1, r4, r3
 800614c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006156:	4422      	add	r2, r4
 8006158:	3302      	adds	r3, #2
 800615a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800615e:	e7c5      	b.n	80060ec <_printf_common+0x58>
 8006160:	2301      	movs	r3, #1
 8006162:	4622      	mov	r2, r4
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d0e6      	beq.n	800613c <_printf_common+0xa8>
 800616e:	3601      	adds	r6, #1
 8006170:	e7d9      	b.n	8006126 <_printf_common+0x92>
	...

08006174 <_printf_i>:
 8006174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	7e0f      	ldrb	r7, [r1, #24]
 800617a:	4691      	mov	r9, r2
 800617c:	2f78      	cmp	r7, #120	; 0x78
 800617e:	4680      	mov	r8, r0
 8006180:	460c      	mov	r4, r1
 8006182:	469a      	mov	sl, r3
 8006184:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800618a:	d807      	bhi.n	800619c <_printf_i+0x28>
 800618c:	2f62      	cmp	r7, #98	; 0x62
 800618e:	d80a      	bhi.n	80061a6 <_printf_i+0x32>
 8006190:	2f00      	cmp	r7, #0
 8006192:	f000 80d9 	beq.w	8006348 <_printf_i+0x1d4>
 8006196:	2f58      	cmp	r7, #88	; 0x58
 8006198:	f000 80a4 	beq.w	80062e4 <_printf_i+0x170>
 800619c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a4:	e03a      	b.n	800621c <_printf_i+0xa8>
 80061a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061aa:	2b15      	cmp	r3, #21
 80061ac:	d8f6      	bhi.n	800619c <_printf_i+0x28>
 80061ae:	a101      	add	r1, pc, #4	; (adr r1, 80061b4 <_printf_i+0x40>)
 80061b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	08006221 	.word	0x08006221
 80061bc:	0800619d 	.word	0x0800619d
 80061c0:	0800619d 	.word	0x0800619d
 80061c4:	0800619d 	.word	0x0800619d
 80061c8:	0800619d 	.word	0x0800619d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800619d 	.word	0x0800619d
 80061d4:	0800619d 	.word	0x0800619d
 80061d8:	0800619d 	.word	0x0800619d
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	0800632f 	.word	0x0800632f
 80061e4:	08006251 	.word	0x08006251
 80061e8:	08006311 	.word	0x08006311
 80061ec:	0800619d 	.word	0x0800619d
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	08006351 	.word	0x08006351
 80061f8:	0800619d 	.word	0x0800619d
 80061fc:	08006251 	.word	0x08006251
 8006200:	0800619d 	.word	0x0800619d
 8006204:	0800619d 	.word	0x0800619d
 8006208:	08006319 	.word	0x08006319
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	602a      	str	r2, [r5, #0]
 8006214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800621c:	2301      	movs	r3, #1
 800621e:	e0a4      	b.n	800636a <_printf_i+0x1f6>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	6829      	ldr	r1, [r5, #0]
 8006224:	0606      	lsls	r6, r0, #24
 8006226:	f101 0304 	add.w	r3, r1, #4
 800622a:	d50a      	bpl.n	8006242 <_printf_i+0xce>
 800622c:	680e      	ldr	r6, [r1, #0]
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	2e00      	cmp	r6, #0
 8006232:	da03      	bge.n	800623c <_printf_i+0xc8>
 8006234:	232d      	movs	r3, #45	; 0x2d
 8006236:	4276      	negs	r6, r6
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623c:	230a      	movs	r3, #10
 800623e:	485e      	ldr	r0, [pc, #376]	; (80063b8 <_printf_i+0x244>)
 8006240:	e019      	b.n	8006276 <_printf_i+0x102>
 8006242:	680e      	ldr	r6, [r1, #0]
 8006244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	bf18      	it	ne
 800624c:	b236      	sxthne	r6, r6
 800624e:	e7ef      	b.n	8006230 <_printf_i+0xbc>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	6820      	ldr	r0, [r4, #0]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	6029      	str	r1, [r5, #0]
 8006258:	0601      	lsls	r1, r0, #24
 800625a:	d501      	bpl.n	8006260 <_printf_i+0xec>
 800625c:	681e      	ldr	r6, [r3, #0]
 800625e:	e002      	b.n	8006266 <_printf_i+0xf2>
 8006260:	0646      	lsls	r6, r0, #25
 8006262:	d5fb      	bpl.n	800625c <_printf_i+0xe8>
 8006264:	881e      	ldrh	r6, [r3, #0]
 8006266:	2f6f      	cmp	r7, #111	; 0x6f
 8006268:	bf0c      	ite	eq
 800626a:	2308      	moveq	r3, #8
 800626c:	230a      	movne	r3, #10
 800626e:	4852      	ldr	r0, [pc, #328]	; (80063b8 <_printf_i+0x244>)
 8006270:	2100      	movs	r1, #0
 8006272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006276:	6865      	ldr	r5, [r4, #4]
 8006278:	2d00      	cmp	r5, #0
 800627a:	bfa8      	it	ge
 800627c:	6821      	ldrge	r1, [r4, #0]
 800627e:	60a5      	str	r5, [r4, #8]
 8006280:	bfa4      	itt	ge
 8006282:	f021 0104 	bicge.w	r1, r1, #4
 8006286:	6021      	strge	r1, [r4, #0]
 8006288:	b90e      	cbnz	r6, 800628e <_printf_i+0x11a>
 800628a:	2d00      	cmp	r5, #0
 800628c:	d04d      	beq.n	800632a <_printf_i+0x1b6>
 800628e:	4615      	mov	r5, r2
 8006290:	fbb6 f1f3 	udiv	r1, r6, r3
 8006294:	fb03 6711 	mls	r7, r3, r1, r6
 8006298:	5dc7      	ldrb	r7, [r0, r7]
 800629a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800629e:	4637      	mov	r7, r6
 80062a0:	42bb      	cmp	r3, r7
 80062a2:	460e      	mov	r6, r1
 80062a4:	d9f4      	bls.n	8006290 <_printf_i+0x11c>
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d10b      	bne.n	80062c2 <_printf_i+0x14e>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	07de      	lsls	r6, r3, #31
 80062ae:	d508      	bpl.n	80062c2 <_printf_i+0x14e>
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	6861      	ldr	r1, [r4, #4]
 80062b4:	4299      	cmp	r1, r3
 80062b6:	bfde      	ittt	le
 80062b8:	2330      	movle	r3, #48	; 0x30
 80062ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062c2:	1b52      	subs	r2, r2, r5
 80062c4:	6122      	str	r2, [r4, #16]
 80062c6:	464b      	mov	r3, r9
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f8cd a000 	str.w	sl, [sp]
 80062d0:	aa03      	add	r2, sp, #12
 80062d2:	f7ff fedf 	bl	8006094 <_printf_common>
 80062d6:	3001      	adds	r0, #1
 80062d8:	d14c      	bne.n	8006374 <_printf_i+0x200>
 80062da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062de:	b004      	add	sp, #16
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	4834      	ldr	r0, [pc, #208]	; (80063b8 <_printf_i+0x244>)
 80062e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062ea:	6829      	ldr	r1, [r5, #0]
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f2:	6029      	str	r1, [r5, #0]
 80062f4:	061d      	lsls	r5, r3, #24
 80062f6:	d514      	bpl.n	8006322 <_printf_i+0x1ae>
 80062f8:	07df      	lsls	r7, r3, #31
 80062fa:	bf44      	itt	mi
 80062fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006300:	6023      	strmi	r3, [r4, #0]
 8006302:	b91e      	cbnz	r6, 800630c <_printf_i+0x198>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	f023 0320 	bic.w	r3, r3, #32
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	2310      	movs	r3, #16
 800630e:	e7af      	b.n	8006270 <_printf_i+0xfc>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	f043 0320 	orr.w	r3, r3, #32
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	2378      	movs	r3, #120	; 0x78
 800631a:	4828      	ldr	r0, [pc, #160]	; (80063bc <_printf_i+0x248>)
 800631c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006320:	e7e3      	b.n	80062ea <_printf_i+0x176>
 8006322:	0659      	lsls	r1, r3, #25
 8006324:	bf48      	it	mi
 8006326:	b2b6      	uxthmi	r6, r6
 8006328:	e7e6      	b.n	80062f8 <_printf_i+0x184>
 800632a:	4615      	mov	r5, r2
 800632c:	e7bb      	b.n	80062a6 <_printf_i+0x132>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	6826      	ldr	r6, [r4, #0]
 8006332:	1d18      	adds	r0, r3, #4
 8006334:	6961      	ldr	r1, [r4, #20]
 8006336:	6028      	str	r0, [r5, #0]
 8006338:	0635      	lsls	r5, r6, #24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	d501      	bpl.n	8006342 <_printf_i+0x1ce>
 800633e:	6019      	str	r1, [r3, #0]
 8006340:	e002      	b.n	8006348 <_printf_i+0x1d4>
 8006342:	0670      	lsls	r0, r6, #25
 8006344:	d5fb      	bpl.n	800633e <_printf_i+0x1ca>
 8006346:	8019      	strh	r1, [r3, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	4615      	mov	r5, r2
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	e7ba      	b.n	80062c6 <_printf_i+0x152>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	2100      	movs	r1, #0
 8006354:	1d1a      	adds	r2, r3, #4
 8006356:	602a      	str	r2, [r5, #0]
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	4628      	mov	r0, r5
 800635e:	f000 ffc7 	bl	80072f0 <memchr>
 8006362:	b108      	cbz	r0, 8006368 <_printf_i+0x1f4>
 8006364:	1b40      	subs	r0, r0, r5
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2300      	movs	r3, #0
 800636e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006372:	e7a8      	b.n	80062c6 <_printf_i+0x152>
 8006374:	462a      	mov	r2, r5
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	47d0      	blx	sl
 800637e:	3001      	adds	r0, #1
 8006380:	d0ab      	beq.n	80062da <_printf_i+0x166>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	079b      	lsls	r3, r3, #30
 8006386:	d413      	bmi.n	80063b0 <_printf_i+0x23c>
 8006388:	68e0      	ldr	r0, [r4, #12]
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	4298      	cmp	r0, r3
 800638e:	bfb8      	it	lt
 8006390:	4618      	movlt	r0, r3
 8006392:	e7a4      	b.n	80062de <_printf_i+0x16a>
 8006394:	2301      	movs	r3, #1
 8006396:	4632      	mov	r2, r6
 8006398:	4649      	mov	r1, r9
 800639a:	4640      	mov	r0, r8
 800639c:	47d0      	blx	sl
 800639e:	3001      	adds	r0, #1
 80063a0:	d09b      	beq.n	80062da <_printf_i+0x166>
 80063a2:	3501      	adds	r5, #1
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	9903      	ldr	r1, [sp, #12]
 80063a8:	1a5b      	subs	r3, r3, r1
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	dcf2      	bgt.n	8006394 <_printf_i+0x220>
 80063ae:	e7eb      	b.n	8006388 <_printf_i+0x214>
 80063b0:	2500      	movs	r5, #0
 80063b2:	f104 0619 	add.w	r6, r4, #25
 80063b6:	e7f5      	b.n	80063a4 <_printf_i+0x230>
 80063b8:	080086aa 	.word	0x080086aa
 80063bc:	080086bb 	.word	0x080086bb

080063c0 <iprintf>:
 80063c0:	b40f      	push	{r0, r1, r2, r3}
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <iprintf+0x2c>)
 80063c4:	b513      	push	{r0, r1, r4, lr}
 80063c6:	681c      	ldr	r4, [r3, #0]
 80063c8:	b124      	cbz	r4, 80063d4 <iprintf+0x14>
 80063ca:	69a3      	ldr	r3, [r4, #24]
 80063cc:	b913      	cbnz	r3, 80063d4 <iprintf+0x14>
 80063ce:	4620      	mov	r0, r4
 80063d0:	f000 fee0 	bl	8007194 <__sinit>
 80063d4:	ab05      	add	r3, sp, #20
 80063d6:	4620      	mov	r0, r4
 80063d8:	9a04      	ldr	r2, [sp, #16]
 80063da:	68a1      	ldr	r1, [r4, #8]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f001 fc3d 	bl	8007c5c <_vfiprintf_r>
 80063e2:	b002      	add	sp, #8
 80063e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <quorem>:
 80063f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	6903      	ldr	r3, [r0, #16]
 80063f6:	690c      	ldr	r4, [r1, #16]
 80063f8:	4607      	mov	r7, r0
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	f2c0 8082 	blt.w	8006504 <quorem+0x114>
 8006400:	3c01      	subs	r4, #1
 8006402:	f100 0514 	add.w	r5, r0, #20
 8006406:	f101 0814 	add.w	r8, r1, #20
 800640a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	3301      	adds	r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006420:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006424:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006428:	d331      	bcc.n	800648e <quorem+0x9e>
 800642a:	f04f 0e00 	mov.w	lr, #0
 800642e:	4640      	mov	r0, r8
 8006430:	46ac      	mov	ip, r5
 8006432:	46f2      	mov	sl, lr
 8006434:	f850 2b04 	ldr.w	r2, [r0], #4
 8006438:	b293      	uxth	r3, r2
 800643a:	fb06 e303 	mla	r3, r6, r3, lr
 800643e:	0c12      	lsrs	r2, r2, #16
 8006440:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006444:	b29b      	uxth	r3, r3
 8006446:	fb06 e202 	mla	r2, r6, r2, lr
 800644a:	ebaa 0303 	sub.w	r3, sl, r3
 800644e:	f8dc a000 	ldr.w	sl, [ip]
 8006452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006456:	fa1f fa8a 	uxth.w	sl, sl
 800645a:	4453      	add	r3, sl
 800645c:	f8dc a000 	ldr.w	sl, [ip]
 8006460:	b292      	uxth	r2, r2
 8006462:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006466:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006470:	4581      	cmp	r9, r0
 8006472:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006476:	f84c 3b04 	str.w	r3, [ip], #4
 800647a:	d2db      	bcs.n	8006434 <quorem+0x44>
 800647c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006480:	b92b      	cbnz	r3, 800648e <quorem+0x9e>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	3b04      	subs	r3, #4
 8006486:	429d      	cmp	r5, r3
 8006488:	461a      	mov	r2, r3
 800648a:	d32f      	bcc.n	80064ec <quorem+0xfc>
 800648c:	613c      	str	r4, [r7, #16]
 800648e:	4638      	mov	r0, r7
 8006490:	f001 f9c8 	bl	8007824 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	db25      	blt.n	80064e4 <quorem+0xf4>
 8006498:	4628      	mov	r0, r5
 800649a:	f04f 0c00 	mov.w	ip, #0
 800649e:	3601      	adds	r6, #1
 80064a0:	f858 1b04 	ldr.w	r1, [r8], #4
 80064a4:	f8d0 e000 	ldr.w	lr, [r0]
 80064a8:	b28b      	uxth	r3, r1
 80064aa:	ebac 0303 	sub.w	r3, ip, r3
 80064ae:	fa1f f28e 	uxth.w	r2, lr
 80064b2:	4413      	add	r3, r2
 80064b4:	0c0a      	lsrs	r2, r1, #16
 80064b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c4:	45c1      	cmp	r9, r8
 80064c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064ca:	f840 3b04 	str.w	r3, [r0], #4
 80064ce:	d2e7      	bcs.n	80064a0 <quorem+0xb0>
 80064d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064d8:	b922      	cbnz	r2, 80064e4 <quorem+0xf4>
 80064da:	3b04      	subs	r3, #4
 80064dc:	429d      	cmp	r5, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	d30a      	bcc.n	80064f8 <quorem+0x108>
 80064e2:	613c      	str	r4, [r7, #16]
 80064e4:	4630      	mov	r0, r6
 80064e6:	b003      	add	sp, #12
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	3b04      	subs	r3, #4
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	d1cb      	bne.n	800648c <quorem+0x9c>
 80064f4:	3c01      	subs	r4, #1
 80064f6:	e7c6      	b.n	8006486 <quorem+0x96>
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	3b04      	subs	r3, #4
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	d1f0      	bne.n	80064e2 <quorem+0xf2>
 8006500:	3c01      	subs	r4, #1
 8006502:	e7eb      	b.n	80064dc <quorem+0xec>
 8006504:	2000      	movs	r0, #0
 8006506:	e7ee      	b.n	80064e6 <quorem+0xf6>

08006508 <_dtoa_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	4616      	mov	r6, r2
 800650e:	461f      	mov	r7, r3
 8006510:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006512:	b099      	sub	sp, #100	; 0x64
 8006514:	4605      	mov	r5, r0
 8006516:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800651a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800651e:	b974      	cbnz	r4, 800653e <_dtoa_r+0x36>
 8006520:	2010      	movs	r0, #16
 8006522:	f000 fedd 	bl	80072e0 <malloc>
 8006526:	4602      	mov	r2, r0
 8006528:	6268      	str	r0, [r5, #36]	; 0x24
 800652a:	b920      	cbnz	r0, 8006536 <_dtoa_r+0x2e>
 800652c:	21ea      	movs	r1, #234	; 0xea
 800652e:	4ba8      	ldr	r3, [pc, #672]	; (80067d0 <_dtoa_r+0x2c8>)
 8006530:	48a8      	ldr	r0, [pc, #672]	; (80067d4 <_dtoa_r+0x2cc>)
 8006532:	f001 fde9 	bl	8008108 <__assert_func>
 8006536:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800653a:	6004      	str	r4, [r0, #0]
 800653c:	60c4      	str	r4, [r0, #12]
 800653e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006540:	6819      	ldr	r1, [r3, #0]
 8006542:	b151      	cbz	r1, 800655a <_dtoa_r+0x52>
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	2301      	movs	r3, #1
 8006548:	4093      	lsls	r3, r2
 800654a:	604a      	str	r2, [r1, #4]
 800654c:	608b      	str	r3, [r1, #8]
 800654e:	4628      	mov	r0, r5
 8006550:	f000 ff2a 	bl	80073a8 <_Bfree>
 8006554:	2200      	movs	r2, #0
 8006556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	1e3b      	subs	r3, r7, #0
 800655c:	bfaf      	iteee	ge
 800655e:	2300      	movge	r3, #0
 8006560:	2201      	movlt	r2, #1
 8006562:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006566:	9305      	strlt	r3, [sp, #20]
 8006568:	bfa8      	it	ge
 800656a:	f8c8 3000 	strge.w	r3, [r8]
 800656e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006572:	4b99      	ldr	r3, [pc, #612]	; (80067d8 <_dtoa_r+0x2d0>)
 8006574:	bfb8      	it	lt
 8006576:	f8c8 2000 	strlt.w	r2, [r8]
 800657a:	ea33 0309 	bics.w	r3, r3, r9
 800657e:	d119      	bne.n	80065b4 <_dtoa_r+0xac>
 8006580:	f242 730f 	movw	r3, #9999	; 0x270f
 8006584:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800658c:	4333      	orrs	r3, r6
 800658e:	f000 857f 	beq.w	8007090 <_dtoa_r+0xb88>
 8006592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006594:	b953      	cbnz	r3, 80065ac <_dtoa_r+0xa4>
 8006596:	4b91      	ldr	r3, [pc, #580]	; (80067dc <_dtoa_r+0x2d4>)
 8006598:	e022      	b.n	80065e0 <_dtoa_r+0xd8>
 800659a:	4b91      	ldr	r3, [pc, #580]	; (80067e0 <_dtoa_r+0x2d8>)
 800659c:	9303      	str	r3, [sp, #12]
 800659e:	3308      	adds	r3, #8
 80065a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	9803      	ldr	r0, [sp, #12]
 80065a6:	b019      	add	sp, #100	; 0x64
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	4b8b      	ldr	r3, [pc, #556]	; (80067dc <_dtoa_r+0x2d4>)
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	3303      	adds	r3, #3
 80065b2:	e7f5      	b.n	80065a0 <_dtoa_r+0x98>
 80065b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80065bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f7fa f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80065c8:	4680      	mov	r8, r0
 80065ca:	b158      	cbz	r0, 80065e4 <_dtoa_r+0xdc>
 80065cc:	2301      	movs	r3, #1
 80065ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8558 	beq.w	800708a <_dtoa_r+0xb82>
 80065da:	4882      	ldr	r0, [pc, #520]	; (80067e4 <_dtoa_r+0x2dc>)
 80065dc:	6018      	str	r0, [r3, #0]
 80065de:	1e43      	subs	r3, r0, #1
 80065e0:	9303      	str	r3, [sp, #12]
 80065e2:	e7df      	b.n	80065a4 <_dtoa_r+0x9c>
 80065e4:	ab16      	add	r3, sp, #88	; 0x58
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	ab17      	add	r3, sp, #92	; 0x5c
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	4628      	mov	r0, r5
 80065ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065f2:	f001 f9bf 	bl	8007974 <__d2b>
 80065f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80065fa:	4683      	mov	fp, r0
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	d07f      	beq.n	8006700 <_dtoa_r+0x1f8>
 8006600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006606:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800660a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006612:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006616:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800661a:	2200      	movs	r2, #0
 800661c:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <_dtoa_r+0x2e0>)
 800661e:	f7f9 fda3 	bl	8000168 <__aeabi_dsub>
 8006622:	a365      	add	r3, pc, #404	; (adr r3, 80067b8 <_dtoa_r+0x2b0>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7f9 ff56 	bl	80004d8 <__aeabi_dmul>
 800662c:	a364      	add	r3, pc, #400	; (adr r3, 80067c0 <_dtoa_r+0x2b8>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fd9b 	bl	800016c <__adddf3>
 8006636:	4606      	mov	r6, r0
 8006638:	4620      	mov	r0, r4
 800663a:	460f      	mov	r7, r1
 800663c:	f7f9 fee2 	bl	8000404 <__aeabi_i2d>
 8006640:	a361      	add	r3, pc, #388	; (adr r3, 80067c8 <_dtoa_r+0x2c0>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 ff47 	bl	80004d8 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7f9 fd8b 	bl	800016c <__adddf3>
 8006656:	4606      	mov	r6, r0
 8006658:	460f      	mov	r7, r1
 800665a:	f7fa f9ed 	bl	8000a38 <__aeabi_d2iz>
 800665e:	2200      	movs	r2, #0
 8006660:	4682      	mov	sl, r0
 8006662:	2300      	movs	r3, #0
 8006664:	4630      	mov	r0, r6
 8006666:	4639      	mov	r1, r7
 8006668:	f7fa f9a8 	bl	80009bc <__aeabi_dcmplt>
 800666c:	b148      	cbz	r0, 8006682 <_dtoa_r+0x17a>
 800666e:	4650      	mov	r0, sl
 8006670:	f7f9 fec8 	bl	8000404 <__aeabi_i2d>
 8006674:	4632      	mov	r2, r6
 8006676:	463b      	mov	r3, r7
 8006678:	f7fa f996 	bl	80009a8 <__aeabi_dcmpeq>
 800667c:	b908      	cbnz	r0, 8006682 <_dtoa_r+0x17a>
 800667e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006682:	f1ba 0f16 	cmp.w	sl, #22
 8006686:	d858      	bhi.n	800673a <_dtoa_r+0x232>
 8006688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800668c:	4b57      	ldr	r3, [pc, #348]	; (80067ec <_dtoa_r+0x2e4>)
 800668e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7fa f991 	bl	80009bc <__aeabi_dcmplt>
 800669a:	2800      	cmp	r0, #0
 800669c:	d04f      	beq.n	800673e <_dtoa_r+0x236>
 800669e:	2300      	movs	r3, #0
 80066a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80066a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80066a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066a8:	1b1c      	subs	r4, r3, r4
 80066aa:	1e63      	subs	r3, r4, #1
 80066ac:	9309      	str	r3, [sp, #36]	; 0x24
 80066ae:	bf49      	itett	mi
 80066b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80066b4:	2300      	movpl	r3, #0
 80066b6:	9306      	strmi	r3, [sp, #24]
 80066b8:	2300      	movmi	r3, #0
 80066ba:	bf54      	ite	pl
 80066bc:	9306      	strpl	r3, [sp, #24]
 80066be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80066c0:	f1ba 0f00 	cmp.w	sl, #0
 80066c4:	db3d      	blt.n	8006742 <_dtoa_r+0x23a>
 80066c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80066cc:	4453      	add	r3, sl
 80066ce:	9309      	str	r3, [sp, #36]	; 0x24
 80066d0:	2300      	movs	r3, #0
 80066d2:	930a      	str	r3, [sp, #40]	; 0x28
 80066d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	f200 808c 	bhi.w	80067f4 <_dtoa_r+0x2ec>
 80066dc:	2b05      	cmp	r3, #5
 80066de:	bfc4      	itt	gt
 80066e0:	3b04      	subgt	r3, #4
 80066e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80066e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066e6:	bfc8      	it	gt
 80066e8:	2400      	movgt	r4, #0
 80066ea:	f1a3 0302 	sub.w	r3, r3, #2
 80066ee:	bfd8      	it	le
 80066f0:	2401      	movle	r4, #1
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	f200 808a 	bhi.w	800680c <_dtoa_r+0x304>
 80066f8:	e8df f003 	tbb	[pc, r3]
 80066fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8006700:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006704:	441c      	add	r4, r3
 8006706:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800670a:	2b20      	cmp	r3, #32
 800670c:	bfc3      	ittte	gt
 800670e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006712:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006716:	fa09 f303 	lslgt.w	r3, r9, r3
 800671a:	f1c3 0320 	rsble	r3, r3, #32
 800671e:	bfc6      	itte	gt
 8006720:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006724:	4318      	orrgt	r0, r3
 8006726:	fa06 f003 	lslle.w	r0, r6, r3
 800672a:	f7f9 fe5b 	bl	80003e4 <__aeabi_ui2d>
 800672e:	2301      	movs	r3, #1
 8006730:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006734:	3c01      	subs	r4, #1
 8006736:	9313      	str	r3, [sp, #76]	; 0x4c
 8006738:	e76f      	b.n	800661a <_dtoa_r+0x112>
 800673a:	2301      	movs	r3, #1
 800673c:	e7b2      	b.n	80066a4 <_dtoa_r+0x19c>
 800673e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006740:	e7b1      	b.n	80066a6 <_dtoa_r+0x19e>
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	eba3 030a 	sub.w	r3, r3, sl
 8006748:	9306      	str	r3, [sp, #24]
 800674a:	f1ca 0300 	rsb	r3, sl, #0
 800674e:	930a      	str	r3, [sp, #40]	; 0x28
 8006750:	2300      	movs	r3, #0
 8006752:	930e      	str	r3, [sp, #56]	; 0x38
 8006754:	e7be      	b.n	80066d4 <_dtoa_r+0x1cc>
 8006756:	2300      	movs	r3, #0
 8006758:	930b      	str	r3, [sp, #44]	; 0x2c
 800675a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc58      	bgt.n	8006812 <_dtoa_r+0x30a>
 8006760:	f04f 0901 	mov.w	r9, #1
 8006764:	464b      	mov	r3, r9
 8006766:	f8cd 9020 	str.w	r9, [sp, #32]
 800676a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800676e:	2200      	movs	r2, #0
 8006770:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006772:	6042      	str	r2, [r0, #4]
 8006774:	2204      	movs	r2, #4
 8006776:	f102 0614 	add.w	r6, r2, #20
 800677a:	429e      	cmp	r6, r3
 800677c:	6841      	ldr	r1, [r0, #4]
 800677e:	d94e      	bls.n	800681e <_dtoa_r+0x316>
 8006780:	4628      	mov	r0, r5
 8006782:	f000 fdd1 	bl	8007328 <_Balloc>
 8006786:	9003      	str	r0, [sp, #12]
 8006788:	2800      	cmp	r0, #0
 800678a:	d14c      	bne.n	8006826 <_dtoa_r+0x31e>
 800678c:	4602      	mov	r2, r0
 800678e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006792:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <_dtoa_r+0x2e8>)
 8006794:	e6cc      	b.n	8006530 <_dtoa_r+0x28>
 8006796:	2301      	movs	r3, #1
 8006798:	e7de      	b.n	8006758 <_dtoa_r+0x250>
 800679a:	2300      	movs	r3, #0
 800679c:	930b      	str	r3, [sp, #44]	; 0x2c
 800679e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067a0:	eb0a 0903 	add.w	r9, sl, r3
 80067a4:	f109 0301 	add.w	r3, r9, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	9308      	str	r3, [sp, #32]
 80067ac:	bfb8      	it	lt
 80067ae:	2301      	movlt	r3, #1
 80067b0:	e7dd      	b.n	800676e <_dtoa_r+0x266>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e7f2      	b.n	800679c <_dtoa_r+0x294>
 80067b6:	bf00      	nop
 80067b8:	636f4361 	.word	0x636f4361
 80067bc:	3fd287a7 	.word	0x3fd287a7
 80067c0:	8b60c8b3 	.word	0x8b60c8b3
 80067c4:	3fc68a28 	.word	0x3fc68a28
 80067c8:	509f79fb 	.word	0x509f79fb
 80067cc:	3fd34413 	.word	0x3fd34413
 80067d0:	080086d9 	.word	0x080086d9
 80067d4:	080086f0 	.word	0x080086f0
 80067d8:	7ff00000 	.word	0x7ff00000
 80067dc:	080086d5 	.word	0x080086d5
 80067e0:	080086cc 	.word	0x080086cc
 80067e4:	080086a9 	.word	0x080086a9
 80067e8:	3ff80000 	.word	0x3ff80000
 80067ec:	08008840 	.word	0x08008840
 80067f0:	0800874b 	.word	0x0800874b
 80067f4:	2401      	movs	r4, #1
 80067f6:	2300      	movs	r3, #0
 80067f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80067fa:	9322      	str	r3, [sp, #136]	; 0x88
 80067fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006800:	2200      	movs	r2, #0
 8006802:	2312      	movs	r3, #18
 8006804:	f8cd 9020 	str.w	r9, [sp, #32]
 8006808:	9223      	str	r2, [sp, #140]	; 0x8c
 800680a:	e7b0      	b.n	800676e <_dtoa_r+0x266>
 800680c:	2301      	movs	r3, #1
 800680e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006810:	e7f4      	b.n	80067fc <_dtoa_r+0x2f4>
 8006812:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006816:	464b      	mov	r3, r9
 8006818:	f8cd 9020 	str.w	r9, [sp, #32]
 800681c:	e7a7      	b.n	800676e <_dtoa_r+0x266>
 800681e:	3101      	adds	r1, #1
 8006820:	6041      	str	r1, [r0, #4]
 8006822:	0052      	lsls	r2, r2, #1
 8006824:	e7a7      	b.n	8006776 <_dtoa_r+0x26e>
 8006826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006828:	9a03      	ldr	r2, [sp, #12]
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	9b08      	ldr	r3, [sp, #32]
 800682e:	2b0e      	cmp	r3, #14
 8006830:	f200 80a8 	bhi.w	8006984 <_dtoa_r+0x47c>
 8006834:	2c00      	cmp	r4, #0
 8006836:	f000 80a5 	beq.w	8006984 <_dtoa_r+0x47c>
 800683a:	f1ba 0f00 	cmp.w	sl, #0
 800683e:	dd34      	ble.n	80068aa <_dtoa_r+0x3a2>
 8006840:	4a9a      	ldr	r2, [pc, #616]	; (8006aac <_dtoa_r+0x5a4>)
 8006842:	f00a 030f 	and.w	r3, sl, #15
 8006846:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800684a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800684e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006852:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006856:	ea4f 142a 	mov.w	r4, sl, asr #4
 800685a:	d016      	beq.n	800688a <_dtoa_r+0x382>
 800685c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006860:	4b93      	ldr	r3, [pc, #588]	; (8006ab0 <_dtoa_r+0x5a8>)
 8006862:	2703      	movs	r7, #3
 8006864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006868:	f7f9 ff60 	bl	800072c <__aeabi_ddiv>
 800686c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006870:	f004 040f 	and.w	r4, r4, #15
 8006874:	4e8e      	ldr	r6, [pc, #568]	; (8006ab0 <_dtoa_r+0x5a8>)
 8006876:	b954      	cbnz	r4, 800688e <_dtoa_r+0x386>
 8006878:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800687c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006880:	f7f9 ff54 	bl	800072c <__aeabi_ddiv>
 8006884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006888:	e029      	b.n	80068de <_dtoa_r+0x3d6>
 800688a:	2702      	movs	r7, #2
 800688c:	e7f2      	b.n	8006874 <_dtoa_r+0x36c>
 800688e:	07e1      	lsls	r1, r4, #31
 8006890:	d508      	bpl.n	80068a4 <_dtoa_r+0x39c>
 8006892:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006896:	e9d6 2300 	ldrd	r2, r3, [r6]
 800689a:	f7f9 fe1d 	bl	80004d8 <__aeabi_dmul>
 800689e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a2:	3701      	adds	r7, #1
 80068a4:	1064      	asrs	r4, r4, #1
 80068a6:	3608      	adds	r6, #8
 80068a8:	e7e5      	b.n	8006876 <_dtoa_r+0x36e>
 80068aa:	f000 80a5 	beq.w	80069f8 <_dtoa_r+0x4f0>
 80068ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068b2:	f1ca 0400 	rsb	r4, sl, #0
 80068b6:	4b7d      	ldr	r3, [pc, #500]	; (8006aac <_dtoa_r+0x5a4>)
 80068b8:	f004 020f 	and.w	r2, r4, #15
 80068bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fe08 	bl	80004d8 <__aeabi_dmul>
 80068c8:	2702      	movs	r7, #2
 80068ca:	2300      	movs	r3, #0
 80068cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068d0:	4e77      	ldr	r6, [pc, #476]	; (8006ab0 <_dtoa_r+0x5a8>)
 80068d2:	1124      	asrs	r4, r4, #4
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	f040 8084 	bne.w	80069e2 <_dtoa_r+0x4da>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1d2      	bne.n	8006884 <_dtoa_r+0x37c>
 80068de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 808b 	beq.w	80069fc <_dtoa_r+0x4f4>
 80068e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80068ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068f2:	2200      	movs	r2, #0
 80068f4:	4b6f      	ldr	r3, [pc, #444]	; (8006ab4 <_dtoa_r+0x5ac>)
 80068f6:	f7fa f861 	bl	80009bc <__aeabi_dcmplt>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d07e      	beq.n	80069fc <_dtoa_r+0x4f4>
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d07b      	beq.n	80069fc <_dtoa_r+0x4f4>
 8006904:	f1b9 0f00 	cmp.w	r9, #0
 8006908:	dd38      	ble.n	800697c <_dtoa_r+0x474>
 800690a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800690e:	2200      	movs	r2, #0
 8006910:	4b69      	ldr	r3, [pc, #420]	; (8006ab8 <_dtoa_r+0x5b0>)
 8006912:	f7f9 fde1 	bl	80004d8 <__aeabi_dmul>
 8006916:	464c      	mov	r4, r9
 8006918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006920:	3701      	adds	r7, #1
 8006922:	4638      	mov	r0, r7
 8006924:	f7f9 fd6e 	bl	8000404 <__aeabi_i2d>
 8006928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800692c:	f7f9 fdd4 	bl	80004d8 <__aeabi_dmul>
 8006930:	2200      	movs	r2, #0
 8006932:	4b62      	ldr	r3, [pc, #392]	; (8006abc <_dtoa_r+0x5b4>)
 8006934:	f7f9 fc1a 	bl	800016c <__adddf3>
 8006938:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800693c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006940:	9611      	str	r6, [sp, #68]	; 0x44
 8006942:	2c00      	cmp	r4, #0
 8006944:	d15d      	bne.n	8006a02 <_dtoa_r+0x4fa>
 8006946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694a:	2200      	movs	r2, #0
 800694c:	4b5c      	ldr	r3, [pc, #368]	; (8006ac0 <_dtoa_r+0x5b8>)
 800694e:	f7f9 fc0b 	bl	8000168 <__aeabi_dsub>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800695a:	4633      	mov	r3, r6
 800695c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800695e:	f7fa f84b 	bl	80009f8 <__aeabi_dcmpgt>
 8006962:	2800      	cmp	r0, #0
 8006964:	f040 829c 	bne.w	8006ea0 <_dtoa_r+0x998>
 8006968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800696c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800696e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006972:	f7fa f823 	bl	80009bc <__aeabi_dcmplt>
 8006976:	2800      	cmp	r0, #0
 8006978:	f040 8290 	bne.w	8006e9c <_dtoa_r+0x994>
 800697c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006980:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006986:	2b00      	cmp	r3, #0
 8006988:	f2c0 8152 	blt.w	8006c30 <_dtoa_r+0x728>
 800698c:	f1ba 0f0e 	cmp.w	sl, #14
 8006990:	f300 814e 	bgt.w	8006c30 <_dtoa_r+0x728>
 8006994:	4b45      	ldr	r3, [pc, #276]	; (8006aac <_dtoa_r+0x5a4>)
 8006996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800699a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800699e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f280 80db 	bge.w	8006b60 <_dtoa_r+0x658>
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f300 80d7 	bgt.w	8006b60 <_dtoa_r+0x658>
 80069b2:	f040 8272 	bne.w	8006e9a <_dtoa_r+0x992>
 80069b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ba:	2200      	movs	r2, #0
 80069bc:	4b40      	ldr	r3, [pc, #256]	; (8006ac0 <_dtoa_r+0x5b8>)
 80069be:	f7f9 fd8b 	bl	80004d8 <__aeabi_dmul>
 80069c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c6:	f7fa f80d 	bl	80009e4 <__aeabi_dcmpge>
 80069ca:	9c08      	ldr	r4, [sp, #32]
 80069cc:	4626      	mov	r6, r4
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8248 	bne.w	8006e64 <_dtoa_r+0x95c>
 80069d4:	2331      	movs	r3, #49	; 0x31
 80069d6:	9f03      	ldr	r7, [sp, #12]
 80069d8:	f10a 0a01 	add.w	sl, sl, #1
 80069dc:	f807 3b01 	strb.w	r3, [r7], #1
 80069e0:	e244      	b.n	8006e6c <_dtoa_r+0x964>
 80069e2:	07e2      	lsls	r2, r4, #31
 80069e4:	d505      	bpl.n	80069f2 <_dtoa_r+0x4ea>
 80069e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069ea:	f7f9 fd75 	bl	80004d8 <__aeabi_dmul>
 80069ee:	2301      	movs	r3, #1
 80069f0:	3701      	adds	r7, #1
 80069f2:	1064      	asrs	r4, r4, #1
 80069f4:	3608      	adds	r6, #8
 80069f6:	e76d      	b.n	80068d4 <_dtoa_r+0x3cc>
 80069f8:	2702      	movs	r7, #2
 80069fa:	e770      	b.n	80068de <_dtoa_r+0x3d6>
 80069fc:	46d0      	mov	r8, sl
 80069fe:	9c08      	ldr	r4, [sp, #32]
 8006a00:	e78f      	b.n	8006922 <_dtoa_r+0x41a>
 8006a02:	9903      	ldr	r1, [sp, #12]
 8006a04:	4b29      	ldr	r3, [pc, #164]	; (8006aac <_dtoa_r+0x5a4>)
 8006a06:	4421      	add	r1, r4
 8006a08:	9112      	str	r1, [sp, #72]	; 0x48
 8006a0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	d055      	beq.n	8006ac8 <_dtoa_r+0x5c0>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	4929      	ldr	r1, [pc, #164]	; (8006ac4 <_dtoa_r+0x5bc>)
 8006a20:	f7f9 fe84 	bl	800072c <__aeabi_ddiv>
 8006a24:	463b      	mov	r3, r7
 8006a26:	4632      	mov	r2, r6
 8006a28:	f7f9 fb9e 	bl	8000168 <__aeabi_dsub>
 8006a2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a30:	9f03      	ldr	r7, [sp, #12]
 8006a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a36:	f7f9 ffff 	bl	8000a38 <__aeabi_d2iz>
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	f7f9 fce2 	bl	8000404 <__aeabi_i2d>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a48:	f7f9 fb8e 	bl	8000168 <__aeabi_dsub>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	3430      	adds	r4, #48	; 0x30
 8006a52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a5a:	f807 4b01 	strb.w	r4, [r7], #1
 8006a5e:	f7f9 ffad 	bl	80009bc <__aeabi_dcmplt>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d174      	bne.n	8006b50 <_dtoa_r+0x648>
 8006a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	4911      	ldr	r1, [pc, #68]	; (8006ab4 <_dtoa_r+0x5ac>)
 8006a6e:	f7f9 fb7b 	bl	8000168 <__aeabi_dsub>
 8006a72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a76:	f7f9 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f040 80b7 	bne.w	8006bee <_dtoa_r+0x6e6>
 8006a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a82:	429f      	cmp	r7, r3
 8006a84:	f43f af7a 	beq.w	800697c <_dtoa_r+0x474>
 8006a88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <_dtoa_r+0x5b0>)
 8006a90:	f7f9 fd22 	bl	80004d8 <__aeabi_dmul>
 8006a94:	2200      	movs	r2, #0
 8006a96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <_dtoa_r+0x5b0>)
 8006aa0:	f7f9 fd1a 	bl	80004d8 <__aeabi_dmul>
 8006aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa8:	e7c3      	b.n	8006a32 <_dtoa_r+0x52a>
 8006aaa:	bf00      	nop
 8006aac:	08008840 	.word	0x08008840
 8006ab0:	08008818 	.word	0x08008818
 8006ab4:	3ff00000 	.word	0x3ff00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	401c0000 	.word	0x401c0000
 8006ac0:	40140000 	.word	0x40140000
 8006ac4:	3fe00000 	.word	0x3fe00000
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7f9 fd04 	bl	80004d8 <__aeabi_dmul>
 8006ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ad2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ad6:	9c03      	ldr	r4, [sp, #12]
 8006ad8:	9314      	str	r3, [sp, #80]	; 0x50
 8006ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ade:	f7f9 ffab 	bl	8000a38 <__aeabi_d2iz>
 8006ae2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ae4:	f7f9 fc8e 	bl	8000404 <__aeabi_i2d>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af0:	f7f9 fb3a 	bl	8000168 <__aeabi_dsub>
 8006af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006af6:	4606      	mov	r6, r0
 8006af8:	3330      	adds	r3, #48	; 0x30
 8006afa:	f804 3b01 	strb.w	r3, [r4], #1
 8006afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b00:	460f      	mov	r7, r1
 8006b02:	429c      	cmp	r4, r3
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	d124      	bne.n	8006b54 <_dtoa_r+0x64c>
 8006b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b0e:	4bb0      	ldr	r3, [pc, #704]	; (8006dd0 <_dtoa_r+0x8c8>)
 8006b10:	f7f9 fb2c 	bl	800016c <__adddf3>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d163      	bne.n	8006bec <_dtoa_r+0x6e4>
 8006b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b28:	2000      	movs	r0, #0
 8006b2a:	49a9      	ldr	r1, [pc, #676]	; (8006dd0 <_dtoa_r+0x8c8>)
 8006b2c:	f7f9 fb1c 	bl	8000168 <__aeabi_dsub>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 ff40 	bl	80009bc <__aeabi_dcmplt>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	f43f af1d 	beq.w	800697c <_dtoa_r+0x474>
 8006b42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b44:	1e7b      	subs	r3, r7, #1
 8006b46:	9314      	str	r3, [sp, #80]	; 0x50
 8006b48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006b4c:	2b30      	cmp	r3, #48	; 0x30
 8006b4e:	d0f8      	beq.n	8006b42 <_dtoa_r+0x63a>
 8006b50:	46c2      	mov	sl, r8
 8006b52:	e03b      	b.n	8006bcc <_dtoa_r+0x6c4>
 8006b54:	4b9f      	ldr	r3, [pc, #636]	; (8006dd4 <_dtoa_r+0x8cc>)
 8006b56:	f7f9 fcbf 	bl	80004d8 <__aeabi_dmul>
 8006b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b5e:	e7bc      	b.n	8006ada <_dtoa_r+0x5d2>
 8006b60:	9f03      	ldr	r7, [sp, #12]
 8006b62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fddd 	bl	800072c <__aeabi_ddiv>
 8006b72:	f7f9 ff61 	bl	8000a38 <__aeabi_d2iz>
 8006b76:	4604      	mov	r4, r0
 8006b78:	f7f9 fc44 	bl	8000404 <__aeabi_i2d>
 8006b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b80:	f7f9 fcaa 	bl	80004d8 <__aeabi_dmul>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	f7f9 faec 	bl	8000168 <__aeabi_dsub>
 8006b90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006b94:	f807 6b01 	strb.w	r6, [r7], #1
 8006b98:	9e03      	ldr	r6, [sp, #12]
 8006b9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006b9e:	1bbe      	subs	r6, r7, r6
 8006ba0:	45b4      	cmp	ip, r6
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	d136      	bne.n	8006c16 <_dtoa_r+0x70e>
 8006ba8:	f7f9 fae0 	bl	800016c <__adddf3>
 8006bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bb0:	4680      	mov	r8, r0
 8006bb2:	4689      	mov	r9, r1
 8006bb4:	f7f9 ff20 	bl	80009f8 <__aeabi_dcmpgt>
 8006bb8:	bb58      	cbnz	r0, 8006c12 <_dtoa_r+0x70a>
 8006bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	f7f9 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc6:	b108      	cbz	r0, 8006bcc <_dtoa_r+0x6c4>
 8006bc8:	07e1      	lsls	r1, r4, #31
 8006bca:	d422      	bmi.n	8006c12 <_dtoa_r+0x70a>
 8006bcc:	4628      	mov	r0, r5
 8006bce:	4659      	mov	r1, fp
 8006bd0:	f000 fbea 	bl	80073a8 <_Bfree>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	703b      	strb	r3, [r7, #0]
 8006bd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006bda:	f10a 0001 	add.w	r0, sl, #1
 8006bde:	6018      	str	r0, [r3, #0]
 8006be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f43f acde 	beq.w	80065a4 <_dtoa_r+0x9c>
 8006be8:	601f      	str	r7, [r3, #0]
 8006bea:	e4db      	b.n	80065a4 <_dtoa_r+0x9c>
 8006bec:	4627      	mov	r7, r4
 8006bee:	463b      	mov	r3, r7
 8006bf0:	461f      	mov	r7, r3
 8006bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bf6:	2a39      	cmp	r2, #57	; 0x39
 8006bf8:	d107      	bne.n	8006c0a <_dtoa_r+0x702>
 8006bfa:	9a03      	ldr	r2, [sp, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d1f7      	bne.n	8006bf0 <_dtoa_r+0x6e8>
 8006c00:	2230      	movs	r2, #48	; 0x30
 8006c02:	9903      	ldr	r1, [sp, #12]
 8006c04:	f108 0801 	add.w	r8, r8, #1
 8006c08:	700a      	strb	r2, [r1, #0]
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e79e      	b.n	8006b50 <_dtoa_r+0x648>
 8006c12:	46d0      	mov	r8, sl
 8006c14:	e7eb      	b.n	8006bee <_dtoa_r+0x6e6>
 8006c16:	2200      	movs	r2, #0
 8006c18:	4b6e      	ldr	r3, [pc, #440]	; (8006dd4 <_dtoa_r+0x8cc>)
 8006c1a:	f7f9 fc5d 	bl	80004d8 <__aeabi_dmul>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4680      	mov	r8, r0
 8006c24:	4689      	mov	r9, r1
 8006c26:	f7f9 febf 	bl	80009a8 <__aeabi_dcmpeq>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d09b      	beq.n	8006b66 <_dtoa_r+0x65e>
 8006c2e:	e7cd      	b.n	8006bcc <_dtoa_r+0x6c4>
 8006c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	f000 80d0 	beq.w	8006dd8 <_dtoa_r+0x8d0>
 8006c38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c3a:	2a01      	cmp	r2, #1
 8006c3c:	f300 80ae 	bgt.w	8006d9c <_dtoa_r+0x894>
 8006c40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	f000 80a6 	beq.w	8006d94 <_dtoa_r+0x88c>
 8006c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c4e:	9f06      	ldr	r7, [sp, #24]
 8006c50:	9a06      	ldr	r2, [sp, #24]
 8006c52:	2101      	movs	r1, #1
 8006c54:	441a      	add	r2, r3
 8006c56:	9206      	str	r2, [sp, #24]
 8006c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	441a      	add	r2, r3
 8006c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c60:	f000 fc58 	bl	8007514 <__i2b>
 8006c64:	4606      	mov	r6, r0
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	dd0c      	ble.n	8006c84 <_dtoa_r+0x77c>
 8006c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd09      	ble.n	8006c84 <_dtoa_r+0x77c>
 8006c70:	42bb      	cmp	r3, r7
 8006c72:	bfa8      	it	ge
 8006c74:	463b      	movge	r3, r7
 8006c76:	9a06      	ldr	r2, [sp, #24]
 8006c78:	1aff      	subs	r7, r7, r3
 8006c7a:	1ad2      	subs	r2, r2, r3
 8006c7c:	9206      	str	r2, [sp, #24]
 8006c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	9309      	str	r3, [sp, #36]	; 0x24
 8006c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c86:	b1f3      	cbz	r3, 8006cc6 <_dtoa_r+0x7be>
 8006c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80a8 	beq.w	8006de0 <_dtoa_r+0x8d8>
 8006c90:	2c00      	cmp	r4, #0
 8006c92:	dd10      	ble.n	8006cb6 <_dtoa_r+0x7ae>
 8006c94:	4631      	mov	r1, r6
 8006c96:	4622      	mov	r2, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 fcf9 	bl	8007690 <__pow5mult>
 8006c9e:	465a      	mov	r2, fp
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 fc4b 	bl	8007540 <__multiply>
 8006caa:	4680      	mov	r8, r0
 8006cac:	4659      	mov	r1, fp
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 fb7a 	bl	80073a8 <_Bfree>
 8006cb4:	46c3      	mov	fp, r8
 8006cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb8:	1b1a      	subs	r2, r3, r4
 8006cba:	d004      	beq.n	8006cc6 <_dtoa_r+0x7be>
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fce6 	bl	8007690 <__pow5mult>
 8006cc4:	4683      	mov	fp, r0
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f000 fc23 	bl	8007514 <__i2b>
 8006cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f340 8086 	ble.w	8006de4 <_dtoa_r+0x8dc>
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 fcd7 	bl	8007690 <__pow5mult>
 8006ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	dd7f      	ble.n	8006dea <_dtoa_r+0x8e2>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cf4:	6918      	ldr	r0, [r3, #16]
 8006cf6:	f000 fbbf 	bl	8007478 <__hi0bits>
 8006cfa:	f1c0 0020 	rsb	r0, r0, #32
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	4418      	add	r0, r3
 8006d02:	f010 001f 	ands.w	r0, r0, #31
 8006d06:	f000 8092 	beq.w	8006e2e <_dtoa_r+0x926>
 8006d0a:	f1c0 0320 	rsb	r3, r0, #32
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	f340 808a 	ble.w	8006e28 <_dtoa_r+0x920>
 8006d14:	f1c0 001c 	rsb	r0, r0, #28
 8006d18:	9b06      	ldr	r3, [sp, #24]
 8006d1a:	4407      	add	r7, r0
 8006d1c:	4403      	add	r3, r0
 8006d1e:	9306      	str	r3, [sp, #24]
 8006d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d22:	4403      	add	r3, r0
 8006d24:	9309      	str	r3, [sp, #36]	; 0x24
 8006d26:	9b06      	ldr	r3, [sp, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dd05      	ble.n	8006d38 <_dtoa_r+0x830>
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	461a      	mov	r2, r3
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 fd07 	bl	8007744 <__lshift>
 8006d36:	4683      	mov	fp, r0
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd05      	ble.n	8006d4a <_dtoa_r+0x842>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	461a      	mov	r2, r3
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 fcfe 	bl	8007744 <__lshift>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d070      	beq.n	8006e32 <_dtoa_r+0x92a>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4658      	mov	r0, fp
 8006d54:	f000 fd66 	bl	8007824 <__mcmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	da6a      	bge.n	8006e32 <_dtoa_r+0x92a>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4659      	mov	r1, fp
 8006d60:	220a      	movs	r2, #10
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 fb42 	bl	80073ec <__multadd>
 8006d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d6a:	4683      	mov	fp, r0
 8006d6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8194 	beq.w	800709e <_dtoa_r+0xb96>
 8006d76:	4631      	mov	r1, r6
 8006d78:	2300      	movs	r3, #0
 8006d7a:	220a      	movs	r2, #10
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 fb35 	bl	80073ec <__multadd>
 8006d82:	f1b9 0f00 	cmp.w	r9, #0
 8006d86:	4606      	mov	r6, r0
 8006d88:	f300 8093 	bgt.w	8006eb2 <_dtoa_r+0x9aa>
 8006d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	dc57      	bgt.n	8006e42 <_dtoa_r+0x93a>
 8006d92:	e08e      	b.n	8006eb2 <_dtoa_r+0x9aa>
 8006d94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d9a:	e757      	b.n	8006c4c <_dtoa_r+0x744>
 8006d9c:	9b08      	ldr	r3, [sp, #32]
 8006d9e:	1e5c      	subs	r4, r3, #1
 8006da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	bfb7      	itett	lt
 8006da6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006da8:	1b1c      	subge	r4, r3, r4
 8006daa:	1ae2      	sublt	r2, r4, r3
 8006dac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006dae:	bfbe      	ittt	lt
 8006db0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006db2:	189b      	addlt	r3, r3, r2
 8006db4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006db6:	9b08      	ldr	r3, [sp, #32]
 8006db8:	bfb8      	it	lt
 8006dba:	2400      	movlt	r4, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbb      	ittet	lt
 8006dc0:	9b06      	ldrlt	r3, [sp, #24]
 8006dc2:	9a08      	ldrlt	r2, [sp, #32]
 8006dc4:	9f06      	ldrge	r7, [sp, #24]
 8006dc6:	1a9f      	sublt	r7, r3, r2
 8006dc8:	bfac      	ite	ge
 8006dca:	9b08      	ldrge	r3, [sp, #32]
 8006dcc:	2300      	movlt	r3, #0
 8006dce:	e73f      	b.n	8006c50 <_dtoa_r+0x748>
 8006dd0:	3fe00000 	.word	0x3fe00000
 8006dd4:	40240000 	.word	0x40240000
 8006dd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dda:	9f06      	ldr	r7, [sp, #24]
 8006ddc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006dde:	e742      	b.n	8006c66 <_dtoa_r+0x75e>
 8006de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006de2:	e76b      	b.n	8006cbc <_dtoa_r+0x7b4>
 8006de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	dc19      	bgt.n	8006e1e <_dtoa_r+0x916>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	b9bb      	cbnz	r3, 8006e1e <_dtoa_r+0x916>
 8006dee:	9b05      	ldr	r3, [sp, #20]
 8006df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df4:	b99b      	cbnz	r3, 8006e1e <_dtoa_r+0x916>
 8006df6:	9b05      	ldr	r3, [sp, #20]
 8006df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dfc:	0d1b      	lsrs	r3, r3, #20
 8006dfe:	051b      	lsls	r3, r3, #20
 8006e00:	b183      	cbz	r3, 8006e24 <_dtoa_r+0x91c>
 8006e02:	f04f 0801 	mov.w	r8, #1
 8006e06:	9b06      	ldr	r3, [sp, #24]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	9306      	str	r3, [sp, #24]
 8006e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0e:	3301      	adds	r3, #1
 8006e10:	9309      	str	r3, [sp, #36]	; 0x24
 8006e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f af6a 	bne.w	8006cee <_dtoa_r+0x7e6>
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	e76f      	b.n	8006cfe <_dtoa_r+0x7f6>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	e7f6      	b.n	8006e12 <_dtoa_r+0x90a>
 8006e24:	4698      	mov	r8, r3
 8006e26:	e7f4      	b.n	8006e12 <_dtoa_r+0x90a>
 8006e28:	f43f af7d 	beq.w	8006d26 <_dtoa_r+0x81e>
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	301c      	adds	r0, #28
 8006e30:	e772      	b.n	8006d18 <_dtoa_r+0x810>
 8006e32:	9b08      	ldr	r3, [sp, #32]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc36      	bgt.n	8006ea6 <_dtoa_r+0x99e>
 8006e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	dd33      	ble.n	8006ea6 <_dtoa_r+0x99e>
 8006e3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e42:	f1b9 0f00 	cmp.w	r9, #0
 8006e46:	d10d      	bne.n	8006e64 <_dtoa_r+0x95c>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 facc 	bl	80073ec <__multadd>
 8006e54:	4601      	mov	r1, r0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4658      	mov	r0, fp
 8006e5a:	f000 fce3 	bl	8007824 <__mcmp>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f73f adb8 	bgt.w	80069d4 <_dtoa_r+0x4cc>
 8006e64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e66:	9f03      	ldr	r7, [sp, #12]
 8006e68:	ea6f 0a03 	mvn.w	sl, r3
 8006e6c:	f04f 0800 	mov.w	r8, #0
 8006e70:	4621      	mov	r1, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 fa98 	bl	80073a8 <_Bfree>
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	f43f aea7 	beq.w	8006bcc <_dtoa_r+0x6c4>
 8006e7e:	f1b8 0f00 	cmp.w	r8, #0
 8006e82:	d005      	beq.n	8006e90 <_dtoa_r+0x988>
 8006e84:	45b0      	cmp	r8, r6
 8006e86:	d003      	beq.n	8006e90 <_dtoa_r+0x988>
 8006e88:	4641      	mov	r1, r8
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 fa8c 	bl	80073a8 <_Bfree>
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 fa88 	bl	80073a8 <_Bfree>
 8006e98:	e698      	b.n	8006bcc <_dtoa_r+0x6c4>
 8006e9a:	2400      	movs	r4, #0
 8006e9c:	4626      	mov	r6, r4
 8006e9e:	e7e1      	b.n	8006e64 <_dtoa_r+0x95c>
 8006ea0:	46c2      	mov	sl, r8
 8006ea2:	4626      	mov	r6, r4
 8006ea4:	e596      	b.n	80069d4 <_dtoa_r+0x4cc>
 8006ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80fd 	beq.w	80070ac <_dtoa_r+0xba4>
 8006eb2:	2f00      	cmp	r7, #0
 8006eb4:	dd05      	ble.n	8006ec2 <_dtoa_r+0x9ba>
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	463a      	mov	r2, r7
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f000 fc42 	bl	8007744 <__lshift>
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	f1b8 0f00 	cmp.w	r8, #0
 8006ec6:	d05c      	beq.n	8006f82 <_dtoa_r+0xa7a>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	6871      	ldr	r1, [r6, #4]
 8006ecc:	f000 fa2c 	bl	8007328 <_Balloc>
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	b928      	cbnz	r0, 8006ee0 <_dtoa_r+0x9d8>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006eda:	4b7f      	ldr	r3, [pc, #508]	; (80070d8 <_dtoa_r+0xbd0>)
 8006edc:	f7ff bb28 	b.w	8006530 <_dtoa_r+0x28>
 8006ee0:	6932      	ldr	r2, [r6, #16]
 8006ee2:	f106 010c 	add.w	r1, r6, #12
 8006ee6:	3202      	adds	r2, #2
 8006ee8:	0092      	lsls	r2, r2, #2
 8006eea:	300c      	adds	r0, #12
 8006eec:	f000 fa0e 	bl	800730c <memcpy>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 fc25 	bl	8007744 <__lshift>
 8006efa:	46b0      	mov	r8, r6
 8006efc:	4606      	mov	r6, r0
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	9308      	str	r3, [sp, #32]
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	444b      	add	r3, r9
 8006f08:	930a      	str	r3, [sp, #40]	; 0x28
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	9309      	str	r3, [sp, #36]	; 0x24
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	4621      	mov	r1, r4
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4658      	mov	r0, fp
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	f7ff fa68 	bl	80063f0 <quorem>
 8006f20:	4603      	mov	r3, r0
 8006f22:	4641      	mov	r1, r8
 8006f24:	3330      	adds	r3, #48	; 0x30
 8006f26:	9006      	str	r0, [sp, #24]
 8006f28:	4658      	mov	r0, fp
 8006f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f2c:	f000 fc7a 	bl	8007824 <__mcmp>
 8006f30:	4632      	mov	r2, r6
 8006f32:	4681      	mov	r9, r0
 8006f34:	4621      	mov	r1, r4
 8006f36:	4628      	mov	r0, r5
 8006f38:	f000 fc90 	bl	800785c <__mdiff>
 8006f3c:	68c2      	ldr	r2, [r0, #12]
 8006f3e:	4607      	mov	r7, r0
 8006f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f42:	bb02      	cbnz	r2, 8006f86 <_dtoa_r+0xa7e>
 8006f44:	4601      	mov	r1, r0
 8006f46:	4658      	mov	r0, fp
 8006f48:	f000 fc6c 	bl	8007824 <__mcmp>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f50:	4639      	mov	r1, r7
 8006f52:	4628      	mov	r0, r5
 8006f54:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006f58:	f000 fa26 	bl	80073a8 <_Bfree>
 8006f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f60:	9f08      	ldr	r7, [sp, #32]
 8006f62:	ea43 0102 	orr.w	r1, r3, r2
 8006f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f6c:	d10d      	bne.n	8006f8a <_dtoa_r+0xa82>
 8006f6e:	2b39      	cmp	r3, #57	; 0x39
 8006f70:	d029      	beq.n	8006fc6 <_dtoa_r+0xabe>
 8006f72:	f1b9 0f00 	cmp.w	r9, #0
 8006f76:	dd01      	ble.n	8006f7c <_dtoa_r+0xa74>
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	3331      	adds	r3, #49	; 0x31
 8006f7c:	9a04      	ldr	r2, [sp, #16]
 8006f7e:	7013      	strb	r3, [r2, #0]
 8006f80:	e776      	b.n	8006e70 <_dtoa_r+0x968>
 8006f82:	4630      	mov	r0, r6
 8006f84:	e7b9      	b.n	8006efa <_dtoa_r+0x9f2>
 8006f86:	2201      	movs	r2, #1
 8006f88:	e7e2      	b.n	8006f50 <_dtoa_r+0xa48>
 8006f8a:	f1b9 0f00 	cmp.w	r9, #0
 8006f8e:	db06      	blt.n	8006f9e <_dtoa_r+0xa96>
 8006f90:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f92:	ea41 0909 	orr.w	r9, r1, r9
 8006f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f98:	ea59 0101 	orrs.w	r1, r9, r1
 8006f9c:	d120      	bne.n	8006fe0 <_dtoa_r+0xad8>
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	ddec      	ble.n	8006f7c <_dtoa_r+0xa74>
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	f000 fbcb 	bl	8007744 <__lshift>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4683      	mov	fp, r0
 8006fb2:	f000 fc37 	bl	8007824 <__mcmp>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	9b08      	ldr	r3, [sp, #32]
 8006fba:	dc02      	bgt.n	8006fc2 <_dtoa_r+0xaba>
 8006fbc:	d1de      	bne.n	8006f7c <_dtoa_r+0xa74>
 8006fbe:	07da      	lsls	r2, r3, #31
 8006fc0:	d5dc      	bpl.n	8006f7c <_dtoa_r+0xa74>
 8006fc2:	2b39      	cmp	r3, #57	; 0x39
 8006fc4:	d1d8      	bne.n	8006f78 <_dtoa_r+0xa70>
 8006fc6:	2339      	movs	r3, #57	; 0x39
 8006fc8:	9a04      	ldr	r2, [sp, #16]
 8006fca:	7013      	strb	r3, [r2, #0]
 8006fcc:	463b      	mov	r3, r7
 8006fce:	461f      	mov	r7, r3
 8006fd0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	2a39      	cmp	r2, #57	; 0x39
 8006fd8:	d050      	beq.n	800707c <_dtoa_r+0xb74>
 8006fda:	3201      	adds	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e747      	b.n	8006e70 <_dtoa_r+0x968>
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	dd03      	ble.n	8006fec <_dtoa_r+0xae4>
 8006fe4:	2b39      	cmp	r3, #57	; 0x39
 8006fe6:	d0ee      	beq.n	8006fc6 <_dtoa_r+0xabe>
 8006fe8:	3301      	adds	r3, #1
 8006fea:	e7c7      	b.n	8006f7c <_dtoa_r+0xa74>
 8006fec:	9a08      	ldr	r2, [sp, #32]
 8006fee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ff0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ff4:	428a      	cmp	r2, r1
 8006ff6:	d02a      	beq.n	800704e <_dtoa_r+0xb46>
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 f9f4 	bl	80073ec <__multadd>
 8007004:	45b0      	cmp	r8, r6
 8007006:	4683      	mov	fp, r0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	f04f 020a 	mov.w	r2, #10
 8007010:	4641      	mov	r1, r8
 8007012:	4628      	mov	r0, r5
 8007014:	d107      	bne.n	8007026 <_dtoa_r+0xb1e>
 8007016:	f000 f9e9 	bl	80073ec <__multadd>
 800701a:	4680      	mov	r8, r0
 800701c:	4606      	mov	r6, r0
 800701e:	9b08      	ldr	r3, [sp, #32]
 8007020:	3301      	adds	r3, #1
 8007022:	9308      	str	r3, [sp, #32]
 8007024:	e775      	b.n	8006f12 <_dtoa_r+0xa0a>
 8007026:	f000 f9e1 	bl	80073ec <__multadd>
 800702a:	4631      	mov	r1, r6
 800702c:	4680      	mov	r8, r0
 800702e:	2300      	movs	r3, #0
 8007030:	220a      	movs	r2, #10
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f9da 	bl	80073ec <__multadd>
 8007038:	4606      	mov	r6, r0
 800703a:	e7f0      	b.n	800701e <_dtoa_r+0xb16>
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	bfcc      	ite	gt
 8007042:	464f      	movgt	r7, r9
 8007044:	2701      	movle	r7, #1
 8007046:	f04f 0800 	mov.w	r8, #0
 800704a:	9a03      	ldr	r2, [sp, #12]
 800704c:	4417      	add	r7, r2
 800704e:	4659      	mov	r1, fp
 8007050:	2201      	movs	r2, #1
 8007052:	4628      	mov	r0, r5
 8007054:	9308      	str	r3, [sp, #32]
 8007056:	f000 fb75 	bl	8007744 <__lshift>
 800705a:	4621      	mov	r1, r4
 800705c:	4683      	mov	fp, r0
 800705e:	f000 fbe1 	bl	8007824 <__mcmp>
 8007062:	2800      	cmp	r0, #0
 8007064:	dcb2      	bgt.n	8006fcc <_dtoa_r+0xac4>
 8007066:	d102      	bne.n	800706e <_dtoa_r+0xb66>
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	07db      	lsls	r3, r3, #31
 800706c:	d4ae      	bmi.n	8006fcc <_dtoa_r+0xac4>
 800706e:	463b      	mov	r3, r7
 8007070:	461f      	mov	r7, r3
 8007072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007076:	2a30      	cmp	r2, #48	; 0x30
 8007078:	d0fa      	beq.n	8007070 <_dtoa_r+0xb68>
 800707a:	e6f9      	b.n	8006e70 <_dtoa_r+0x968>
 800707c:	9a03      	ldr	r2, [sp, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d1a5      	bne.n	8006fce <_dtoa_r+0xac6>
 8007082:	2331      	movs	r3, #49	; 0x31
 8007084:	f10a 0a01 	add.w	sl, sl, #1
 8007088:	e779      	b.n	8006f7e <_dtoa_r+0xa76>
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <_dtoa_r+0xbd4>)
 800708c:	f7ff baa8 	b.w	80065e0 <_dtoa_r+0xd8>
 8007090:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007092:	2b00      	cmp	r3, #0
 8007094:	f47f aa81 	bne.w	800659a <_dtoa_r+0x92>
 8007098:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <_dtoa_r+0xbd8>)
 800709a:	f7ff baa1 	b.w	80065e0 <_dtoa_r+0xd8>
 800709e:	f1b9 0f00 	cmp.w	r9, #0
 80070a2:	dc03      	bgt.n	80070ac <_dtoa_r+0xba4>
 80070a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	f73f aecb 	bgt.w	8006e42 <_dtoa_r+0x93a>
 80070ac:	9f03      	ldr	r7, [sp, #12]
 80070ae:	4621      	mov	r1, r4
 80070b0:	4658      	mov	r0, fp
 80070b2:	f7ff f99d 	bl	80063f0 <quorem>
 80070b6:	9a03      	ldr	r2, [sp, #12]
 80070b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80070bc:	f807 3b01 	strb.w	r3, [r7], #1
 80070c0:	1aba      	subs	r2, r7, r2
 80070c2:	4591      	cmp	r9, r2
 80070c4:	ddba      	ble.n	800703c <_dtoa_r+0xb34>
 80070c6:	4659      	mov	r1, fp
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f98d 	bl	80073ec <__multadd>
 80070d2:	4683      	mov	fp, r0
 80070d4:	e7eb      	b.n	80070ae <_dtoa_r+0xba6>
 80070d6:	bf00      	nop
 80070d8:	0800874b 	.word	0x0800874b
 80070dc:	080086a8 	.word	0x080086a8
 80070e0:	080086cc 	.word	0x080086cc

080070e4 <std>:
 80070e4:	2300      	movs	r3, #0
 80070e6:	b510      	push	{r4, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	e9c0 3300 	strd	r3, r3, [r0]
 80070ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070f2:	6083      	str	r3, [r0, #8]
 80070f4:	8181      	strh	r1, [r0, #12]
 80070f6:	6643      	str	r3, [r0, #100]	; 0x64
 80070f8:	81c2      	strh	r2, [r0, #14]
 80070fa:	6183      	str	r3, [r0, #24]
 80070fc:	4619      	mov	r1, r3
 80070fe:	2208      	movs	r2, #8
 8007100:	305c      	adds	r0, #92	; 0x5c
 8007102:	f7fe fcf5 	bl	8005af0 <memset>
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <std+0x38>)
 8007108:	6224      	str	r4, [r4, #32]
 800710a:	6263      	str	r3, [r4, #36]	; 0x24
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <std+0x3c>)
 800710e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <std+0x40>)
 8007112:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <std+0x44>)
 8007116:	6323      	str	r3, [r4, #48]	; 0x30
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	08007edd 	.word	0x08007edd
 8007120:	08007eff 	.word	0x08007eff
 8007124:	08007f37 	.word	0x08007f37
 8007128:	08007f5b 	.word	0x08007f5b

0800712c <_cleanup_r>:
 800712c:	4901      	ldr	r1, [pc, #4]	; (8007134 <_cleanup_r+0x8>)
 800712e:	f000 b8af 	b.w	8007290 <_fwalk_reent>
 8007132:	bf00      	nop
 8007134:	08008269 	.word	0x08008269

08007138 <__sfmoreglue>:
 8007138:	2268      	movs	r2, #104	; 0x68
 800713a:	b570      	push	{r4, r5, r6, lr}
 800713c:	1e4d      	subs	r5, r1, #1
 800713e:	4355      	muls	r5, r2
 8007140:	460e      	mov	r6, r1
 8007142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007146:	f000 fced 	bl	8007b24 <_malloc_r>
 800714a:	4604      	mov	r4, r0
 800714c:	b140      	cbz	r0, 8007160 <__sfmoreglue+0x28>
 800714e:	2100      	movs	r1, #0
 8007150:	e9c0 1600 	strd	r1, r6, [r0]
 8007154:	300c      	adds	r0, #12
 8007156:	60a0      	str	r0, [r4, #8]
 8007158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800715c:	f7fe fcc8 	bl	8005af0 <memset>
 8007160:	4620      	mov	r0, r4
 8007162:	bd70      	pop	{r4, r5, r6, pc}

08007164 <__sfp_lock_acquire>:
 8007164:	4801      	ldr	r0, [pc, #4]	; (800716c <__sfp_lock_acquire+0x8>)
 8007166:	f000 b8b8 	b.w	80072da <__retarget_lock_acquire_recursive>
 800716a:	bf00      	nop
 800716c:	200002a9 	.word	0x200002a9

08007170 <__sfp_lock_release>:
 8007170:	4801      	ldr	r0, [pc, #4]	; (8007178 <__sfp_lock_release+0x8>)
 8007172:	f000 b8b3 	b.w	80072dc <__retarget_lock_release_recursive>
 8007176:	bf00      	nop
 8007178:	200002a9 	.word	0x200002a9

0800717c <__sinit_lock_acquire>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__sinit_lock_acquire+0x8>)
 800717e:	f000 b8ac 	b.w	80072da <__retarget_lock_acquire_recursive>
 8007182:	bf00      	nop
 8007184:	200002aa 	.word	0x200002aa

08007188 <__sinit_lock_release>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__sinit_lock_release+0x8>)
 800718a:	f000 b8a7 	b.w	80072dc <__retarget_lock_release_recursive>
 800718e:	bf00      	nop
 8007190:	200002aa 	.word	0x200002aa

08007194 <__sinit>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	f7ff fff0 	bl	800717c <__sinit_lock_acquire>
 800719c:	69a3      	ldr	r3, [r4, #24]
 800719e:	b11b      	cbz	r3, 80071a8 <__sinit+0x14>
 80071a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a4:	f7ff bff0 	b.w	8007188 <__sinit_lock_release>
 80071a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071ac:	6523      	str	r3, [r4, #80]	; 0x50
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <__sinit+0x68>)
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <__sinit+0x6c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	bf08      	it	eq
 80071ba:	2301      	moveq	r3, #1
 80071bc:	4620      	mov	r0, r4
 80071be:	bf08      	it	eq
 80071c0:	61a3      	streq	r3, [r4, #24]
 80071c2:	f000 f81f 	bl	8007204 <__sfp>
 80071c6:	6060      	str	r0, [r4, #4]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 f81b 	bl	8007204 <__sfp>
 80071ce:	60a0      	str	r0, [r4, #8]
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f817 	bl	8007204 <__sfp>
 80071d6:	2200      	movs	r2, #0
 80071d8:	2104      	movs	r1, #4
 80071da:	60e0      	str	r0, [r4, #12]
 80071dc:	6860      	ldr	r0, [r4, #4]
 80071de:	f7ff ff81 	bl	80070e4 <std>
 80071e2:	2201      	movs	r2, #1
 80071e4:	2109      	movs	r1, #9
 80071e6:	68a0      	ldr	r0, [r4, #8]
 80071e8:	f7ff ff7c 	bl	80070e4 <std>
 80071ec:	2202      	movs	r2, #2
 80071ee:	2112      	movs	r1, #18
 80071f0:	68e0      	ldr	r0, [r4, #12]
 80071f2:	f7ff ff77 	bl	80070e4 <std>
 80071f6:	2301      	movs	r3, #1
 80071f8:	61a3      	str	r3, [r4, #24]
 80071fa:	e7d1      	b.n	80071a0 <__sinit+0xc>
 80071fc:	08008694 	.word	0x08008694
 8007200:	0800712d 	.word	0x0800712d

08007204 <__sfp>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	4607      	mov	r7, r0
 8007208:	f7ff ffac 	bl	8007164 <__sfp_lock_acquire>
 800720c:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <__sfp+0x84>)
 800720e:	681e      	ldr	r6, [r3, #0]
 8007210:	69b3      	ldr	r3, [r6, #24]
 8007212:	b913      	cbnz	r3, 800721a <__sfp+0x16>
 8007214:	4630      	mov	r0, r6
 8007216:	f7ff ffbd 	bl	8007194 <__sinit>
 800721a:	3648      	adds	r6, #72	; 0x48
 800721c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007220:	3b01      	subs	r3, #1
 8007222:	d503      	bpl.n	800722c <__sfp+0x28>
 8007224:	6833      	ldr	r3, [r6, #0]
 8007226:	b30b      	cbz	r3, 800726c <__sfp+0x68>
 8007228:	6836      	ldr	r6, [r6, #0]
 800722a:	e7f7      	b.n	800721c <__sfp+0x18>
 800722c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007230:	b9d5      	cbnz	r5, 8007268 <__sfp+0x64>
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <__sfp+0x88>)
 8007234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007238:	60e3      	str	r3, [r4, #12]
 800723a:	6665      	str	r5, [r4, #100]	; 0x64
 800723c:	f000 f84c 	bl	80072d8 <__retarget_lock_init_recursive>
 8007240:	f7ff ff96 	bl	8007170 <__sfp_lock_release>
 8007244:	2208      	movs	r2, #8
 8007246:	4629      	mov	r1, r5
 8007248:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800724c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007250:	6025      	str	r5, [r4, #0]
 8007252:	61a5      	str	r5, [r4, #24]
 8007254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007258:	f7fe fc4a 	bl	8005af0 <memset>
 800725c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007264:	4620      	mov	r0, r4
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007268:	3468      	adds	r4, #104	; 0x68
 800726a:	e7d9      	b.n	8007220 <__sfp+0x1c>
 800726c:	2104      	movs	r1, #4
 800726e:	4638      	mov	r0, r7
 8007270:	f7ff ff62 	bl	8007138 <__sfmoreglue>
 8007274:	4604      	mov	r4, r0
 8007276:	6030      	str	r0, [r6, #0]
 8007278:	2800      	cmp	r0, #0
 800727a:	d1d5      	bne.n	8007228 <__sfp+0x24>
 800727c:	f7ff ff78 	bl	8007170 <__sfp_lock_release>
 8007280:	230c      	movs	r3, #12
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	e7ee      	b.n	8007264 <__sfp+0x60>
 8007286:	bf00      	nop
 8007288:	08008694 	.word	0x08008694
 800728c:	ffff0001 	.word	0xffff0001

08007290 <_fwalk_reent>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	4606      	mov	r6, r0
 8007296:	4688      	mov	r8, r1
 8007298:	2700      	movs	r7, #0
 800729a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800729e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072a2:	f1b9 0901 	subs.w	r9, r9, #1
 80072a6:	d505      	bpl.n	80072b4 <_fwalk_reent+0x24>
 80072a8:	6824      	ldr	r4, [r4, #0]
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	d1f7      	bne.n	800729e <_fwalk_reent+0xe>
 80072ae:	4638      	mov	r0, r7
 80072b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b4:	89ab      	ldrh	r3, [r5, #12]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d907      	bls.n	80072ca <_fwalk_reent+0x3a>
 80072ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072be:	3301      	adds	r3, #1
 80072c0:	d003      	beq.n	80072ca <_fwalk_reent+0x3a>
 80072c2:	4629      	mov	r1, r5
 80072c4:	4630      	mov	r0, r6
 80072c6:	47c0      	blx	r8
 80072c8:	4307      	orrs	r7, r0
 80072ca:	3568      	adds	r5, #104	; 0x68
 80072cc:	e7e9      	b.n	80072a2 <_fwalk_reent+0x12>
	...

080072d0 <_localeconv_r>:
 80072d0:	4800      	ldr	r0, [pc, #0]	; (80072d4 <_localeconv_r+0x4>)
 80072d2:	4770      	bx	lr
 80072d4:	20000160 	.word	0x20000160

080072d8 <__retarget_lock_init_recursive>:
 80072d8:	4770      	bx	lr

080072da <__retarget_lock_acquire_recursive>:
 80072da:	4770      	bx	lr

080072dc <__retarget_lock_release_recursive>:
 80072dc:	4770      	bx	lr
	...

080072e0 <malloc>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <malloc+0xc>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f000 bc1d 	b.w	8007b24 <_malloc_r>
 80072ea:	bf00      	nop
 80072ec:	2000000c 	.word	0x2000000c

080072f0 <memchr>:
 80072f0:	4603      	mov	r3, r0
 80072f2:	b510      	push	{r4, lr}
 80072f4:	b2c9      	uxtb	r1, r1
 80072f6:	4402      	add	r2, r0
 80072f8:	4293      	cmp	r3, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	d101      	bne.n	8007302 <memchr+0x12>
 80072fe:	2000      	movs	r0, #0
 8007300:	e003      	b.n	800730a <memchr+0x1a>
 8007302:	7804      	ldrb	r4, [r0, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	428c      	cmp	r4, r1
 8007308:	d1f6      	bne.n	80072f8 <memchr+0x8>
 800730a:	bd10      	pop	{r4, pc}

0800730c <memcpy>:
 800730c:	440a      	add	r2, r1
 800730e:	4291      	cmp	r1, r2
 8007310:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007314:	d100      	bne.n	8007318 <memcpy+0xc>
 8007316:	4770      	bx	lr
 8007318:	b510      	push	{r4, lr}
 800731a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731e:	4291      	cmp	r1, r2
 8007320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007324:	d1f9      	bne.n	800731a <memcpy+0xe>
 8007326:	bd10      	pop	{r4, pc}

08007328 <_Balloc>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	b976      	cbnz	r6, 8007350 <_Balloc+0x28>
 8007332:	2010      	movs	r0, #16
 8007334:	f7ff ffd4 	bl	80072e0 <malloc>
 8007338:	4602      	mov	r2, r0
 800733a:	6260      	str	r0, [r4, #36]	; 0x24
 800733c:	b920      	cbnz	r0, 8007348 <_Balloc+0x20>
 800733e:	2166      	movs	r1, #102	; 0x66
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <_Balloc+0x78>)
 8007342:	4818      	ldr	r0, [pc, #96]	; (80073a4 <_Balloc+0x7c>)
 8007344:	f000 fee0 	bl	8008108 <__assert_func>
 8007348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800734c:	6006      	str	r6, [r0, #0]
 800734e:	60c6      	str	r6, [r0, #12]
 8007350:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007352:	68f3      	ldr	r3, [r6, #12]
 8007354:	b183      	cbz	r3, 8007378 <_Balloc+0x50>
 8007356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800735e:	b9b8      	cbnz	r0, 8007390 <_Balloc+0x68>
 8007360:	2101      	movs	r1, #1
 8007362:	fa01 f605 	lsl.w	r6, r1, r5
 8007366:	1d72      	adds	r2, r6, #5
 8007368:	4620      	mov	r0, r4
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	f000 fb5e 	bl	8007a2c <_calloc_r>
 8007370:	b160      	cbz	r0, 800738c <_Balloc+0x64>
 8007372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007376:	e00e      	b.n	8007396 <_Balloc+0x6e>
 8007378:	2221      	movs	r2, #33	; 0x21
 800737a:	2104      	movs	r1, #4
 800737c:	4620      	mov	r0, r4
 800737e:	f000 fb55 	bl	8007a2c <_calloc_r>
 8007382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007384:	60f0      	str	r0, [r6, #12]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e4      	bne.n	8007356 <_Balloc+0x2e>
 800738c:	2000      	movs	r0, #0
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	6802      	ldr	r2, [r0, #0]
 8007392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007396:	2300      	movs	r3, #0
 8007398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800739c:	e7f7      	b.n	800738e <_Balloc+0x66>
 800739e:	bf00      	nop
 80073a0:	080086d9 	.word	0x080086d9
 80073a4:	080087bc 	.word	0x080087bc

080073a8 <_Bfree>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073ac:	4605      	mov	r5, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	b976      	cbnz	r6, 80073d0 <_Bfree+0x28>
 80073b2:	2010      	movs	r0, #16
 80073b4:	f7ff ff94 	bl	80072e0 <malloc>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6268      	str	r0, [r5, #36]	; 0x24
 80073bc:	b920      	cbnz	r0, 80073c8 <_Bfree+0x20>
 80073be:	218a      	movs	r1, #138	; 0x8a
 80073c0:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <_Bfree+0x3c>)
 80073c2:	4809      	ldr	r0, [pc, #36]	; (80073e8 <_Bfree+0x40>)
 80073c4:	f000 fea0 	bl	8008108 <__assert_func>
 80073c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073cc:	6006      	str	r6, [r0, #0]
 80073ce:	60c6      	str	r6, [r0, #12]
 80073d0:	b13c      	cbz	r4, 80073e2 <_Bfree+0x3a>
 80073d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073d4:	6862      	ldr	r2, [r4, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073dc:	6021      	str	r1, [r4, #0]
 80073de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	080086d9 	.word	0x080086d9
 80073e8:	080087bc 	.word	0x080087bc

080073ec <__multadd>:
 80073ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	4607      	mov	r7, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	461e      	mov	r6, r3
 80073f6:	2000      	movs	r0, #0
 80073f8:	690d      	ldr	r5, [r1, #16]
 80073fa:	f101 0c14 	add.w	ip, r1, #20
 80073fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007402:	3001      	adds	r0, #1
 8007404:	b299      	uxth	r1, r3
 8007406:	fb02 6101 	mla	r1, r2, r1, r6
 800740a:	0c1e      	lsrs	r6, r3, #16
 800740c:	0c0b      	lsrs	r3, r1, #16
 800740e:	fb02 3306 	mla	r3, r2, r6, r3
 8007412:	b289      	uxth	r1, r1
 8007414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007418:	4285      	cmp	r5, r0
 800741a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800741e:	f84c 1b04 	str.w	r1, [ip], #4
 8007422:	dcec      	bgt.n	80073fe <__multadd+0x12>
 8007424:	b30e      	cbz	r6, 800746a <__multadd+0x7e>
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	42ab      	cmp	r3, r5
 800742a:	dc19      	bgt.n	8007460 <__multadd+0x74>
 800742c:	6861      	ldr	r1, [r4, #4]
 800742e:	4638      	mov	r0, r7
 8007430:	3101      	adds	r1, #1
 8007432:	f7ff ff79 	bl	8007328 <_Balloc>
 8007436:	4680      	mov	r8, r0
 8007438:	b928      	cbnz	r0, 8007446 <__multadd+0x5a>
 800743a:	4602      	mov	r2, r0
 800743c:	21b5      	movs	r1, #181	; 0xb5
 800743e:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <__multadd+0x84>)
 8007440:	480c      	ldr	r0, [pc, #48]	; (8007474 <__multadd+0x88>)
 8007442:	f000 fe61 	bl	8008108 <__assert_func>
 8007446:	6922      	ldr	r2, [r4, #16]
 8007448:	f104 010c 	add.w	r1, r4, #12
 800744c:	3202      	adds	r2, #2
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	300c      	adds	r0, #12
 8007452:	f7ff ff5b 	bl	800730c <memcpy>
 8007456:	4621      	mov	r1, r4
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff ffa5 	bl	80073a8 <_Bfree>
 800745e:	4644      	mov	r4, r8
 8007460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007464:	3501      	adds	r5, #1
 8007466:	615e      	str	r6, [r3, #20]
 8007468:	6125      	str	r5, [r4, #16]
 800746a:	4620      	mov	r0, r4
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007470:	0800874b 	.word	0x0800874b
 8007474:	080087bc 	.word	0x080087bc

08007478 <__hi0bits>:
 8007478:	0c02      	lsrs	r2, r0, #16
 800747a:	0412      	lsls	r2, r2, #16
 800747c:	4603      	mov	r3, r0
 800747e:	b9ca      	cbnz	r2, 80074b4 <__hi0bits+0x3c>
 8007480:	0403      	lsls	r3, r0, #16
 8007482:	2010      	movs	r0, #16
 8007484:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007488:	bf04      	itt	eq
 800748a:	021b      	lsleq	r3, r3, #8
 800748c:	3008      	addeq	r0, #8
 800748e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007492:	bf04      	itt	eq
 8007494:	011b      	lsleq	r3, r3, #4
 8007496:	3004      	addeq	r0, #4
 8007498:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800749c:	bf04      	itt	eq
 800749e:	009b      	lsleq	r3, r3, #2
 80074a0:	3002      	addeq	r0, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	db05      	blt.n	80074b2 <__hi0bits+0x3a>
 80074a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80074aa:	f100 0001 	add.w	r0, r0, #1
 80074ae:	bf08      	it	eq
 80074b0:	2020      	moveq	r0, #32
 80074b2:	4770      	bx	lr
 80074b4:	2000      	movs	r0, #0
 80074b6:	e7e5      	b.n	8007484 <__hi0bits+0xc>

080074b8 <__lo0bits>:
 80074b8:	6803      	ldr	r3, [r0, #0]
 80074ba:	4602      	mov	r2, r0
 80074bc:	f013 0007 	ands.w	r0, r3, #7
 80074c0:	d00b      	beq.n	80074da <__lo0bits+0x22>
 80074c2:	07d9      	lsls	r1, r3, #31
 80074c4:	d421      	bmi.n	800750a <__lo0bits+0x52>
 80074c6:	0798      	lsls	r0, r3, #30
 80074c8:	bf49      	itett	mi
 80074ca:	085b      	lsrmi	r3, r3, #1
 80074cc:	089b      	lsrpl	r3, r3, #2
 80074ce:	2001      	movmi	r0, #1
 80074d0:	6013      	strmi	r3, [r2, #0]
 80074d2:	bf5c      	itt	pl
 80074d4:	2002      	movpl	r0, #2
 80074d6:	6013      	strpl	r3, [r2, #0]
 80074d8:	4770      	bx	lr
 80074da:	b299      	uxth	r1, r3
 80074dc:	b909      	cbnz	r1, 80074e2 <__lo0bits+0x2a>
 80074de:	2010      	movs	r0, #16
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	b2d9      	uxtb	r1, r3
 80074e4:	b909      	cbnz	r1, 80074ea <__lo0bits+0x32>
 80074e6:	3008      	adds	r0, #8
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	0719      	lsls	r1, r3, #28
 80074ec:	bf04      	itt	eq
 80074ee:	091b      	lsreq	r3, r3, #4
 80074f0:	3004      	addeq	r0, #4
 80074f2:	0799      	lsls	r1, r3, #30
 80074f4:	bf04      	itt	eq
 80074f6:	089b      	lsreq	r3, r3, #2
 80074f8:	3002      	addeq	r0, #2
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d403      	bmi.n	8007506 <__lo0bits+0x4e>
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	f100 0001 	add.w	r0, r0, #1
 8007504:	d003      	beq.n	800750e <__lo0bits+0x56>
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	4770      	bx	lr
 800750a:	2000      	movs	r0, #0
 800750c:	4770      	bx	lr
 800750e:	2020      	movs	r0, #32
 8007510:	4770      	bx	lr
	...

08007514 <__i2b>:
 8007514:	b510      	push	{r4, lr}
 8007516:	460c      	mov	r4, r1
 8007518:	2101      	movs	r1, #1
 800751a:	f7ff ff05 	bl	8007328 <_Balloc>
 800751e:	4602      	mov	r2, r0
 8007520:	b928      	cbnz	r0, 800752e <__i2b+0x1a>
 8007522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007526:	4b04      	ldr	r3, [pc, #16]	; (8007538 <__i2b+0x24>)
 8007528:	4804      	ldr	r0, [pc, #16]	; (800753c <__i2b+0x28>)
 800752a:	f000 fded 	bl	8008108 <__assert_func>
 800752e:	2301      	movs	r3, #1
 8007530:	6144      	str	r4, [r0, #20]
 8007532:	6103      	str	r3, [r0, #16]
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	0800874b 	.word	0x0800874b
 800753c:	080087bc 	.word	0x080087bc

08007540 <__multiply>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	4691      	mov	r9, r2
 8007546:	690a      	ldr	r2, [r1, #16]
 8007548:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800754c:	460c      	mov	r4, r1
 800754e:	429a      	cmp	r2, r3
 8007550:	bfbe      	ittt	lt
 8007552:	460b      	movlt	r3, r1
 8007554:	464c      	movlt	r4, r9
 8007556:	4699      	movlt	r9, r3
 8007558:	6927      	ldr	r7, [r4, #16]
 800755a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800755e:	68a3      	ldr	r3, [r4, #8]
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	eb07 060a 	add.w	r6, r7, sl
 8007566:	42b3      	cmp	r3, r6
 8007568:	b085      	sub	sp, #20
 800756a:	bfb8      	it	lt
 800756c:	3101      	addlt	r1, #1
 800756e:	f7ff fedb 	bl	8007328 <_Balloc>
 8007572:	b930      	cbnz	r0, 8007582 <__multiply+0x42>
 8007574:	4602      	mov	r2, r0
 8007576:	f240 115d 	movw	r1, #349	; 0x15d
 800757a:	4b43      	ldr	r3, [pc, #268]	; (8007688 <__multiply+0x148>)
 800757c:	4843      	ldr	r0, [pc, #268]	; (800768c <__multiply+0x14c>)
 800757e:	f000 fdc3 	bl	8008108 <__assert_func>
 8007582:	f100 0514 	add.w	r5, r0, #20
 8007586:	462b      	mov	r3, r5
 8007588:	2200      	movs	r2, #0
 800758a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800758e:	4543      	cmp	r3, r8
 8007590:	d321      	bcc.n	80075d6 <__multiply+0x96>
 8007592:	f104 0314 	add.w	r3, r4, #20
 8007596:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800759a:	f109 0314 	add.w	r3, r9, #20
 800759e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075a2:	9202      	str	r2, [sp, #8]
 80075a4:	1b3a      	subs	r2, r7, r4
 80075a6:	3a15      	subs	r2, #21
 80075a8:	f022 0203 	bic.w	r2, r2, #3
 80075ac:	3204      	adds	r2, #4
 80075ae:	f104 0115 	add.w	r1, r4, #21
 80075b2:	428f      	cmp	r7, r1
 80075b4:	bf38      	it	cc
 80075b6:	2204      	movcc	r2, #4
 80075b8:	9201      	str	r2, [sp, #4]
 80075ba:	9a02      	ldr	r2, [sp, #8]
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d80c      	bhi.n	80075dc <__multiply+0x9c>
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	dd03      	ble.n	80075ce <__multiply+0x8e>
 80075c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d059      	beq.n	8007682 <__multiply+0x142>
 80075ce:	6106      	str	r6, [r0, #16]
 80075d0:	b005      	add	sp, #20
 80075d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d6:	f843 2b04 	str.w	r2, [r3], #4
 80075da:	e7d8      	b.n	800758e <__multiply+0x4e>
 80075dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80075e0:	f1ba 0f00 	cmp.w	sl, #0
 80075e4:	d023      	beq.n	800762e <__multiply+0xee>
 80075e6:	46a9      	mov	r9, r5
 80075e8:	f04f 0c00 	mov.w	ip, #0
 80075ec:	f104 0e14 	add.w	lr, r4, #20
 80075f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075f4:	f8d9 1000 	ldr.w	r1, [r9]
 80075f8:	fa1f fb82 	uxth.w	fp, r2
 80075fc:	b289      	uxth	r1, r1
 80075fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8007602:	4461      	add	r1, ip
 8007604:	f8d9 c000 	ldr.w	ip, [r9]
 8007608:	0c12      	lsrs	r2, r2, #16
 800760a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800760e:	fb0a c202 	mla	r2, sl, r2, ip
 8007612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007616:	b289      	uxth	r1, r1
 8007618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800761c:	4577      	cmp	r7, lr
 800761e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007622:	f849 1b04 	str.w	r1, [r9], #4
 8007626:	d8e3      	bhi.n	80075f0 <__multiply+0xb0>
 8007628:	9a01      	ldr	r2, [sp, #4]
 800762a:	f845 c002 	str.w	ip, [r5, r2]
 800762e:	9a03      	ldr	r2, [sp, #12]
 8007630:	3304      	adds	r3, #4
 8007632:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007636:	f1b9 0f00 	cmp.w	r9, #0
 800763a:	d020      	beq.n	800767e <__multiply+0x13e>
 800763c:	46ae      	mov	lr, r5
 800763e:	f04f 0a00 	mov.w	sl, #0
 8007642:	6829      	ldr	r1, [r5, #0]
 8007644:	f104 0c14 	add.w	ip, r4, #20
 8007648:	f8bc b000 	ldrh.w	fp, [ip]
 800764c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007650:	b289      	uxth	r1, r1
 8007652:	fb09 220b 	mla	r2, r9, fp, r2
 8007656:	4492      	add	sl, r2
 8007658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800765c:	f84e 1b04 	str.w	r1, [lr], #4
 8007660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007664:	f8be 1000 	ldrh.w	r1, [lr]
 8007668:	0c12      	lsrs	r2, r2, #16
 800766a:	fb09 1102 	mla	r1, r9, r2, r1
 800766e:	4567      	cmp	r7, ip
 8007670:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007678:	d8e6      	bhi.n	8007648 <__multiply+0x108>
 800767a:	9a01      	ldr	r2, [sp, #4]
 800767c:	50a9      	str	r1, [r5, r2]
 800767e:	3504      	adds	r5, #4
 8007680:	e79b      	b.n	80075ba <__multiply+0x7a>
 8007682:	3e01      	subs	r6, #1
 8007684:	e79d      	b.n	80075c2 <__multiply+0x82>
 8007686:	bf00      	nop
 8007688:	0800874b 	.word	0x0800874b
 800768c:	080087bc 	.word	0x080087bc

08007690 <__pow5mult>:
 8007690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007694:	4615      	mov	r5, r2
 8007696:	f012 0203 	ands.w	r2, r2, #3
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	d007      	beq.n	80076b0 <__pow5mult+0x20>
 80076a0:	4c25      	ldr	r4, [pc, #148]	; (8007738 <__pow5mult+0xa8>)
 80076a2:	3a01      	subs	r2, #1
 80076a4:	2300      	movs	r3, #0
 80076a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076aa:	f7ff fe9f 	bl	80073ec <__multadd>
 80076ae:	4607      	mov	r7, r0
 80076b0:	10ad      	asrs	r5, r5, #2
 80076b2:	d03d      	beq.n	8007730 <__pow5mult+0xa0>
 80076b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076b6:	b97c      	cbnz	r4, 80076d8 <__pow5mult+0x48>
 80076b8:	2010      	movs	r0, #16
 80076ba:	f7ff fe11 	bl	80072e0 <malloc>
 80076be:	4602      	mov	r2, r0
 80076c0:	6270      	str	r0, [r6, #36]	; 0x24
 80076c2:	b928      	cbnz	r0, 80076d0 <__pow5mult+0x40>
 80076c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076c8:	4b1c      	ldr	r3, [pc, #112]	; (800773c <__pow5mult+0xac>)
 80076ca:	481d      	ldr	r0, [pc, #116]	; (8007740 <__pow5mult+0xb0>)
 80076cc:	f000 fd1c 	bl	8008108 <__assert_func>
 80076d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076d4:	6004      	str	r4, [r0, #0]
 80076d6:	60c4      	str	r4, [r0, #12]
 80076d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076e0:	b94c      	cbnz	r4, 80076f6 <__pow5mult+0x66>
 80076e2:	f240 2171 	movw	r1, #625	; 0x271
 80076e6:	4630      	mov	r0, r6
 80076e8:	f7ff ff14 	bl	8007514 <__i2b>
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80076f4:	6003      	str	r3, [r0, #0]
 80076f6:	f04f 0900 	mov.w	r9, #0
 80076fa:	07eb      	lsls	r3, r5, #31
 80076fc:	d50a      	bpl.n	8007714 <__pow5mult+0x84>
 80076fe:	4639      	mov	r1, r7
 8007700:	4622      	mov	r2, r4
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff ff1c 	bl	8007540 <__multiply>
 8007708:	4680      	mov	r8, r0
 800770a:	4639      	mov	r1, r7
 800770c:	4630      	mov	r0, r6
 800770e:	f7ff fe4b 	bl	80073a8 <_Bfree>
 8007712:	4647      	mov	r7, r8
 8007714:	106d      	asrs	r5, r5, #1
 8007716:	d00b      	beq.n	8007730 <__pow5mult+0xa0>
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	b938      	cbnz	r0, 800772c <__pow5mult+0x9c>
 800771c:	4622      	mov	r2, r4
 800771e:	4621      	mov	r1, r4
 8007720:	4630      	mov	r0, r6
 8007722:	f7ff ff0d 	bl	8007540 <__multiply>
 8007726:	6020      	str	r0, [r4, #0]
 8007728:	f8c0 9000 	str.w	r9, [r0]
 800772c:	4604      	mov	r4, r0
 800772e:	e7e4      	b.n	80076fa <__pow5mult+0x6a>
 8007730:	4638      	mov	r0, r7
 8007732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007736:	bf00      	nop
 8007738:	08008908 	.word	0x08008908
 800773c:	080086d9 	.word	0x080086d9
 8007740:	080087bc 	.word	0x080087bc

08007744 <__lshift>:
 8007744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	460c      	mov	r4, r1
 800774a:	4607      	mov	r7, r0
 800774c:	4691      	mov	r9, r2
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	6849      	ldr	r1, [r1, #4]
 8007752:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800775c:	f108 0601 	add.w	r6, r8, #1
 8007760:	42b3      	cmp	r3, r6
 8007762:	db0b      	blt.n	800777c <__lshift+0x38>
 8007764:	4638      	mov	r0, r7
 8007766:	f7ff fddf 	bl	8007328 <_Balloc>
 800776a:	4605      	mov	r5, r0
 800776c:	b948      	cbnz	r0, 8007782 <__lshift+0x3e>
 800776e:	4602      	mov	r2, r0
 8007770:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007774:	4b29      	ldr	r3, [pc, #164]	; (800781c <__lshift+0xd8>)
 8007776:	482a      	ldr	r0, [pc, #168]	; (8007820 <__lshift+0xdc>)
 8007778:	f000 fcc6 	bl	8008108 <__assert_func>
 800777c:	3101      	adds	r1, #1
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	e7ee      	b.n	8007760 <__lshift+0x1c>
 8007782:	2300      	movs	r3, #0
 8007784:	f100 0114 	add.w	r1, r0, #20
 8007788:	f100 0210 	add.w	r2, r0, #16
 800778c:	4618      	mov	r0, r3
 800778e:	4553      	cmp	r3, sl
 8007790:	db37      	blt.n	8007802 <__lshift+0xbe>
 8007792:	6920      	ldr	r0, [r4, #16]
 8007794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007798:	f104 0314 	add.w	r3, r4, #20
 800779c:	f019 091f 	ands.w	r9, r9, #31
 80077a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077a8:	d02f      	beq.n	800780a <__lshift+0xc6>
 80077aa:	468a      	mov	sl, r1
 80077ac:	f04f 0c00 	mov.w	ip, #0
 80077b0:	f1c9 0e20 	rsb	lr, r9, #32
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	fa02 f209 	lsl.w	r2, r2, r9
 80077ba:	ea42 020c 	orr.w	r2, r2, ip
 80077be:	f84a 2b04 	str.w	r2, [sl], #4
 80077c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c6:	4298      	cmp	r0, r3
 80077c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80077cc:	d8f2      	bhi.n	80077b4 <__lshift+0x70>
 80077ce:	1b03      	subs	r3, r0, r4
 80077d0:	3b15      	subs	r3, #21
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	3304      	adds	r3, #4
 80077d8:	f104 0215 	add.w	r2, r4, #21
 80077dc:	4290      	cmp	r0, r2
 80077de:	bf38      	it	cc
 80077e0:	2304      	movcc	r3, #4
 80077e2:	f841 c003 	str.w	ip, [r1, r3]
 80077e6:	f1bc 0f00 	cmp.w	ip, #0
 80077ea:	d001      	beq.n	80077f0 <__lshift+0xac>
 80077ec:	f108 0602 	add.w	r6, r8, #2
 80077f0:	3e01      	subs	r6, #1
 80077f2:	4638      	mov	r0, r7
 80077f4:	4621      	mov	r1, r4
 80077f6:	612e      	str	r6, [r5, #16]
 80077f8:	f7ff fdd6 	bl	80073a8 <_Bfree>
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007802:	f842 0f04 	str.w	r0, [r2, #4]!
 8007806:	3301      	adds	r3, #1
 8007808:	e7c1      	b.n	800778e <__lshift+0x4a>
 800780a:	3904      	subs	r1, #4
 800780c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007810:	4298      	cmp	r0, r3
 8007812:	f841 2f04 	str.w	r2, [r1, #4]!
 8007816:	d8f9      	bhi.n	800780c <__lshift+0xc8>
 8007818:	e7ea      	b.n	80077f0 <__lshift+0xac>
 800781a:	bf00      	nop
 800781c:	0800874b 	.word	0x0800874b
 8007820:	080087bc 	.word	0x080087bc

08007824 <__mcmp>:
 8007824:	4603      	mov	r3, r0
 8007826:	690a      	ldr	r2, [r1, #16]
 8007828:	6900      	ldr	r0, [r0, #16]
 800782a:	b530      	push	{r4, r5, lr}
 800782c:	1a80      	subs	r0, r0, r2
 800782e:	d10d      	bne.n	800784c <__mcmp+0x28>
 8007830:	3314      	adds	r3, #20
 8007832:	3114      	adds	r1, #20
 8007834:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007838:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800783c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007840:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007844:	4295      	cmp	r5, r2
 8007846:	d002      	beq.n	800784e <__mcmp+0x2a>
 8007848:	d304      	bcc.n	8007854 <__mcmp+0x30>
 800784a:	2001      	movs	r0, #1
 800784c:	bd30      	pop	{r4, r5, pc}
 800784e:	42a3      	cmp	r3, r4
 8007850:	d3f4      	bcc.n	800783c <__mcmp+0x18>
 8007852:	e7fb      	b.n	800784c <__mcmp+0x28>
 8007854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007858:	e7f8      	b.n	800784c <__mcmp+0x28>
	...

0800785c <__mdiff>:
 800785c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	460d      	mov	r5, r1
 8007862:	4607      	mov	r7, r0
 8007864:	4611      	mov	r1, r2
 8007866:	4628      	mov	r0, r5
 8007868:	4614      	mov	r4, r2
 800786a:	f7ff ffdb 	bl	8007824 <__mcmp>
 800786e:	1e06      	subs	r6, r0, #0
 8007870:	d111      	bne.n	8007896 <__mdiff+0x3a>
 8007872:	4631      	mov	r1, r6
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff fd57 	bl	8007328 <_Balloc>
 800787a:	4602      	mov	r2, r0
 800787c:	b928      	cbnz	r0, 800788a <__mdiff+0x2e>
 800787e:	f240 2132 	movw	r1, #562	; 0x232
 8007882:	4b3a      	ldr	r3, [pc, #232]	; (800796c <__mdiff+0x110>)
 8007884:	483a      	ldr	r0, [pc, #232]	; (8007970 <__mdiff+0x114>)
 8007886:	f000 fc3f 	bl	8008108 <__assert_func>
 800788a:	2301      	movs	r3, #1
 800788c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007890:	4610      	mov	r0, r2
 8007892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	bfa4      	itt	ge
 8007898:	4623      	movge	r3, r4
 800789a:	462c      	movge	r4, r5
 800789c:	4638      	mov	r0, r7
 800789e:	6861      	ldr	r1, [r4, #4]
 80078a0:	bfa6      	itte	ge
 80078a2:	461d      	movge	r5, r3
 80078a4:	2600      	movge	r6, #0
 80078a6:	2601      	movlt	r6, #1
 80078a8:	f7ff fd3e 	bl	8007328 <_Balloc>
 80078ac:	4602      	mov	r2, r0
 80078ae:	b918      	cbnz	r0, 80078b8 <__mdiff+0x5c>
 80078b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078b4:	4b2d      	ldr	r3, [pc, #180]	; (800796c <__mdiff+0x110>)
 80078b6:	e7e5      	b.n	8007884 <__mdiff+0x28>
 80078b8:	f102 0814 	add.w	r8, r2, #20
 80078bc:	46c2      	mov	sl, r8
 80078be:	f04f 0c00 	mov.w	ip, #0
 80078c2:	6927      	ldr	r7, [r4, #16]
 80078c4:	60c6      	str	r6, [r0, #12]
 80078c6:	692e      	ldr	r6, [r5, #16]
 80078c8:	f104 0014 	add.w	r0, r4, #20
 80078cc:	f105 0914 	add.w	r9, r5, #20
 80078d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80078d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078d8:	3410      	adds	r4, #16
 80078da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80078de:	f859 3b04 	ldr.w	r3, [r9], #4
 80078e2:	fa1f f18b 	uxth.w	r1, fp
 80078e6:	448c      	add	ip, r1
 80078e8:	b299      	uxth	r1, r3
 80078ea:	0c1b      	lsrs	r3, r3, #16
 80078ec:	ebac 0101 	sub.w	r1, ip, r1
 80078f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078f8:	b289      	uxth	r1, r1
 80078fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80078fe:	454e      	cmp	r6, r9
 8007900:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007904:	f84a 3b04 	str.w	r3, [sl], #4
 8007908:	d8e7      	bhi.n	80078da <__mdiff+0x7e>
 800790a:	1b73      	subs	r3, r6, r5
 800790c:	3b15      	subs	r3, #21
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	3515      	adds	r5, #21
 8007914:	3304      	adds	r3, #4
 8007916:	42ae      	cmp	r6, r5
 8007918:	bf38      	it	cc
 800791a:	2304      	movcc	r3, #4
 800791c:	4418      	add	r0, r3
 800791e:	4443      	add	r3, r8
 8007920:	461e      	mov	r6, r3
 8007922:	4605      	mov	r5, r0
 8007924:	4575      	cmp	r5, lr
 8007926:	d30e      	bcc.n	8007946 <__mdiff+0xea>
 8007928:	f10e 0103 	add.w	r1, lr, #3
 800792c:	1a09      	subs	r1, r1, r0
 800792e:	f021 0103 	bic.w	r1, r1, #3
 8007932:	3803      	subs	r0, #3
 8007934:	4586      	cmp	lr, r0
 8007936:	bf38      	it	cc
 8007938:	2100      	movcc	r1, #0
 800793a:	4419      	add	r1, r3
 800793c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007940:	b18b      	cbz	r3, 8007966 <__mdiff+0x10a>
 8007942:	6117      	str	r7, [r2, #16]
 8007944:	e7a4      	b.n	8007890 <__mdiff+0x34>
 8007946:	f855 8b04 	ldr.w	r8, [r5], #4
 800794a:	fa1f f188 	uxth.w	r1, r8
 800794e:	4461      	add	r1, ip
 8007950:	140c      	asrs	r4, r1, #16
 8007952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007956:	b289      	uxth	r1, r1
 8007958:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800795c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007960:	f846 1b04 	str.w	r1, [r6], #4
 8007964:	e7de      	b.n	8007924 <__mdiff+0xc8>
 8007966:	3f01      	subs	r7, #1
 8007968:	e7e8      	b.n	800793c <__mdiff+0xe0>
 800796a:	bf00      	nop
 800796c:	0800874b 	.word	0x0800874b
 8007970:	080087bc 	.word	0x080087bc

08007974 <__d2b>:
 8007974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007978:	2101      	movs	r1, #1
 800797a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800797e:	4690      	mov	r8, r2
 8007980:	461d      	mov	r5, r3
 8007982:	f7ff fcd1 	bl	8007328 <_Balloc>
 8007986:	4604      	mov	r4, r0
 8007988:	b930      	cbnz	r0, 8007998 <__d2b+0x24>
 800798a:	4602      	mov	r2, r0
 800798c:	f240 310a 	movw	r1, #778	; 0x30a
 8007990:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <__d2b+0xb0>)
 8007992:	4825      	ldr	r0, [pc, #148]	; (8007a28 <__d2b+0xb4>)
 8007994:	f000 fbb8 	bl	8008108 <__assert_func>
 8007998:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800799c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80079a0:	bb2d      	cbnz	r5, 80079ee <__d2b+0x7a>
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	f1b8 0300 	subs.w	r3, r8, #0
 80079a8:	d026      	beq.n	80079f8 <__d2b+0x84>
 80079aa:	4668      	mov	r0, sp
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	f7ff fd83 	bl	80074b8 <__lo0bits>
 80079b2:	9900      	ldr	r1, [sp, #0]
 80079b4:	b1f0      	cbz	r0, 80079f4 <__d2b+0x80>
 80079b6:	9a01      	ldr	r2, [sp, #4]
 80079b8:	f1c0 0320 	rsb	r3, r0, #32
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	430b      	orrs	r3, r1
 80079c2:	40c2      	lsrs	r2, r0
 80079c4:	6163      	str	r3, [r4, #20]
 80079c6:	9201      	str	r2, [sp, #4]
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bf14      	ite	ne
 80079ce:	2102      	movne	r1, #2
 80079d0:	2101      	moveq	r1, #1
 80079d2:	61a3      	str	r3, [r4, #24]
 80079d4:	6121      	str	r1, [r4, #16]
 80079d6:	b1c5      	cbz	r5, 8007a0a <__d2b+0x96>
 80079d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079dc:	4405      	add	r5, r0
 80079de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079e2:	603d      	str	r5, [r7, #0]
 80079e4:	6030      	str	r0, [r6, #0]
 80079e6:	4620      	mov	r0, r4
 80079e8:	b002      	add	sp, #8
 80079ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079f2:	e7d6      	b.n	80079a2 <__d2b+0x2e>
 80079f4:	6161      	str	r1, [r4, #20]
 80079f6:	e7e7      	b.n	80079c8 <__d2b+0x54>
 80079f8:	a801      	add	r0, sp, #4
 80079fa:	f7ff fd5d 	bl	80074b8 <__lo0bits>
 80079fe:	2101      	movs	r1, #1
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	6121      	str	r1, [r4, #16]
 8007a04:	6163      	str	r3, [r4, #20]
 8007a06:	3020      	adds	r0, #32
 8007a08:	e7e5      	b.n	80079d6 <__d2b+0x62>
 8007a0a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007a0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a12:	6038      	str	r0, [r7, #0]
 8007a14:	6918      	ldr	r0, [r3, #16]
 8007a16:	f7ff fd2f 	bl	8007478 <__hi0bits>
 8007a1a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007a1e:	6031      	str	r1, [r6, #0]
 8007a20:	e7e1      	b.n	80079e6 <__d2b+0x72>
 8007a22:	bf00      	nop
 8007a24:	0800874b 	.word	0x0800874b
 8007a28:	080087bc 	.word	0x080087bc

08007a2c <_calloc_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a32:	b934      	cbnz	r4, 8007a42 <_calloc_r+0x16>
 8007a34:	4629      	mov	r1, r5
 8007a36:	f000 f875 	bl	8007b24 <_malloc_r>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b928      	cbnz	r0, 8007a4a <_calloc_r+0x1e>
 8007a3e:	4630      	mov	r0, r6
 8007a40:	bd70      	pop	{r4, r5, r6, pc}
 8007a42:	220c      	movs	r2, #12
 8007a44:	2600      	movs	r6, #0
 8007a46:	6002      	str	r2, [r0, #0]
 8007a48:	e7f9      	b.n	8007a3e <_calloc_r+0x12>
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	f7fe f84f 	bl	8005af0 <memset>
 8007a52:	e7f4      	b.n	8007a3e <_calloc_r+0x12>

08007a54 <_free_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4605      	mov	r5, r0
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d040      	beq.n	8007ade <_free_r+0x8a>
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f0c      	subs	r4, r1, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfb8      	it	lt
 8007a66:	18e4      	addlt	r4, r4, r3
 8007a68:	f000 fcd6 	bl	8008418 <__malloc_lock>
 8007a6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <_free_r+0x8c>)
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	b933      	cbnz	r3, 8007a80 <_free_r+0x2c>
 8007a72:	6063      	str	r3, [r4, #4]
 8007a74:	6014      	str	r4, [r2, #0]
 8007a76:	4628      	mov	r0, r5
 8007a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a7c:	f000 bcd2 	b.w	8008424 <__malloc_unlock>
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	d908      	bls.n	8007a96 <_free_r+0x42>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf01      	itttt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	1809      	addeq	r1, r1, r0
 8007a92:	6021      	streq	r1, [r4, #0]
 8007a94:	e7ed      	b.n	8007a72 <_free_r+0x1e>
 8007a96:	461a      	mov	r2, r3
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	b10b      	cbz	r3, 8007aa0 <_free_r+0x4c>
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d9fa      	bls.n	8007a96 <_free_r+0x42>
 8007aa0:	6811      	ldr	r1, [r2, #0]
 8007aa2:	1850      	adds	r0, r2, r1
 8007aa4:	42a0      	cmp	r0, r4
 8007aa6:	d10b      	bne.n	8007ac0 <_free_r+0x6c>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	4401      	add	r1, r0
 8007aac:	1850      	adds	r0, r2, r1
 8007aae:	4283      	cmp	r3, r0
 8007ab0:	6011      	str	r1, [r2, #0]
 8007ab2:	d1e0      	bne.n	8007a76 <_free_r+0x22>
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4401      	add	r1, r0
 8007aba:	6011      	str	r1, [r2, #0]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	e7da      	b.n	8007a76 <_free_r+0x22>
 8007ac0:	d902      	bls.n	8007ac8 <_free_r+0x74>
 8007ac2:	230c      	movs	r3, #12
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	e7d6      	b.n	8007a76 <_free_r+0x22>
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	1821      	adds	r1, r4, r0
 8007acc:	428b      	cmp	r3, r1
 8007ace:	bf01      	itttt	eq
 8007ad0:	6819      	ldreq	r1, [r3, #0]
 8007ad2:	685b      	ldreq	r3, [r3, #4]
 8007ad4:	1809      	addeq	r1, r1, r0
 8007ad6:	6021      	streq	r1, [r4, #0]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	6054      	str	r4, [r2, #4]
 8007adc:	e7cb      	b.n	8007a76 <_free_r+0x22>
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	200002ac 	.word	0x200002ac

08007ae4 <sbrk_aligned>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	4e0e      	ldr	r6, [pc, #56]	; (8007b20 <sbrk_aligned+0x3c>)
 8007ae8:	460c      	mov	r4, r1
 8007aea:	6831      	ldr	r1, [r6, #0]
 8007aec:	4605      	mov	r5, r0
 8007aee:	b911      	cbnz	r1, 8007af6 <sbrk_aligned+0x12>
 8007af0:	f000 f9e4 	bl	8007ebc <_sbrk_r>
 8007af4:	6030      	str	r0, [r6, #0]
 8007af6:	4621      	mov	r1, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 f9df 	bl	8007ebc <_sbrk_r>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d00a      	beq.n	8007b18 <sbrk_aligned+0x34>
 8007b02:	1cc4      	adds	r4, r0, #3
 8007b04:	f024 0403 	bic.w	r4, r4, #3
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d007      	beq.n	8007b1c <sbrk_aligned+0x38>
 8007b0c:	1a21      	subs	r1, r4, r0
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f9d4 	bl	8007ebc <_sbrk_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d101      	bne.n	8007b1c <sbrk_aligned+0x38>
 8007b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	200002b0 	.word	0x200002b0

08007b24 <_malloc_r>:
 8007b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b28:	1ccd      	adds	r5, r1, #3
 8007b2a:	f025 0503 	bic.w	r5, r5, #3
 8007b2e:	3508      	adds	r5, #8
 8007b30:	2d0c      	cmp	r5, #12
 8007b32:	bf38      	it	cc
 8007b34:	250c      	movcc	r5, #12
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	4607      	mov	r7, r0
 8007b3a:	db01      	blt.n	8007b40 <_malloc_r+0x1c>
 8007b3c:	42a9      	cmp	r1, r5
 8007b3e:	d905      	bls.n	8007b4c <_malloc_r+0x28>
 8007b40:	230c      	movs	r3, #12
 8007b42:	2600      	movs	r6, #0
 8007b44:	603b      	str	r3, [r7, #0]
 8007b46:	4630      	mov	r0, r6
 8007b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b4c:	4e2e      	ldr	r6, [pc, #184]	; (8007c08 <_malloc_r+0xe4>)
 8007b4e:	f000 fc63 	bl	8008418 <__malloc_lock>
 8007b52:	6833      	ldr	r3, [r6, #0]
 8007b54:	461c      	mov	r4, r3
 8007b56:	bb34      	cbnz	r4, 8007ba6 <_malloc_r+0x82>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f7ff ffc2 	bl	8007ae4 <sbrk_aligned>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	4604      	mov	r4, r0
 8007b64:	d14d      	bne.n	8007c02 <_malloc_r+0xde>
 8007b66:	6834      	ldr	r4, [r6, #0]
 8007b68:	4626      	mov	r6, r4
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	d140      	bne.n	8007bf0 <_malloc_r+0xcc>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	4631      	mov	r1, r6
 8007b72:	4638      	mov	r0, r7
 8007b74:	eb04 0803 	add.w	r8, r4, r3
 8007b78:	f000 f9a0 	bl	8007ebc <_sbrk_r>
 8007b7c:	4580      	cmp	r8, r0
 8007b7e:	d13a      	bne.n	8007bf6 <_malloc_r+0xd2>
 8007b80:	6821      	ldr	r1, [r4, #0]
 8007b82:	3503      	adds	r5, #3
 8007b84:	1a6d      	subs	r5, r5, r1
 8007b86:	f025 0503 	bic.w	r5, r5, #3
 8007b8a:	3508      	adds	r5, #8
 8007b8c:	2d0c      	cmp	r5, #12
 8007b8e:	bf38      	it	cc
 8007b90:	250c      	movcc	r5, #12
 8007b92:	4638      	mov	r0, r7
 8007b94:	4629      	mov	r1, r5
 8007b96:	f7ff ffa5 	bl	8007ae4 <sbrk_aligned>
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	d02b      	beq.n	8007bf6 <_malloc_r+0xd2>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	442b      	add	r3, r5
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	e00e      	b.n	8007bc4 <_malloc_r+0xa0>
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	1b52      	subs	r2, r2, r5
 8007baa:	d41e      	bmi.n	8007bea <_malloc_r+0xc6>
 8007bac:	2a0b      	cmp	r2, #11
 8007bae:	d916      	bls.n	8007bde <_malloc_r+0xba>
 8007bb0:	1961      	adds	r1, r4, r5
 8007bb2:	42a3      	cmp	r3, r4
 8007bb4:	6025      	str	r5, [r4, #0]
 8007bb6:	bf18      	it	ne
 8007bb8:	6059      	strne	r1, [r3, #4]
 8007bba:	6863      	ldr	r3, [r4, #4]
 8007bbc:	bf08      	it	eq
 8007bbe:	6031      	streq	r1, [r6, #0]
 8007bc0:	5162      	str	r2, [r4, r5]
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f104 060b 	add.w	r6, r4, #11
 8007bca:	f000 fc2b 	bl	8008424 <__malloc_unlock>
 8007bce:	f026 0607 	bic.w	r6, r6, #7
 8007bd2:	1d23      	adds	r3, r4, #4
 8007bd4:	1af2      	subs	r2, r6, r3
 8007bd6:	d0b6      	beq.n	8007b46 <_malloc_r+0x22>
 8007bd8:	1b9b      	subs	r3, r3, r6
 8007bda:	50a3      	str	r3, [r4, r2]
 8007bdc:	e7b3      	b.n	8007b46 <_malloc_r+0x22>
 8007bde:	6862      	ldr	r2, [r4, #4]
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	bf0c      	ite	eq
 8007be4:	6032      	streq	r2, [r6, #0]
 8007be6:	605a      	strne	r2, [r3, #4]
 8007be8:	e7ec      	b.n	8007bc4 <_malloc_r+0xa0>
 8007bea:	4623      	mov	r3, r4
 8007bec:	6864      	ldr	r4, [r4, #4]
 8007bee:	e7b2      	b.n	8007b56 <_malloc_r+0x32>
 8007bf0:	4634      	mov	r4, r6
 8007bf2:	6876      	ldr	r6, [r6, #4]
 8007bf4:	e7b9      	b.n	8007b6a <_malloc_r+0x46>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	f000 fc12 	bl	8008424 <__malloc_unlock>
 8007c00:	e7a1      	b.n	8007b46 <_malloc_r+0x22>
 8007c02:	6025      	str	r5, [r4, #0]
 8007c04:	e7de      	b.n	8007bc4 <_malloc_r+0xa0>
 8007c06:	bf00      	nop
 8007c08:	200002ac 	.word	0x200002ac

08007c0c <__sfputc_r>:
 8007c0c:	6893      	ldr	r3, [r2, #8]
 8007c0e:	b410      	push	{r4}
 8007c10:	3b01      	subs	r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	6093      	str	r3, [r2, #8]
 8007c16:	da07      	bge.n	8007c28 <__sfputc_r+0x1c>
 8007c18:	6994      	ldr	r4, [r2, #24]
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	db01      	blt.n	8007c22 <__sfputc_r+0x16>
 8007c1e:	290a      	cmp	r1, #10
 8007c20:	d102      	bne.n	8007c28 <__sfputc_r+0x1c>
 8007c22:	bc10      	pop	{r4}
 8007c24:	f000 b99e 	b.w	8007f64 <__swbuf_r>
 8007c28:	6813      	ldr	r3, [r2, #0]
 8007c2a:	1c58      	adds	r0, r3, #1
 8007c2c:	6010      	str	r0, [r2, #0]
 8007c2e:	7019      	strb	r1, [r3, #0]
 8007c30:	4608      	mov	r0, r1
 8007c32:	bc10      	pop	{r4}
 8007c34:	4770      	bx	lr

08007c36 <__sfputs_r>:
 8007c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c38:	4606      	mov	r6, r0
 8007c3a:	460f      	mov	r7, r1
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	18d5      	adds	r5, r2, r3
 8007c40:	42ac      	cmp	r4, r5
 8007c42:	d101      	bne.n	8007c48 <__sfputs_r+0x12>
 8007c44:	2000      	movs	r0, #0
 8007c46:	e007      	b.n	8007c58 <__sfputs_r+0x22>
 8007c48:	463a      	mov	r2, r7
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c50:	f7ff ffdc 	bl	8007c0c <__sfputc_r>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d1f3      	bne.n	8007c40 <__sfputs_r+0xa>
 8007c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c5c <_vfiprintf_r>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	460d      	mov	r5, r1
 8007c62:	4614      	mov	r4, r2
 8007c64:	4698      	mov	r8, r3
 8007c66:	4606      	mov	r6, r0
 8007c68:	b09d      	sub	sp, #116	; 0x74
 8007c6a:	b118      	cbz	r0, 8007c74 <_vfiprintf_r+0x18>
 8007c6c:	6983      	ldr	r3, [r0, #24]
 8007c6e:	b90b      	cbnz	r3, 8007c74 <_vfiprintf_r+0x18>
 8007c70:	f7ff fa90 	bl	8007194 <__sinit>
 8007c74:	4b89      	ldr	r3, [pc, #548]	; (8007e9c <_vfiprintf_r+0x240>)
 8007c76:	429d      	cmp	r5, r3
 8007c78:	d11b      	bne.n	8007cb2 <_vfiprintf_r+0x56>
 8007c7a:	6875      	ldr	r5, [r6, #4]
 8007c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_vfiprintf_r+0x32>
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_vfiprintf_r+0x32>
 8007c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c8a:	f7ff fb26 	bl	80072da <__retarget_lock_acquire_recursive>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	071b      	lsls	r3, r3, #28
 8007c92:	d501      	bpl.n	8007c98 <_vfiprintf_r+0x3c>
 8007c94:	692b      	ldr	r3, [r5, #16]
 8007c96:	b9eb      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x78>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f9c6 	bl	800802c <__swsetup_r>
 8007ca0:	b1c0      	cbz	r0, 8007cd4 <_vfiprintf_r+0x78>
 8007ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca4:	07dc      	lsls	r4, r3, #31
 8007ca6:	d50e      	bpl.n	8007cc6 <_vfiprintf_r+0x6a>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cac:	b01d      	add	sp, #116	; 0x74
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	4b7b      	ldr	r3, [pc, #492]	; (8007ea0 <_vfiprintf_r+0x244>)
 8007cb4:	429d      	cmp	r5, r3
 8007cb6:	d101      	bne.n	8007cbc <_vfiprintf_r+0x60>
 8007cb8:	68b5      	ldr	r5, [r6, #8]
 8007cba:	e7df      	b.n	8007c7c <_vfiprintf_r+0x20>
 8007cbc:	4b79      	ldr	r3, [pc, #484]	; (8007ea4 <_vfiprintf_r+0x248>)
 8007cbe:	429d      	cmp	r5, r3
 8007cc0:	bf08      	it	eq
 8007cc2:	68f5      	ldreq	r5, [r6, #12]
 8007cc4:	e7da      	b.n	8007c7c <_vfiprintf_r+0x20>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	0598      	lsls	r0, r3, #22
 8007cca:	d4ed      	bmi.n	8007ca8 <_vfiprintf_r+0x4c>
 8007ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cce:	f7ff fb05 	bl	80072dc <__retarget_lock_release_recursive>
 8007cd2:	e7e9      	b.n	8007ca8 <_vfiprintf_r+0x4c>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	2320      	movs	r3, #32
 8007cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cde:	2330      	movs	r3, #48	; 0x30
 8007ce0:	f04f 0901 	mov.w	r9, #1
 8007ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007ea8 <_vfiprintf_r+0x24c>
 8007cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	469a      	mov	sl, r3
 8007cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf8:	b10a      	cbz	r2, 8007cfe <_vfiprintf_r+0xa2>
 8007cfa:	2a25      	cmp	r2, #37	; 0x25
 8007cfc:	d1f9      	bne.n	8007cf2 <_vfiprintf_r+0x96>
 8007cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007d02:	d00b      	beq.n	8007d1c <_vfiprintf_r+0xc0>
 8007d04:	465b      	mov	r3, fp
 8007d06:	4622      	mov	r2, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff ff93 	bl	8007c36 <__sfputs_r>
 8007d10:	3001      	adds	r0, #1
 8007d12:	f000 80aa 	beq.w	8007e6a <_vfiprintf_r+0x20e>
 8007d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d18:	445a      	add	r2, fp
 8007d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 80a2 	beq.w	8007e6a <_vfiprintf_r+0x20e>
 8007d26:	2300      	movs	r3, #0
 8007d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d30:	f10a 0a01 	add.w	sl, sl, #1
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	9307      	str	r3, [sp, #28]
 8007d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3e:	4654      	mov	r4, sl
 8007d40:	2205      	movs	r2, #5
 8007d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d46:	4858      	ldr	r0, [pc, #352]	; (8007ea8 <_vfiprintf_r+0x24c>)
 8007d48:	f7ff fad2 	bl	80072f0 <memchr>
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	b9d8      	cbnz	r0, 8007d88 <_vfiprintf_r+0x12c>
 8007d50:	06d1      	lsls	r1, r2, #27
 8007d52:	bf44      	itt	mi
 8007d54:	2320      	movmi	r3, #32
 8007d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5a:	0713      	lsls	r3, r2, #28
 8007d5c:	bf44      	itt	mi
 8007d5e:	232b      	movmi	r3, #43	; 0x2b
 8007d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d64:	f89a 3000 	ldrb.w	r3, [sl]
 8007d68:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6a:	d015      	beq.n	8007d98 <_vfiprintf_r+0x13c>
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	9a07      	ldr	r2, [sp, #28]
 8007d76:	4621      	mov	r1, r4
 8007d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7c:	3b30      	subs	r3, #48	; 0x30
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d94e      	bls.n	8007e20 <_vfiprintf_r+0x1c4>
 8007d82:	b1b0      	cbz	r0, 8007db2 <_vfiprintf_r+0x156>
 8007d84:	9207      	str	r2, [sp, #28]
 8007d86:	e014      	b.n	8007db2 <_vfiprintf_r+0x156>
 8007d88:	eba0 0308 	sub.w	r3, r0, r8
 8007d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d90:	4313      	orrs	r3, r2
 8007d92:	46a2      	mov	sl, r4
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	e7d2      	b.n	8007d3e <_vfiprintf_r+0xe2>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	1d19      	adds	r1, r3, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	9103      	str	r1, [sp, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfbb      	ittet	lt
 8007da4:	425b      	neglt	r3, r3
 8007da6:	f042 0202 	orrlt.w	r2, r2, #2
 8007daa:	9307      	strge	r3, [sp, #28]
 8007dac:	9307      	strlt	r3, [sp, #28]
 8007dae:	bfb8      	it	lt
 8007db0:	9204      	strlt	r2, [sp, #16]
 8007db2:	7823      	ldrb	r3, [r4, #0]
 8007db4:	2b2e      	cmp	r3, #46	; 0x2e
 8007db6:	d10c      	bne.n	8007dd2 <_vfiprintf_r+0x176>
 8007db8:	7863      	ldrb	r3, [r4, #1]
 8007dba:	2b2a      	cmp	r3, #42	; 0x2a
 8007dbc:	d135      	bne.n	8007e2a <_vfiprintf_r+0x1ce>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	3402      	adds	r4, #2
 8007dc2:	1d1a      	adds	r2, r3, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	9203      	str	r2, [sp, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfb8      	it	lt
 8007dcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dd0:	9305      	str	r3, [sp, #20]
 8007dd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007eac <_vfiprintf_r+0x250>
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	4650      	mov	r0, sl
 8007dda:	7821      	ldrb	r1, [r4, #0]
 8007ddc:	f7ff fa88 	bl	80072f0 <memchr>
 8007de0:	b140      	cbz	r0, 8007df4 <_vfiprintf_r+0x198>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	eba0 000a 	sub.w	r0, r0, sl
 8007de8:	fa03 f000 	lsl.w	r0, r3, r0
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	3401      	adds	r4, #1
 8007df0:	4303      	orrs	r3, r0
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df8:	2206      	movs	r2, #6
 8007dfa:	482d      	ldr	r0, [pc, #180]	; (8007eb0 <_vfiprintf_r+0x254>)
 8007dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e00:	f7ff fa76 	bl	80072f0 <memchr>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d03f      	beq.n	8007e88 <_vfiprintf_r+0x22c>
 8007e08:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <_vfiprintf_r+0x258>)
 8007e0a:	bb1b      	cbnz	r3, 8007e54 <_vfiprintf_r+0x1f8>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	3307      	adds	r3, #7
 8007e10:	f023 0307 	bic.w	r3, r3, #7
 8007e14:	3308      	adds	r3, #8
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1a:	443b      	add	r3, r7
 8007e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1e:	e767      	b.n	8007cf0 <_vfiprintf_r+0x94>
 8007e20:	460c      	mov	r4, r1
 8007e22:	2001      	movs	r0, #1
 8007e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e28:	e7a5      	b.n	8007d76 <_vfiprintf_r+0x11a>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f04f 0c0a 	mov.w	ip, #10
 8007e30:	4619      	mov	r1, r3
 8007e32:	3401      	adds	r4, #1
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	4620      	mov	r0, r4
 8007e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3c:	3a30      	subs	r2, #48	; 0x30
 8007e3e:	2a09      	cmp	r2, #9
 8007e40:	d903      	bls.n	8007e4a <_vfiprintf_r+0x1ee>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0c5      	beq.n	8007dd2 <_vfiprintf_r+0x176>
 8007e46:	9105      	str	r1, [sp, #20]
 8007e48:	e7c3      	b.n	8007dd2 <_vfiprintf_r+0x176>
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e52:	e7f0      	b.n	8007e36 <_vfiprintf_r+0x1da>
 8007e54:	ab03      	add	r3, sp, #12
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	462a      	mov	r2, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <_vfiprintf_r+0x25c>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	f7fd feec 	bl	8005c3c <_printf_float>
 8007e64:	4607      	mov	r7, r0
 8007e66:	1c78      	adds	r0, r7, #1
 8007e68:	d1d6      	bne.n	8007e18 <_vfiprintf_r+0x1bc>
 8007e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e6c:	07d9      	lsls	r1, r3, #31
 8007e6e:	d405      	bmi.n	8007e7c <_vfiprintf_r+0x220>
 8007e70:	89ab      	ldrh	r3, [r5, #12]
 8007e72:	059a      	lsls	r2, r3, #22
 8007e74:	d402      	bmi.n	8007e7c <_vfiprintf_r+0x220>
 8007e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e78:	f7ff fa30 	bl	80072dc <__retarget_lock_release_recursive>
 8007e7c:	89ab      	ldrh	r3, [r5, #12]
 8007e7e:	065b      	lsls	r3, r3, #25
 8007e80:	f53f af12 	bmi.w	8007ca8 <_vfiprintf_r+0x4c>
 8007e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e86:	e711      	b.n	8007cac <_vfiprintf_r+0x50>
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <_vfiprintf_r+0x25c>)
 8007e92:	a904      	add	r1, sp, #16
 8007e94:	f7fe f96e 	bl	8006174 <_printf_i>
 8007e98:	e7e4      	b.n	8007e64 <_vfiprintf_r+0x208>
 8007e9a:	bf00      	nop
 8007e9c:	0800877c 	.word	0x0800877c
 8007ea0:	0800879c 	.word	0x0800879c
 8007ea4:	0800875c 	.word	0x0800875c
 8007ea8:	08008914 	.word	0x08008914
 8007eac:	0800891a 	.word	0x0800891a
 8007eb0:	0800891e 	.word	0x0800891e
 8007eb4:	08005c3d 	.word	0x08005c3d
 8007eb8:	08007c37 	.word	0x08007c37

08007ebc <_sbrk_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4d05      	ldr	r5, [pc, #20]	; (8007ed8 <_sbrk_r+0x1c>)
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	602b      	str	r3, [r5, #0]
 8007ec8:	f7fb f970 	bl	80031ac <_sbrk>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_sbrk_r+0x1a>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_sbrk_r+0x1a>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	200002b4 	.word	0x200002b4

08007edc <__sread>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	f000 faa4 	bl	8008430 <_read_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	bfab      	itete	ge
 8007eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ef0:	181b      	addge	r3, r3, r0
 8007ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ef6:	bfac      	ite	ge
 8007ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007efa:	81a3      	strhlt	r3, [r4, #12]
 8007efc:	bd10      	pop	{r4, pc}

08007efe <__swrite>:
 8007efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	461f      	mov	r7, r3
 8007f04:	898b      	ldrh	r3, [r1, #12]
 8007f06:	4605      	mov	r5, r0
 8007f08:	05db      	lsls	r3, r3, #23
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	d505      	bpl.n	8007f1c <__swrite+0x1e>
 8007f10:	2302      	movs	r3, #2
 8007f12:	2200      	movs	r2, #0
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	f000 f9f4 	bl	8008304 <_lseek_r>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	4632      	mov	r2, r6
 8007f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f24:	81a3      	strh	r3, [r4, #12]
 8007f26:	4628      	mov	r0, r5
 8007f28:	463b      	mov	r3, r7
 8007f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	f000 b869 	b.w	8008008 <_write_r>

08007f36 <__sseek>:
 8007f36:	b510      	push	{r4, lr}
 8007f38:	460c      	mov	r4, r1
 8007f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3e:	f000 f9e1 	bl	8008304 <_lseek_r>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	bf15      	itete	ne
 8007f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f52:	81a3      	strheq	r3, [r4, #12]
 8007f54:	bf18      	it	ne
 8007f56:	81a3      	strhne	r3, [r4, #12]
 8007f58:	bd10      	pop	{r4, pc}

08007f5a <__sclose>:
 8007f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5e:	f000 b8f1 	b.w	8008144 <_close_r>
	...

08007f64 <__swbuf_r>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	460e      	mov	r6, r1
 8007f68:	4614      	mov	r4, r2
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b118      	cbz	r0, 8007f76 <__swbuf_r+0x12>
 8007f6e:	6983      	ldr	r3, [r0, #24]
 8007f70:	b90b      	cbnz	r3, 8007f76 <__swbuf_r+0x12>
 8007f72:	f7ff f90f 	bl	8007194 <__sinit>
 8007f76:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <__swbuf_r+0x98>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	d12b      	bne.n	8007fd4 <__swbuf_r+0x70>
 8007f7c:	686c      	ldr	r4, [r5, #4]
 8007f7e:	69a3      	ldr	r3, [r4, #24]
 8007f80:	60a3      	str	r3, [r4, #8]
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	071a      	lsls	r2, r3, #28
 8007f86:	d52f      	bpl.n	8007fe8 <__swbuf_r+0x84>
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	b36b      	cbz	r3, 8007fe8 <__swbuf_r+0x84>
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	1ac0      	subs	r0, r0, r3
 8007f94:	6963      	ldr	r3, [r4, #20]
 8007f96:	4637      	mov	r7, r6
 8007f98:	4283      	cmp	r3, r0
 8007f9a:	dc04      	bgt.n	8007fa6 <__swbuf_r+0x42>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f962 	bl	8008268 <_fflush_r>
 8007fa4:	bb30      	cbnz	r0, 8007ff4 <__swbuf_r+0x90>
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	3001      	adds	r0, #1
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60a3      	str	r3, [r4, #8]
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	701e      	strb	r6, [r3, #0]
 8007fb6:	6963      	ldr	r3, [r4, #20]
 8007fb8:	4283      	cmp	r3, r0
 8007fba:	d004      	beq.n	8007fc6 <__swbuf_r+0x62>
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d506      	bpl.n	8007fd0 <__swbuf_r+0x6c>
 8007fc2:	2e0a      	cmp	r6, #10
 8007fc4:	d104      	bne.n	8007fd0 <__swbuf_r+0x6c>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 f94d 	bl	8008268 <_fflush_r>
 8007fce:	b988      	cbnz	r0, 8007ff4 <__swbuf_r+0x90>
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <__swbuf_r+0x9c>)
 8007fd6:	429c      	cmp	r4, r3
 8007fd8:	d101      	bne.n	8007fde <__swbuf_r+0x7a>
 8007fda:	68ac      	ldr	r4, [r5, #8]
 8007fdc:	e7cf      	b.n	8007f7e <__swbuf_r+0x1a>
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <__swbuf_r+0xa0>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	bf08      	it	eq
 8007fe4:	68ec      	ldreq	r4, [r5, #12]
 8007fe6:	e7ca      	b.n	8007f7e <__swbuf_r+0x1a>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f81e 	bl	800802c <__swsetup_r>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0cb      	beq.n	8007f8c <__swbuf_r+0x28>
 8007ff4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ff8:	e7ea      	b.n	8007fd0 <__swbuf_r+0x6c>
 8007ffa:	bf00      	nop
 8007ffc:	0800877c 	.word	0x0800877c
 8008000:	0800879c 	.word	0x0800879c
 8008004:	0800875c 	.word	0x0800875c

08008008 <_write_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	2200      	movs	r2, #0
 8008012:	4d05      	ldr	r5, [pc, #20]	; (8008028 <_write_r+0x20>)
 8008014:	602a      	str	r2, [r5, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f7fb f87b 	bl	8003112 <_write>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_write_r+0x1e>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_write_r+0x1e>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	200002b4 	.word	0x200002b4

0800802c <__swsetup_r>:
 800802c:	4b32      	ldr	r3, [pc, #200]	; (80080f8 <__swsetup_r+0xcc>)
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	681d      	ldr	r5, [r3, #0]
 8008032:	4606      	mov	r6, r0
 8008034:	460c      	mov	r4, r1
 8008036:	b125      	cbz	r5, 8008042 <__swsetup_r+0x16>
 8008038:	69ab      	ldr	r3, [r5, #24]
 800803a:	b913      	cbnz	r3, 8008042 <__swsetup_r+0x16>
 800803c:	4628      	mov	r0, r5
 800803e:	f7ff f8a9 	bl	8007194 <__sinit>
 8008042:	4b2e      	ldr	r3, [pc, #184]	; (80080fc <__swsetup_r+0xd0>)
 8008044:	429c      	cmp	r4, r3
 8008046:	d10f      	bne.n	8008068 <__swsetup_r+0x3c>
 8008048:	686c      	ldr	r4, [r5, #4]
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008050:	0719      	lsls	r1, r3, #28
 8008052:	d42c      	bmi.n	80080ae <__swsetup_r+0x82>
 8008054:	06dd      	lsls	r5, r3, #27
 8008056:	d411      	bmi.n	800807c <__swsetup_r+0x50>
 8008058:	2309      	movs	r3, #9
 800805a:	6033      	str	r3, [r6, #0]
 800805c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e03e      	b.n	80080e6 <__swsetup_r+0xba>
 8008068:	4b25      	ldr	r3, [pc, #148]	; (8008100 <__swsetup_r+0xd4>)
 800806a:	429c      	cmp	r4, r3
 800806c:	d101      	bne.n	8008072 <__swsetup_r+0x46>
 800806e:	68ac      	ldr	r4, [r5, #8]
 8008070:	e7eb      	b.n	800804a <__swsetup_r+0x1e>
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <__swsetup_r+0xd8>)
 8008074:	429c      	cmp	r4, r3
 8008076:	bf08      	it	eq
 8008078:	68ec      	ldreq	r4, [r5, #12]
 800807a:	e7e6      	b.n	800804a <__swsetup_r+0x1e>
 800807c:	0758      	lsls	r0, r3, #29
 800807e:	d512      	bpl.n	80080a6 <__swsetup_r+0x7a>
 8008080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008082:	b141      	cbz	r1, 8008096 <__swsetup_r+0x6a>
 8008084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008088:	4299      	cmp	r1, r3
 800808a:	d002      	beq.n	8008092 <__swsetup_r+0x66>
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff fce1 	bl	8007a54 <_free_r>
 8008092:	2300      	movs	r3, #0
 8008094:	6363      	str	r3, [r4, #52]	; 0x34
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	2300      	movs	r3, #0
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f043 0308 	orr.w	r3, r3, #8
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	6923      	ldr	r3, [r4, #16]
 80080b0:	b94b      	cbnz	r3, 80080c6 <__swsetup_r+0x9a>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d003      	beq.n	80080c6 <__swsetup_r+0x9a>
 80080be:	4621      	mov	r1, r4
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f957 	bl	8008374 <__smakebuf_r>
 80080c6:	89a0      	ldrh	r0, [r4, #12]
 80080c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080cc:	f010 0301 	ands.w	r3, r0, #1
 80080d0:	d00a      	beq.n	80080e8 <__swsetup_r+0xbc>
 80080d2:	2300      	movs	r3, #0
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	425b      	negs	r3, r3
 80080da:	61a3      	str	r3, [r4, #24]
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b943      	cbnz	r3, 80080f2 <__swsetup_r+0xc6>
 80080e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080e4:	d1ba      	bne.n	800805c <__swsetup_r+0x30>
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	0781      	lsls	r1, r0, #30
 80080ea:	bf58      	it	pl
 80080ec:	6963      	ldrpl	r3, [r4, #20]
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	e7f4      	b.n	80080dc <__swsetup_r+0xb0>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7f7      	b.n	80080e6 <__swsetup_r+0xba>
 80080f6:	bf00      	nop
 80080f8:	2000000c 	.word	0x2000000c
 80080fc:	0800877c 	.word	0x0800877c
 8008100:	0800879c 	.word	0x0800879c
 8008104:	0800875c 	.word	0x0800875c

08008108 <__assert_func>:
 8008108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800810a:	4614      	mov	r4, r2
 800810c:	461a      	mov	r2, r3
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <__assert_func+0x2c>)
 8008110:	4605      	mov	r5, r0
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68d8      	ldr	r0, [r3, #12]
 8008116:	b14c      	cbz	r4, 800812c <__assert_func+0x24>
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <__assert_func+0x30>)
 800811a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800811e:	9100      	str	r1, [sp, #0]
 8008120:	462b      	mov	r3, r5
 8008122:	4906      	ldr	r1, [pc, #24]	; (800813c <__assert_func+0x34>)
 8008124:	f000 f8dc 	bl	80082e0 <fiprintf>
 8008128:	f000 f9a1 	bl	800846e <abort>
 800812c:	4b04      	ldr	r3, [pc, #16]	; (8008140 <__assert_func+0x38>)
 800812e:	461c      	mov	r4, r3
 8008130:	e7f3      	b.n	800811a <__assert_func+0x12>
 8008132:	bf00      	nop
 8008134:	2000000c 	.word	0x2000000c
 8008138:	08008925 	.word	0x08008925
 800813c:	08008932 	.word	0x08008932
 8008140:	08008960 	.word	0x08008960

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	2300      	movs	r3, #0
 8008148:	4d05      	ldr	r5, [pc, #20]	; (8008160 <_close_r+0x1c>)
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	f7fa fffb 	bl	800314a <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	200002b4 	.word	0x200002b4

08008164 <__sflush_r>:
 8008164:	898a      	ldrh	r2, [r1, #12]
 8008166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008168:	4605      	mov	r5, r0
 800816a:	0710      	lsls	r0, r2, #28
 800816c:	460c      	mov	r4, r1
 800816e:	d457      	bmi.n	8008220 <__sflush_r+0xbc>
 8008170:	684b      	ldr	r3, [r1, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc04      	bgt.n	8008180 <__sflush_r+0x1c>
 8008176:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc01      	bgt.n	8008180 <__sflush_r+0x1c>
 800817c:	2000      	movs	r0, #0
 800817e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008182:	2e00      	cmp	r6, #0
 8008184:	d0fa      	beq.n	800817c <__sflush_r+0x18>
 8008186:	2300      	movs	r3, #0
 8008188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800818c:	682f      	ldr	r7, [r5, #0]
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	d032      	beq.n	80081f8 <__sflush_r+0x94>
 8008192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	075a      	lsls	r2, r3, #29
 8008198:	d505      	bpl.n	80081a6 <__sflush_r+0x42>
 800819a:	6863      	ldr	r3, [r4, #4]
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081a0:	b10b      	cbz	r3, 80081a6 <__sflush_r+0x42>
 80081a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081a4:	1ac0      	subs	r0, r0, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	4602      	mov	r2, r0
 80081aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081ac:	4628      	mov	r0, r5
 80081ae:	6a21      	ldr	r1, [r4, #32]
 80081b0:	47b0      	blx	r6
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	d106      	bne.n	80081c6 <__sflush_r+0x62>
 80081b8:	6829      	ldr	r1, [r5, #0]
 80081ba:	291d      	cmp	r1, #29
 80081bc:	d82c      	bhi.n	8008218 <__sflush_r+0xb4>
 80081be:	4a29      	ldr	r2, [pc, #164]	; (8008264 <__sflush_r+0x100>)
 80081c0:	40ca      	lsrs	r2, r1
 80081c2:	07d6      	lsls	r6, r2, #31
 80081c4:	d528      	bpl.n	8008218 <__sflush_r+0xb4>
 80081c6:	2200      	movs	r2, #0
 80081c8:	6062      	str	r2, [r4, #4]
 80081ca:	6922      	ldr	r2, [r4, #16]
 80081cc:	04d9      	lsls	r1, r3, #19
 80081ce:	6022      	str	r2, [r4, #0]
 80081d0:	d504      	bpl.n	80081dc <__sflush_r+0x78>
 80081d2:	1c42      	adds	r2, r0, #1
 80081d4:	d101      	bne.n	80081da <__sflush_r+0x76>
 80081d6:	682b      	ldr	r3, [r5, #0]
 80081d8:	b903      	cbnz	r3, 80081dc <__sflush_r+0x78>
 80081da:	6560      	str	r0, [r4, #84]	; 0x54
 80081dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081de:	602f      	str	r7, [r5, #0]
 80081e0:	2900      	cmp	r1, #0
 80081e2:	d0cb      	beq.n	800817c <__sflush_r+0x18>
 80081e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e8:	4299      	cmp	r1, r3
 80081ea:	d002      	beq.n	80081f2 <__sflush_r+0x8e>
 80081ec:	4628      	mov	r0, r5
 80081ee:	f7ff fc31 	bl	8007a54 <_free_r>
 80081f2:	2000      	movs	r0, #0
 80081f4:	6360      	str	r0, [r4, #52]	; 0x34
 80081f6:	e7c2      	b.n	800817e <__sflush_r+0x1a>
 80081f8:	6a21      	ldr	r1, [r4, #32]
 80081fa:	2301      	movs	r3, #1
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b0      	blx	r6
 8008200:	1c41      	adds	r1, r0, #1
 8008202:	d1c7      	bne.n	8008194 <__sflush_r+0x30>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0c4      	beq.n	8008194 <__sflush_r+0x30>
 800820a:	2b1d      	cmp	r3, #29
 800820c:	d001      	beq.n	8008212 <__sflush_r+0xae>
 800820e:	2b16      	cmp	r3, #22
 8008210:	d101      	bne.n	8008216 <__sflush_r+0xb2>
 8008212:	602f      	str	r7, [r5, #0]
 8008214:	e7b2      	b.n	800817c <__sflush_r+0x18>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	e7ae      	b.n	800817e <__sflush_r+0x1a>
 8008220:	690f      	ldr	r7, [r1, #16]
 8008222:	2f00      	cmp	r7, #0
 8008224:	d0aa      	beq.n	800817c <__sflush_r+0x18>
 8008226:	0793      	lsls	r3, r2, #30
 8008228:	bf18      	it	ne
 800822a:	2300      	movne	r3, #0
 800822c:	680e      	ldr	r6, [r1, #0]
 800822e:	bf08      	it	eq
 8008230:	694b      	ldreq	r3, [r1, #20]
 8008232:	1bf6      	subs	r6, r6, r7
 8008234:	600f      	str	r7, [r1, #0]
 8008236:	608b      	str	r3, [r1, #8]
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd9f      	ble.n	800817c <__sflush_r+0x18>
 800823c:	4633      	mov	r3, r6
 800823e:	463a      	mov	r2, r7
 8008240:	4628      	mov	r0, r5
 8008242:	6a21      	ldr	r1, [r4, #32]
 8008244:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008248:	47e0      	blx	ip
 800824a:	2800      	cmp	r0, #0
 800824c:	dc06      	bgt.n	800825c <__sflush_r+0xf8>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	e790      	b.n	800817e <__sflush_r+0x1a>
 800825c:	4407      	add	r7, r0
 800825e:	1a36      	subs	r6, r6, r0
 8008260:	e7ea      	b.n	8008238 <__sflush_r+0xd4>
 8008262:	bf00      	nop
 8008264:	20400001 	.word	0x20400001

08008268 <_fflush_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	690b      	ldr	r3, [r1, #16]
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b913      	cbnz	r3, 8008278 <_fflush_r+0x10>
 8008272:	2500      	movs	r5, #0
 8008274:	4628      	mov	r0, r5
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	b118      	cbz	r0, 8008282 <_fflush_r+0x1a>
 800827a:	6983      	ldr	r3, [r0, #24]
 800827c:	b90b      	cbnz	r3, 8008282 <_fflush_r+0x1a>
 800827e:	f7fe ff89 	bl	8007194 <__sinit>
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <_fflush_r+0x6c>)
 8008284:	429c      	cmp	r4, r3
 8008286:	d11b      	bne.n	80082c0 <_fflush_r+0x58>
 8008288:	686c      	ldr	r4, [r5, #4]
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0ef      	beq.n	8008272 <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x3a>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x3a>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f7ff f81c 	bl	80072da <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff5d 	bl	8008164 <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ac:	4605      	mov	r5, r0
 80082ae:	07da      	lsls	r2, r3, #31
 80082b0:	d4e0      	bmi.n	8008274 <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4dd      	bmi.n	8008274 <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7ff f80f 	bl	80072dc <__retarget_lock_release_recursive>
 80082be:	e7d9      	b.n	8008274 <_fflush_r+0xc>
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <_fflush_r+0x70>)
 80082c2:	429c      	cmp	r4, r3
 80082c4:	d101      	bne.n	80082ca <_fflush_r+0x62>
 80082c6:	68ac      	ldr	r4, [r5, #8]
 80082c8:	e7df      	b.n	800828a <_fflush_r+0x22>
 80082ca:	4b04      	ldr	r3, [pc, #16]	; (80082dc <_fflush_r+0x74>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	bf08      	it	eq
 80082d0:	68ec      	ldreq	r4, [r5, #12]
 80082d2:	e7da      	b.n	800828a <_fflush_r+0x22>
 80082d4:	0800877c 	.word	0x0800877c
 80082d8:	0800879c 	.word	0x0800879c
 80082dc:	0800875c 	.word	0x0800875c

080082e0 <fiprintf>:
 80082e0:	b40e      	push	{r1, r2, r3}
 80082e2:	b503      	push	{r0, r1, lr}
 80082e4:	4601      	mov	r1, r0
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	4805      	ldr	r0, [pc, #20]	; (8008300 <fiprintf+0x20>)
 80082ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ee:	6800      	ldr	r0, [r0, #0]
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	f7ff fcb3 	bl	8007c5c <_vfiprintf_r>
 80082f6:	b002      	add	sp, #8
 80082f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082fc:	b003      	add	sp, #12
 80082fe:	4770      	bx	lr
 8008300:	2000000c 	.word	0x2000000c

08008304 <_lseek_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	2200      	movs	r2, #0
 800830e:	4d05      	ldr	r5, [pc, #20]	; (8008324 <_lseek_r+0x20>)
 8008310:	602a      	str	r2, [r5, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	f7fa ff3d 	bl	8003192 <_lseek>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_lseek_r+0x1e>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_lseek_r+0x1e>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	200002b4 	.word	0x200002b4

08008328 <__swhatbuf_r>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	460e      	mov	r6, r1
 800832c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008330:	4614      	mov	r4, r2
 8008332:	2900      	cmp	r1, #0
 8008334:	461d      	mov	r5, r3
 8008336:	b096      	sub	sp, #88	; 0x58
 8008338:	da08      	bge.n	800834c <__swhatbuf_r+0x24>
 800833a:	2200      	movs	r2, #0
 800833c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	061a      	lsls	r2, r3, #24
 8008344:	d410      	bmi.n	8008368 <__swhatbuf_r+0x40>
 8008346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800834a:	e00e      	b.n	800836a <__swhatbuf_r+0x42>
 800834c:	466a      	mov	r2, sp
 800834e:	f000 f895 	bl	800847c <_fstat_r>
 8008352:	2800      	cmp	r0, #0
 8008354:	dbf1      	blt.n	800833a <__swhatbuf_r+0x12>
 8008356:	9a01      	ldr	r2, [sp, #4]
 8008358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800835c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008360:	425a      	negs	r2, r3
 8008362:	415a      	adcs	r2, r3
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	e7ee      	b.n	8008346 <__swhatbuf_r+0x1e>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	2000      	movs	r0, #0
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	b016      	add	sp, #88	; 0x58
 8008370:	bd70      	pop	{r4, r5, r6, pc}
	...

08008374 <__smakebuf_r>:
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008378:	079d      	lsls	r5, r3, #30
 800837a:	4606      	mov	r6, r0
 800837c:	460c      	mov	r4, r1
 800837e:	d507      	bpl.n	8008390 <__smakebuf_r+0x1c>
 8008380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2301      	movs	r3, #1
 800838a:	6163      	str	r3, [r4, #20]
 800838c:	b002      	add	sp, #8
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	466a      	mov	r2, sp
 8008392:	ab01      	add	r3, sp, #4
 8008394:	f7ff ffc8 	bl	8008328 <__swhatbuf_r>
 8008398:	9900      	ldr	r1, [sp, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	4630      	mov	r0, r6
 800839e:	f7ff fbc1 	bl	8007b24 <_malloc_r>
 80083a2:	b948      	cbnz	r0, 80083b8 <__smakebuf_r+0x44>
 80083a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a8:	059a      	lsls	r2, r3, #22
 80083aa:	d4ef      	bmi.n	800838c <__smakebuf_r+0x18>
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7e3      	b.n	8008380 <__smakebuf_r+0xc>
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <__smakebuf_r+0x7c>)
 80083ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	6020      	str	r0, [r4, #0]
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	6120      	str	r0, [r4, #16]
 80083ca:	6163      	str	r3, [r4, #20]
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	b15b      	cbz	r3, 80083e8 <__smakebuf_r+0x74>
 80083d0:	4630      	mov	r0, r6
 80083d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d6:	f000 f863 	bl	80084a0 <_isatty_r>
 80083da:	b128      	cbz	r0, 80083e8 <__smakebuf_r+0x74>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	89a0      	ldrh	r0, [r4, #12]
 80083ea:	4305      	orrs	r5, r0
 80083ec:	81a5      	strh	r5, [r4, #12]
 80083ee:	e7cd      	b.n	800838c <__smakebuf_r+0x18>
 80083f0:	0800712d 	.word	0x0800712d

080083f4 <__ascii_mbtowc>:
 80083f4:	b082      	sub	sp, #8
 80083f6:	b901      	cbnz	r1, 80083fa <__ascii_mbtowc+0x6>
 80083f8:	a901      	add	r1, sp, #4
 80083fa:	b142      	cbz	r2, 800840e <__ascii_mbtowc+0x1a>
 80083fc:	b14b      	cbz	r3, 8008412 <__ascii_mbtowc+0x1e>
 80083fe:	7813      	ldrb	r3, [r2, #0]
 8008400:	600b      	str	r3, [r1, #0]
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	1e10      	subs	r0, r2, #0
 8008406:	bf18      	it	ne
 8008408:	2001      	movne	r0, #1
 800840a:	b002      	add	sp, #8
 800840c:	4770      	bx	lr
 800840e:	4610      	mov	r0, r2
 8008410:	e7fb      	b.n	800840a <__ascii_mbtowc+0x16>
 8008412:	f06f 0001 	mvn.w	r0, #1
 8008416:	e7f8      	b.n	800840a <__ascii_mbtowc+0x16>

08008418 <__malloc_lock>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__malloc_lock+0x8>)
 800841a:	f7fe bf5e 	b.w	80072da <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	200002a8 	.word	0x200002a8

08008424 <__malloc_unlock>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__malloc_unlock+0x8>)
 8008426:	f7fe bf59 	b.w	80072dc <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	200002a8 	.word	0x200002a8

08008430 <_read_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	4611      	mov	r1, r2
 8008438:	2200      	movs	r2, #0
 800843a:	4d05      	ldr	r5, [pc, #20]	; (8008450 <_read_r+0x20>)
 800843c:	602a      	str	r2, [r5, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f7fa fe4a 	bl	80030d8 <_read>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_read_r+0x1e>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_read_r+0x1e>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	200002b4 	.word	0x200002b4

08008454 <__ascii_wctomb>:
 8008454:	4603      	mov	r3, r0
 8008456:	4608      	mov	r0, r1
 8008458:	b141      	cbz	r1, 800846c <__ascii_wctomb+0x18>
 800845a:	2aff      	cmp	r2, #255	; 0xff
 800845c:	d904      	bls.n	8008468 <__ascii_wctomb+0x14>
 800845e:	228a      	movs	r2, #138	; 0x8a
 8008460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	4770      	bx	lr
 8008468:	2001      	movs	r0, #1
 800846a:	700a      	strb	r2, [r1, #0]
 800846c:	4770      	bx	lr

0800846e <abort>:
 800846e:	2006      	movs	r0, #6
 8008470:	b508      	push	{r3, lr}
 8008472:	f000 f84d 	bl	8008510 <raise>
 8008476:	2001      	movs	r0, #1
 8008478:	f7fa fe24 	bl	80030c4 <_exit>

0800847c <_fstat_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	2300      	movs	r3, #0
 8008480:	4d06      	ldr	r5, [pc, #24]	; (800849c <_fstat_r+0x20>)
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	f7fa fe69 	bl	8003160 <_fstat>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d102      	bne.n	8008498 <_fstat_r+0x1c>
 8008492:	682b      	ldr	r3, [r5, #0]
 8008494:	b103      	cbz	r3, 8008498 <_fstat_r+0x1c>
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	bd38      	pop	{r3, r4, r5, pc}
 800849a:	bf00      	nop
 800849c:	200002b4 	.word	0x200002b4

080084a0 <_isatty_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	2300      	movs	r3, #0
 80084a4:	4d05      	ldr	r5, [pc, #20]	; (80084bc <_isatty_r+0x1c>)
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	f7fa fe67 	bl	800317e <_isatty>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_isatty_r+0x1a>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_isatty_r+0x1a>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	200002b4 	.word	0x200002b4

080084c0 <_raise_r>:
 80084c0:	291f      	cmp	r1, #31
 80084c2:	b538      	push	{r3, r4, r5, lr}
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	d904      	bls.n	80084d4 <_raise_r+0x14>
 80084ca:	2316      	movs	r3, #22
 80084cc:	6003      	str	r3, [r0, #0]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084d6:	b112      	cbz	r2, 80084de <_raise_r+0x1e>
 80084d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084dc:	b94b      	cbnz	r3, 80084f2 <_raise_r+0x32>
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 f830 	bl	8008544 <_getpid_r>
 80084e4:	462a      	mov	r2, r5
 80084e6:	4601      	mov	r1, r0
 80084e8:	4620      	mov	r0, r4
 80084ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084ee:	f000 b817 	b.w	8008520 <_kill_r>
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d00a      	beq.n	800850c <_raise_r+0x4c>
 80084f6:	1c59      	adds	r1, r3, #1
 80084f8:	d103      	bne.n	8008502 <_raise_r+0x42>
 80084fa:	2316      	movs	r3, #22
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	2001      	movs	r0, #1
 8008500:	e7e7      	b.n	80084d2 <_raise_r+0x12>
 8008502:	2400      	movs	r4, #0
 8008504:	4628      	mov	r0, r5
 8008506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800850a:	4798      	blx	r3
 800850c:	2000      	movs	r0, #0
 800850e:	e7e0      	b.n	80084d2 <_raise_r+0x12>

08008510 <raise>:
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <raise+0xc>)
 8008512:	4601      	mov	r1, r0
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f7ff bfd3 	b.w	80084c0 <_raise_r>
 800851a:	bf00      	nop
 800851c:	2000000c 	.word	0x2000000c

08008520 <_kill_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	2300      	movs	r3, #0
 8008524:	4d06      	ldr	r5, [pc, #24]	; (8008540 <_kill_r+0x20>)
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	f7fa fdb9 	bl	80030a4 <_kill>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d102      	bne.n	800853c <_kill_r+0x1c>
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	b103      	cbz	r3, 800853c <_kill_r+0x1c>
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	200002b4 	.word	0x200002b4

08008544 <_getpid_r>:
 8008544:	f7fa bda7 	b.w	8003096 <_getpid>

08008548 <_init>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	bf00      	nop
 800854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854e:	bc08      	pop	{r3}
 8008550:	469e      	mov	lr, r3
 8008552:	4770      	bx	lr

08008554 <_fini>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr
