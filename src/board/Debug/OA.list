
OA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08007c18  08007c18  00017c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008124  08008124  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008124  08008124  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008124  08008124  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008124  08008124  00018124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800812c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200001dc  08008308  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08008308  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d0  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a18  00000000  00000000  00030bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000325f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00033610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e3  00000000  00000000  00034560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d358  00000000  00000000  0004c943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ecc  00000000  00000000  00059c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3b67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005510  00000000  00000000  000e3bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c00 	.word	0x08007c00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007c00 	.word	0x08007c00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <bme_i2c_down>:
#include "lsm6ds3_reg.h"
#include "bme280.h"


static void bme_i2c_down(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fee:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <bme_i2c_down+0x14>)
 8000ff0:	f002 fc42 	bl	8003878 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40011000 	.word	0x40011000

08000ffc <bme_i2c_up>:


static void bme_i2c_up(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001006:	4802      	ldr	r0, [pc, #8]	; (8001010 <bme_i2c_up+0x14>)
 8001008:	f002 fc36 	bl	8003878 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40011000 	.word	0x40011000

08001014 <bme_i2c_read>:




static int32_t bme_i2c_read(void *handle, uint8_t reg_addr, uint8_t * data, uint16_t data_len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	461a      	mov	r2, r3
 8001020:	460b      	mov	r3, r1
 8001022:	72fb      	strb	r3, [r7, #11]
 8001024:	4613      	mov	r3, r2
 8001026:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c2;
	bme_i2c_down();
 8001028:	f7ff ffdc 	bl	8000fe4 <bme_i2c_down>

	HAL_I2C_Mem_Read(&hi2c2, BME280_I2C_ADDR_SEC, reg_addr, 1, data, data_len, HAL_MAX_DELAY);
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	b29a      	uxth	r2, r3
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	893b      	ldrh	r3, [r7, #8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2177      	movs	r1, #119	; 0x77
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <bme_i2c_read+0x44>)
 8001044:	f002 fe6e 	bl	8003d24 <HAL_I2C_Mem_Read>

	bme_i2c_up();
 8001048:	f7ff ffd8 	bl	8000ffc <bme_i2c_up>
	return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000024c 	.word	0x2000024c

0800105c <bme_i2c_write>:


static int32_t bme_i2c_write(void * handle, uint8_t reg_addr, const uint8_t * data, uint16_t data_len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	460b      	mov	r3, r1
 800106a:	72fb      	strb	r3, [r7, #11]
 800106c:	4613      	mov	r3, r2
 800106e:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c2;
	bme_i2c_down();
 8001070:	f7ff ffb8 	bl	8000fe4 <bme_i2c_down>

	HAL_I2C_Mem_Write(&hi2c2, BME280_I2C_ADDR_SEC, reg_addr, 1, (uint8_t*)data, data_len, HAL_MAX_DELAY);
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	b29a      	uxth	r2, r3
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2177      	movs	r1, #119	; 0x77
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <bme_i2c_write+0x44>)
 800108c:	f002 fd50 	bl	8003b30 <HAL_I2C_Mem_Write>

	bme_i2c_up();
 8001090:	f7ff ffb4 	bl	8000ffc <bme_i2c_up>
	return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000024c 	.word	0x2000024c

080010a4 <bme_delay_us>:

static void bme_delay_us(uint32_t period, void *intf_ptr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	if (period < 1000)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b4:	d202      	bcs.n	80010bc <bme_delay_us+0x18>
		period = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	e005      	b.n	80010c8 <bme_delay_us+0x24>
	else
		period = period / 1000;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <bme_delay_us+0x34>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	607b      	str	r3, [r7, #4]

	HAL_Delay(period);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f002 f949 	bl	8003360 <HAL_Delay>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	10624dd3 	.word	0x10624dd3

080010dc <lsm_i2c_read>:




static int32_t lsm_i2c_read(void *handle, uint8_t reg_addr, uint8_t * data, uint16_t data_len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	461a      	mov	r2, r3
 80010e8:	460b      	mov	r3, r1
 80010ea:	72fb      	strb	r3, [r7, #11]
 80010ec:	4613      	mov	r3, r2
 80010ee:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read(&hi2c1, LSM6DS3_I2C_ADD_H, reg_addr, 1, data, data_len, HAL_MAX_DELAY);
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	893b      	ldrh	r3, [r7, #8]
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	21d7      	movs	r1, #215	; 0xd7
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <lsm_i2c_read+0x3c>)
 8001108:	f002 fe0c 	bl	8003d24 <HAL_I2C_Mem_Read>
	return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001f8 	.word	0x200001f8

0800111c <lsm_i2c_write>:


static int32_t lsm_i2c_write(void * handle, uint8_t reg_addr, const uint8_t * data, uint16_t data_len)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af04      	add	r7, sp, #16
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	461a      	mov	r2, r3
 8001128:	460b      	mov	r3, r1
 800112a:	72fb      	strb	r3, [r7, #11]
 800112c:	4613      	mov	r3, r2
 800112e:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Write(&hi2c1, LSM6DS3_I2C_ADD_H, reg_addr, 1, (uint8_t*)data, data_len, HAL_MAX_DELAY);
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	b29a      	uxth	r2, r3
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	893b      	ldrh	r3, [r7, #8]
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	21d7      	movs	r1, #215	; 0xd7
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <lsm_i2c_write+0x3c>)
 8001148:	f002 fcf2 	bl	8003b30 <HAL_I2C_Mem_Write>
	return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f8 	.word	0x200001f8

0800115c <app_main>:



int app_main(void)
{
 800115c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001160:	b0bc      	sub	sp, #240	; 0xf0
 8001162:	af0c      	add	r7, sp, #48	; 0x30
	// Настройка bme280 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	struct bme280_dev bme = {0};
 8001164:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001168:	2248      	movs	r2, #72	; 0x48
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f81b 	bl	80051a8 <memset>
	bme.intf = BME280_I2C_INTF;
 8001172:	2301      	movs	r3, #1
 8001174:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	bme.intf_ptr = NULL;
 8001178:	2300      	movs	r3, #0
 800117a:	66fb      	str	r3, [r7, #108]	; 0x6c
	bme.read = bme_i2c_read;
 800117c:	4bc7      	ldr	r3, [pc, #796]	; (800149c <app_main+0x340>)
 800117e:	677b      	str	r3, [r7, #116]	; 0x74
	bme.write = bme_i2c_write;
 8001180:	4bc7      	ldr	r3, [pc, #796]	; (80014a0 <app_main+0x344>)
 8001182:	67bb      	str	r3, [r7, #120]	; 0x78
	bme.delay_us = bme_delay_us;
 8001184:	4bc7      	ldr	r3, [pc, #796]	; (80014a4 <app_main+0x348>)
 8001186:	67fb      	str	r3, [r7, #124]	; 0x7c

	int rc = bme280_soft_reset(&bme);
 8001188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fb53 	bl	8001838 <bme280_soft_reset>
 8001192:	4603      	mov	r3, r0
 8001194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 reset rc = %d\n", (int)rc);
 8001198:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800119c:	48c2      	ldr	r0, [pc, #776]	; (80014a8 <app_main+0x34c>)
 800119e:	f004 fc6b 	bl	8005a78 <iprintf>

	rc = bme280_init(&bme);
 80011a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f992 	bl	80014d0 <bme280_init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 init rc = %d\n", (int)rc);
 80011b2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80011b6:	48bd      	ldr	r0, [pc, #756]	; (80014ac <app_main+0x350>)
 80011b8:	f004 fc5e 	bl	8005a78 <iprintf>

	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 80011c2:	2305      	movs	r3, #5
 80011c4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	bme.settings.filter = BME280_FILTER_COEFF_16;
 80011ce:	2304      	movs	r3, #4
 80011d0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	bme.settings.standby_time = BME280_STANDBY_TIME_0_5_MS;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac

	uint8_t settings_sel;
	settings_sel = BME280_OSR_PRESS_SEL;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_OSR_TEMP_SEL;
 80011e0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_OSR_HUM_SEL;
 80011ec:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_FILTER_SEL;
 80011f8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_STANDBY_SEL;
 8001204:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	rc = bme280_set_sensor_settings(settings_sel, &bme);
 8001210:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001214:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fa5a 	bl	80016d4 <bme280_set_sensor_settings>
 8001220:	4603      	mov	r3, r0
 8001222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 settings set rc = %d\n", rc);
 8001226:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800122a:	48a1      	ldr	r0, [pc, #644]	; (80014b0 <app_main+0x354>)
 800122c:	f004 fc24 	bl	8005a78 <iprintf>
	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 8001230:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001234:	4619      	mov	r1, r3
 8001236:	2003      	movs	r0, #3
 8001238:	f000 faa1 	bl	800177e <bme280_set_sensor_mode>
 800123c:	4603      	mov	r3, r0
 800123e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 set sensor mode rc = %d\n", rc);
 8001242:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001246:	489b      	ldr	r0, [pc, #620]	; (80014b4 <app_main+0x358>)
 8001248:	f004 fc16 	bl	8005a78 <iprintf>


	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	stmdev_ctx_t ctx = {0};
 800124c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
	ctx.handle = NULL;
 8001258:	2300      	movs	r3, #0
 800125a:	667b      	str	r3, [r7, #100]	; 0x64
	ctx.read_reg = lsm_i2c_read;
 800125c:	4b96      	ldr	r3, [pc, #600]	; (80014b8 <app_main+0x35c>)
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
	ctx.write_reg = lsm_i2c_write;
 8001260:	4b96      	ldr	r3, [pc, #600]	; (80014bc <app_main+0x360>)
 8001262:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint8_t whoami = 0x00;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	lsm6ds3_device_id_get(&ctx, &whoami);
 800126a:	f107 025b 	add.w	r2, r7, #91	; 0x5b
 800126e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fd3c 	bl	8002cf2 <lsm6ds3_device_id_get>
	printf("got lsm6ds3 whoami 0x%02X, expected 0x%02X\n", (int)whoami, (int)LSM6DS3_ID);
 800127a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800127e:	2269      	movs	r2, #105	; 0x69
 8001280:	4619      	mov	r1, r3
 8001282:	488f      	ldr	r0, [pc, #572]	; (80014c0 <app_main+0x364>)
 8001284:	f004 fbf8 	bl	8005a78 <iprintf>

	lsm6ds3_reset_set(&ctx, PROPERTY_ENABLE);
 8001288:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800128c:	2101      	movs	r1, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fd40 	bl	8002d14 <lsm6ds3_reset_set>
	HAL_Delay(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f002 f863 	bl	8003360 <HAL_Delay>

	lsm6ds3_xl_full_scale_set(&ctx, LSM6DS3_16g);
 800129a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fbd5 	bl	8002a50 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_xl_data_rate_set(&ctx, LSM6DS3_XL_ODR_104Hz);
 80012a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012aa:	2104      	movs	r1, #4
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fbf5 	bl	8002a9c <lsm6ds3_xl_data_rate_set>

	lsm6ds3_gy_full_scale_set(&ctx, LSM6DS3_2000dps);
 80012b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012b6:	2106      	movs	r1, #6
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fc15 	bl	8002ae8 <lsm6ds3_gy_full_scale_set>
	lsm6ds3_gy_data_rate_set(&ctx, LSM6DS3_GY_ODR_104Hz);
 80012be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012c2:	2104      	movs	r1, #4
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fc35 	bl	8002b34 <lsm6ds3_gy_data_rate_set>
		// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw;
		int16_t acc_raw[3];
		int16_t gyro_raw[3];
		lsm6ds3_temperature_raw_get(&ctx, &temperature_raw);
 80012ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fc53 	bl	8002b80 <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(&ctx, acc_raw);
 80012da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fcb9 	bl	8002c5c <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(&ctx, gyro_raw);
 80012ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fc66 	bl	8002bc6 <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		float temperature_celsius;
		float acc_g[3];
		float gyro_dps[3];
		temperature_celsius = lsm6ds3_from_lsb_to_celsius(temperature_raw);
 80012fa:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fb8a 	bl	8002a18 <lsm6ds3_from_lsb_to_celsius>
 8001304:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		for (int i = 0; i < 3; i++)
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800130e:	e03c      	b.n	800138a <app_main+0x22e>
		{
			acc_g[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 8001310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	33a8      	adds	r3, #168	; 0xa8
 8001318:	f107 0218 	add.w	r2, r7, #24
 800131c:	4413      	add	r3, r2
 800131e:	f933 3c70 	ldrsh.w	r3, [r3, #-112]
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fb44 	bl	80029b0 <lsm6ds3_from_fs16g_to_mg>
 8001328:	4603      	mov	r3, r0
 800132a:	4966      	ldr	r1, [pc, #408]	; (80014c4 <app_main+0x368>)
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fdbd 	bl	8000eac <__aeabi_fdiv>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	33a8      	adds	r3, #168	; 0xa8
 800133e:	f107 0118 	add.w	r1, r7, #24
 8001342:	440b      	add	r3, r1
 8001344:	f843 2c84 	str.w	r2, [r3, #-132]
			gyro_dps[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 8001348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	33a8      	adds	r3, #168	; 0xa8
 8001350:	f107 0218 	add.w	r2, r7, #24
 8001354:	4413      	add	r3, r2
 8001356:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb46 	bl	80029ec <lsm6ds3_from_fs2000dps_to_mdps>
 8001360:	4603      	mov	r3, r0
 8001362:	4958      	ldr	r1, [pc, #352]	; (80014c4 <app_main+0x368>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fda1 	bl	8000eac <__aeabi_fdiv>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	33a8      	adds	r3, #168	; 0xa8
 8001376:	f107 0118 	add.w	r1, r7, #24
 800137a:	440b      	add	r3, r1
 800137c:	f843 2c90 	str.w	r2, [r3, #-144]
		for (int i = 0; i < 3; i++)
 8001380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001384:	3301      	adds	r3, #1
 8001386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800138a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800138e:	2b02      	cmp	r3, #2
 8001390:	ddbe      	ble.n	8001310 <app_main+0x1b4>
		}

		// Вывод
		printf(
 8001392:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001396:	f7ff f847 	bl	8000428 <__aeabi_f2d>
 800139a:	e9c7 0104 	strd	r0, r1, [r7, #16]
			" acc = %10.4f,%10.4f,%10.4f; gyro=%10.4f,%10.4f,%10.4f" " ||| ", //\n",
			temperature_celsius,
			acc_g[0], acc_g[1], acc_g[2],
 800139e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		printf(
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f841 	bl	8000428 <__aeabi_f2d>
 80013a6:	4680      	mov	r8, r0
 80013a8:	4689      	mov	r9, r1
			acc_g[0], acc_g[1], acc_g[2],
 80013aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		printf(
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f83b 	bl	8000428 <__aeabi_f2d>
 80013b2:	4682      	mov	sl, r0
 80013b4:	468b      	mov	fp, r1
			acc_g[0], acc_g[1], acc_g[2],
 80013b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		printf(
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f835 	bl	8000428 <__aeabi_f2d>
 80013be:	e9c7 0102 	strd	r0, r1, [r7, #8]
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		printf(
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	e9c7 0100 	strd	r0, r1, [r7]
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 80013ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		printf(
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f829 	bl	8000428 <__aeabi_f2d>
 80013d6:	4604      	mov	r4, r0
 80013d8:	460d      	mov	r5, r1
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 80013da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		printf(
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f823 	bl	8000428 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80013ea:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80013ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013f2:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80013f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80013fe:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001402:	e9cd 8900 	strd	r8, r9, [sp]
 8001406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800140a:	482f      	ldr	r0, [pc, #188]	; (80014c8 <app_main+0x36c>)
 800140c:	f004 fb34 	bl	8005a78 <iprintf>


		// Чтение данные из bme280
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		bme280_set_sensor_mode(BME280_FORCED_MODE, &bme);
 8001410:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001414:	4619      	mov	r1, r3
 8001416:	2001      	movs	r0, #1
 8001418:	f000 f9b1 	bl	800177e <bme280_set_sensor_mode>
		HAL_Delay(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f001 ff9f 	bl	8003360 <HAL_Delay>

		struct bme280_data comp_data;
		rc = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 8001422:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4619      	mov	r1, r3
 800142c:	2007      	movs	r0, #7
 800142e:	f000 fa52 	bl	80018d6 <bme280_get_sensor_data>
 8001432:	4603      	mov	r3, r0
 8001434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

		// Печать
		printf(
			"temp = %8.4f; pressure = %10.4f; hum = %10.4f\n",
			(float)comp_data.temperature,
 8001438:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb22 	bl	8000a88 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
		printf(
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffee 	bl	8000428 <__aeabi_f2d>
 800144c:	4680      	mov	r8, r0
 800144e:	4689      	mov	r9, r1
			(float)comp_data.pressure,
 8001450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb16 	bl	8000a88 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
		printf(
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ffe2 	bl	8000428 <__aeabi_f2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
			(float)comp_data.humidity
 8001468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fb0a 	bl	8000a88 <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
		printf(
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ffd6 	bl	8000428 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001484:	e9cd 4500 	strd	r4, r5, [sp]
 8001488:	4642      	mov	r2, r8
 800148a:	464b      	mov	r3, r9
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <app_main+0x370>)
 800148e:	f004 faf3 	bl	8005a78 <iprintf>
		);

		HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f001 ff64 	bl	8003360 <HAL_Delay>
	{
 8001498:	e717      	b.n	80012ca <app_main+0x16e>
 800149a:	bf00      	nop
 800149c:	08001015 	.word	0x08001015
 80014a0:	0800105d 	.word	0x0800105d
 80014a4:	080010a5 	.word	0x080010a5
 80014a8:	08007c18 	.word	0x08007c18
 80014ac:	08007c30 	.word	0x08007c30
 80014b0:	08007c48 	.word	0x08007c48
 80014b4:	08007c68 	.word	0x08007c68
 80014b8:	080010dd 	.word	0x080010dd
 80014bc:	0800111d 	.word	0x0800111d
 80014c0:	08007c88 	.word	0x08007c88
 80014c4:	447a0000 	.word	0x447a0000
 80014c8:	08007cb4 	.word	0x08007cb4
 80014cc:	08007cf0 	.word	0x08007cf0

080014d0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 80014d8:	2305      	movs	r3, #5
 80014da:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f001 fa15 	bl	8002910 <null_ptr_check>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d134      	bne.n	800155c <bme280_init+0x8c>
    {
        while (try_count)
 80014f2:	e029      	b.n	8001548 <bme280_init+0x78>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80014f4:	f107 010d 	add.w	r1, r7, #13
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	20d0      	movs	r0, #208	; 0xd0
 80014fe:	f000 f833 	bl	8001568 <bme280_get_regs>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if (rslt == BME280_OK)
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d111      	bne.n	8001532 <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 800150e:	7b7a      	ldrb	r2, [r7, #13]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f98f 	bl	8001838 <bme280_soft_reset>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d114      	bne.n	8001550 <bme280_init+0x80>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 f86c 	bl	8002604 <get_calib_data>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8001530:	e00e      	b.n	8001550 <bme280_init+0x80>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6852      	ldr	r2, [r2, #4]
 800153a:	4611      	mov	r1, r2
 800153c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001540:	4798      	blx	r3
            --try_count;
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	3b01      	subs	r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1d2      	bne.n	80014f4 <bme280_init+0x24>
 800154e:	e000      	b.n	8001552 <bme280_init+0x82>
                break;
 8001550:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <bme280_init+0x8c>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8001558:	23fe      	movs	r3, #254	; 0xfe
 800155a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	4613      	mov	r3, r2
 8001578:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f001 f9c8 	bl	8002910 <null_ptr_check>
 8001580:	4603      	mov	r3, r0
 8001582:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8001584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d11f      	bne.n	80015cc <bme280_get_regs+0x64>
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01c      	beq.n	80015cc <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7a1b      	ldrb	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d003      	beq.n	80015a2 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015a0:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68dc      	ldr	r4, [r3, #12]
 80015a6:	89ba      	ldrh	r2, [r7, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	7bf8      	ldrb	r0, [r7, #15]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	47a0      	blx	r4
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 80015c6:	23fc      	movs	r3, #252	; 0xfc
 80015c8:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80015ca:	e001      	b.n	80015d0 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80015cc:	23ff      	movs	r3, #255	; 0xff
 80015ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}

080015dc <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b08d      	sub	sp, #52	; 0x34
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b0a      	cmp	r3, #10
 80015f0:	d901      	bls.n	80015f6 <bme280_set_regs+0x1a>
    {
        len = 10;
 80015f2:	230a      	movs	r3, #10
 80015f4:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f001 f98a 	bl	8002910 <null_ptr_check>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001602:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001606:	2b00      	cmp	r3, #0
 8001608:	d159      	bne.n	80016be <bme280_set_regs+0xe2>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d056      	beq.n	80016be <bme280_set_regs+0xe2>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d053      	beq.n	80016be <bme280_set_regs+0xe2>
    {
        if (len != 0)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d04c      	beq.n	80016b6 <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	7a1b      	ldrb	r3, [r3, #8]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d01a      	beq.n	8001660 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001630:	e011      	b.n	8001656 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	440b      	add	r3, r1
 8001644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800164c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001650:	3301      	adds	r3, #1
 8001652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001656:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3e8      	bcc.n	8001632 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d90d      	bls.n	8001682 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f107 0114 	add.w	r1, r7, #20
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f001 f80d 	bl	800268e <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	b29b      	uxth	r3, r3
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001680:	e001      	b.n	8001686 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691c      	ldr	r4, [r3, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	7818      	ldrb	r0, [r3, #0]
 800168e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f107 0114 	add.w	r1, r7, #20
 8001698:	47a0      	blx	r4
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 80016ae:	23fc      	movs	r3, #252	; 0xfc
 80016b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80016b4:	e007      	b.n	80016c6 <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80016b6:	23fd      	movs	r3, #253	; 0xfd
 80016b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80016bc:	e003      	b.n	80016c6 <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80016c4:	e000      	b.n	80016c8 <bme280_set_regs+0xec>
        if (len != 0)
 80016c6:	bf00      	nop
    }

    return rslt;
 80016c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3734      	adds	r7, #52	; 0x34
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}

080016d4 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f001 f915 	bl	8002910 <null_ptr_check>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d13f      	bne.n	8001772 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80016f2:	f107 030e 	add.w	r3, r7, #14
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f874 	bl	80017e6 <bme280_get_sensor_mode>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <bme280_set_sensor_settings+0x46>
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f000 fb72 	bl	8001dfa <put_device_to_sleep>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BME280_OK)
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d127      	bne.n	8001772 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4619      	mov	r1, r3
 8001726:	2007      	movs	r0, #7
 8001728:	f001 f8d7 	bl	80028da <are_settings_changed>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f9b3 	bl	8001aa8 <set_osr_settings>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d111      	bne.n	8001772 <bme280_set_sensor_settings+0x9e>
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4619      	mov	r1, r3
 8001752:	2018      	movs	r0, #24
 8001754:	f001 f8c1 	bl	80028da <are_settings_changed>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fa3a 	bl	8001be2 <set_filter_standby_settings>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	6039      	str	r1, [r7, #0]
 8001788:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	f001 f8c0 	bl	8002910 <null_ptr_check>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d11e      	bne.n	80017da <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800179c:	f107 030e 	add.w	r3, r7, #14
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f81f 	bl	80017e6 <bme280_get_sensor_mode>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <bme280_set_sensor_mode+0x46>
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f000 fb1d 	bl	8001dfa <put_device_to_sleep>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fadf 	bl	8001d94 <write_power_mode>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f001 f88d 	bl	8002910 <null_ptr_check>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d112      	bne.n	8001828 <bme280_get_sensor_mode+0x42>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00f      	beq.n	8001828 <bme280_get_sensor_mode+0x42>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	20f4      	movs	r0, #244	; 0xf4
 8001810:	f7ff feaa 	bl	8001568 <bme280_get_regs>
 8001814:	4603      	mov	r3, r0
 8001816:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	b2da      	uxtb	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e001      	b.n	800182c <bme280_get_sensor_mode+0x46>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001828:	23ff      	movs	r3, #255	; 0xff
 800182a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001840:	23e0      	movs	r3, #224	; 0xe0
 8001842:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8001848:	2305      	movs	r3, #5
 800184a:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800184c:	23b6      	movs	r3, #182	; 0xb6
 800184e:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f001 f85d 	bl	8002910 <null_ptr_check>
 8001856:	4603      	mov	r3, r0
 8001858:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d133      	bne.n	80018ca <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001862:	f107 010b 	add.w	r1, r7, #11
 8001866:	f107 000d 	add.w	r0, r7, #13
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f7ff feb5 	bl	80015dc <bme280_set_regs>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d125      	bne.n	80018ca <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6852      	ldr	r2, [r2, #4]
 8001886:	4611      	mov	r1, r2
 8001888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800188c:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 800188e:	f107 010c 	add.w	r1, r7, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	20f3      	movs	r0, #243	; 0xf3
 8001898:	f7ff fe66 	bl	8001568 <bme280_get_regs>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <bme280_soft_reset+0x84>
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	73ba      	strb	r2, [r7, #14]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <bme280_soft_reset+0x84>
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e0      	bne.n	800187e <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80018bc:	7b3b      	ldrb	r3, [r7, #12]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80018c6:	23fa      	movs	r3, #250	; 0xfa
 80018c8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b08a      	sub	sp, #40	; 0x28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 f809 	bl	8002910 <null_ptr_check>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001908:	2b00      	cmp	r3, #0
 800190a:	d124      	bne.n	8001956 <bme280_get_sensor_data+0x80>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d021      	beq.n	8001956 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001912:	f107 011c 	add.w	r1, r7, #28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2208      	movs	r2, #8
 800191a:	20f7      	movs	r0, #247	; 0xf7
 800191c:	f7ff fe24 	bl	8001568 <bme280_get_regs>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8001926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800192a:	2b00      	cmp	r3, #0
 800192c:	d116      	bne.n	800195c <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800192e:	f107 0210 	add.w	r2, r7, #16
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f815 	bl	8001968 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3318      	adds	r3, #24
 8001942:	f107 0110 	add.w	r1, r7, #16
 8001946:	7bf8      	ldrb	r0, [r7, #15]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	f000 f852 	bl	80019f2 <bme280_compensate_data>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001954:	e002      	b.n	800195c <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001956:	23ff      	movs	r3, #255	; 0xff
 8001958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800195c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001960:	4618      	mov	r0, r3
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	031b      	lsls	r3, r3, #12
 8001978:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3302      	adds	r3, #2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	b2db      	uxtb	r3, r3
 800198e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	431a      	orrs	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	431a      	orrs	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3303      	adds	r3, #3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	031b      	lsls	r3, r3, #12
 80019a6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3304      	adds	r3, #4
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3305      	adds	r3, #5
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3306      	adds	r3, #6
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3307      	adds	r3, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	609a      	str	r2, [r3, #8]
}
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d045      	beq.n	8001a98 <bme280_compensate_data+0xa6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d042      	beq.n	8001a98 <bme280_compensate_data+0xa6>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03f      	beq.n	8001a98 <bme280_compensate_data+0xa6>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fa20 	bl	8001e94 <compensate_temperature>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        if (sensor_comp & BME280_PRESS)
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <bme280_compensate_data+0x88>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f000 fae0 	bl	8002030 <compensate_pressure>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BME280_HUM)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <bme280_compensate_data+0xaa>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001a84:	6839      	ldr	r1, [r7, #0]
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f000 fca0 	bl	80023cc <compensate_humidity>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (sensor_comp & BME280_HUM)
 8001a96:	e001      	b.n	8001a9c <bme280_compensate_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001a98:	23ff      	movs	r3, #255	; 0xff
 8001a9a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f000 f815 	bl	8001af6 <set_osr_humidity_settings>
 8001acc:	4603      	mov	r3, r0
 8001ace:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f842 	bl	8001b6a <set_osr_press_temp_settings>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001b00:	23f2      	movs	r3, #242	; 0xf2
 8001b02:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	789b      	ldrb	r3, [r3, #2]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001b10:	f107 010e 	add.w	r1, r7, #14
 8001b14:	f107 000c 	add.w	r0, r7, #12
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f7ff fd5e 	bl	80015dc <bme280_set_regs>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d118      	bne.n	8001b5e <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001b2c:	23f4      	movs	r3, #244	; 0xf4
 8001b2e:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001b30:	7b38      	ldrb	r0, [r7, #12]
 8001b32:	f107 010d 	add.w	r1, r7, #13
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f7ff fd15 	bl	8001568 <bme280_get_regs>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001b4a:	f107 010d 	add.w	r1, r7, #13
 8001b4e:	f107 000c 	add.w	r0, r7, #12
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f7ff fd41 	bl	80015dc <bme280_set_regs>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001b78:	23f4      	movs	r3, #244	; 0xf4
 8001b7a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001b7c:	7db8      	ldrb	r0, [r7, #22]
 8001b7e:	f107 0115 	add.w	r1, r7, #21
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f7ff fcef 	bl	8001568 <bme280_get_regs>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11f      	bne.n	8001bd6 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001ba0:	f107 0315 	add.w	r3, r7, #21
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f88c 	bl	8001cc4 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001bb6:	f107 0315 	add.w	r3, r7, #21
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f89d 	bl	8001cfc <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001bc2:	f107 0115 	add.w	r1, r7, #21
 8001bc6:	f107 0016 	add.w	r0, r7, #22
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f7ff fd05 	bl	80015dc <bme280_set_regs>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001bf0:	23f5      	movs	r3, #245	; 0xf5
 8001bf2:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001bf4:	7db8      	ldrb	r0, [r7, #22]
 8001bf6:	f107 0115 	add.w	r1, r7, #21
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f7ff fcb3 	bl	8001568 <bme280_get_regs>
 8001c02:	4603      	mov	r3, r0
 8001c04:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11f      	bne.n	8001c4e <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001c18:	f107 0315 	add.w	r3, r7, #21
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f81b 	bl	8001c5a <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001c2e:	f107 0315 	add.w	r3, r7, #21
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f82c 	bl	8001c92 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001c3a:	f107 0115 	add.w	r1, r7, #21
 8001c3e:	f107 0016 	add.w	r0, r7, #22
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f7ff fcc9 	bl	80015dc <bme280_set_regs>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	f023 031c 	bic.w	r3, r3, #28
 8001c6e:	b25a      	sxtb	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	f003 031c 	and.w	r3, r3, #28
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	701a      	strb	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	791b      	ldrb	r3, [r3, #4]
 8001cac:	015b      	lsls	r3, r3, #5
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	701a      	strb	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	f023 031c 	bic.w	r3, r3, #28
 8001cd8:	b25a      	sxtb	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	f003 031c 	and.w	r3, r3, #28
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	701a      	strb	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	785b      	ldrb	r3, [r3, #1]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	701a      	strb	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3302      	adds	r3, #2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	109b      	asrs	r3, r3, #2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3303      	adds	r3, #3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	109b      	asrs	r3, r3, #2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3303      	adds	r3, #3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	711a      	strb	r2, [r3, #4]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001da0:	23f4      	movs	r3, #244	; 0xf4
 8001da2:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001da4:	7bb8      	ldrb	r0, [r7, #14]
 8001da6:	f107 010d 	add.w	r1, r7, #13
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f7ff fbdb 	bl	8001568 <bme280_get_regs>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d117      	bne.n	8001dee <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001dbe:	7b7b      	ldrb	r3, [r7, #13]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	b25a      	sxtb	r2, r3
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001dda:	f107 010d 	add.w	r1, r7, #13
 8001dde:	f107 000e 	add.w	r0, r7, #14
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f7ff fbf9 	bl	80015dc <bme280_set_regs>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001e02:	f107 0110 	add.w	r1, r7, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	20f2      	movs	r0, #242	; 0xf2
 8001e0c:	f7ff fbac 	bl	8001568 <bme280_get_regs>
 8001e10:	4603      	mov	r3, r0
 8001e12:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d118      	bne.n	8001e4e <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001e1c:	f107 0208 	add.w	r2, r7, #8
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff81 	bl	8001d2e <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fd03 	bl	8001838 <bme280_soft_reset>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f808 	bl	8001e5a <reload_device_settings>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	201f      	movs	r0, #31
 8001e6a:	f7ff fe1d 	bl	8001aa8 <set_osr_settings>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	201f      	movs	r0, #31
 8001e80:	f7ff feaf 	bl	8001be2 <set_filter_standby_settings>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <compensate_temperature+0x184>)
 8001ea4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b5b      	ldr	r3, [pc, #364]	; (800201c <compensate_temperature+0x188>)
 8001eae:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fa94 	bl	80003e4 <__aeabi_ui2d>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <compensate_temperature+0x18c>)
 8001ec2:	f7fe fc33 	bl	800072c <__aeabi_ddiv>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fa86 	bl	80003e4 <__aeabi_ui2d>
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b51      	ldr	r3, [pc, #324]	; (8002024 <compensate_temperature+0x190>)
 8001ede:	f7fe fc25 	bl	800072c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe f93d 	bl	8000168 <__aeabi_dsub>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fa81 	bl	8000404 <__aeabi_i2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f0a:	f7fe fae5 	bl	80004d8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fa62 	bl	80003e4 <__aeabi_ui2d>
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001f28:	f7fe fc00 	bl	800072c <__aeabi_ddiv>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fa53 	bl	80003e4 <__aeabi_ui2d>
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <compensate_temperature+0x194>)
 8001f44:	f7fe fbf2 	bl	800072c <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe f90a 	bl	8000168 <__aeabi_dsub>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8001f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f64:	f7fe fab8 	bl	80004d8 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	461d      	mov	r5, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fa44 	bl	8000404 <__aeabi_i2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe faa8 	bl	80004d8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f98:	f7fe f8e8 	bl	800016c <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd48 	bl	8000a38 <__aeabi_d2iz>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001fae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fb6:	f7fe f8d9 	bl	800016c <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <compensate_temperature+0x198>)
 8001fc8:	f7fe fbb0 	bl	800072c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if (temperature < temperature_min)
 8001fd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fdc:	f7fe fcee 	bl	80009bc <__aeabi_dcmplt>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8001fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001fee:	e00c      	b.n	800200a <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ff8:	f7fe fcfe 	bl	80009f8 <__aeabi_dcmpgt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8002002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002006:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 800200a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}
 8002018:	c0440000 	.word	0xc0440000
 800201c:	40554000 	.word	0x40554000
 8002020:	40d00000 	.word	0x40d00000
 8002024:	40900000 	.word	0x40900000
 8002028:	40c00000 	.word	0x40c00000
 800202c:	40b40000 	.word	0x40b40000

08002030 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 800203a:	a3c5      	add	r3, pc, #788	; (adr r3, 8002350 <compensate_pressure+0x320>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8002044:	a3c4      	add	r3, pc, #784	; (adr r3, 8002358 <compensate_pressure+0x328>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe f9d6 	bl	8000404 <__aeabi_i2d>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002060:	f7fe fb64 	bl	800072c <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	4bbd      	ldr	r3, [pc, #756]	; (8002368 <compensate_pressure+0x338>)
 8002072:	f7fe f879 	bl	8000168 <__aeabi_dsub>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 800207e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002082:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002086:	f7fe fa27 	bl	80004d8 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f9b3 	bl	8000404 <__aeabi_i2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4620      	mov	r0, r4
 80020a4:	4629      	mov	r1, r5
 80020a6:	f7fe fa17 	bl	80004d8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4bad      	ldr	r3, [pc, #692]	; (800236c <compensate_pressure+0x33c>)
 80020b8:	f7fe fb38 	bl	800072c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f99a 	bl	8000404 <__aeabi_i2d>
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe fa00 	bl	80004d8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	f7fe f842 	bl	800016c <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f0:	f7fe f83c 	bl	800016c <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4b9b      	ldr	r3, [pc, #620]	; (8002370 <compensate_pressure+0x340>)
 8002102:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002106:	f7fe fb11 	bl	800072c <__aeabi_ddiv>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4614      	mov	r4, r2
 8002110:	461d      	mov	r5, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f973 	bl	8000404 <__aeabi_i2d>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b94      	ldr	r3, [pc, #592]	; (8002374 <compensate_pressure+0x344>)
 8002124:	f7fe f9d8 	bl	80004d8 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe f81c 	bl	800016c <__adddf3>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f95e 	bl	8000404 <__aeabi_i2d>
 8002148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214c:	f7fe f9c4 	bl	80004d8 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215c:	f7fe f9bc 	bl	80004d8 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b82      	ldr	r3, [pc, #520]	; (8002378 <compensate_pressure+0x348>)
 800216e:	f7fe fadd 	bl	800072c <__aeabi_ddiv>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f93f 	bl	8000404 <__aeabi_i2d>
 8002186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218a:	f7fe f9a5 	bl	80004d8 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800219a:	f7fd ffe7 	bl	800016c <__adddf3>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b73      	ldr	r3, [pc, #460]	; (8002378 <compensate_pressure+0x348>)
 80021ac:	f7fe fabe 	bl	800072c <__aeabi_ddiv>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b6b      	ldr	r3, [pc, #428]	; (800236c <compensate_pressure+0x33c>)
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	f7fe fab3 	bl	800072c <__aeabi_ddiv>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <compensate_pressure+0x34c>)
 80021d4:	f7fd ffca 	bl	800016c <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	88db      	ldrh	r3, [r3, #6]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f8fd 	bl	80003e4 <__aeabi_ui2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe f971 	bl	80004d8 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800220a:	f7fe fbf5 	bl	80009f8 <__aeabi_dcmpgt>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80d0 	beq.w	80023b6 <compensate_pressure+0x386>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f8e2 	bl	80003e4 <__aeabi_ui2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	f04f 0000 	mov.w	r0, #0
 8002228:	4955      	ldr	r1, [pc, #340]	; (8002380 <compensate_pressure+0x350>)
 800222a:	f7fd ff9d 	bl	8000168 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <compensate_pressure+0x354>)
 800223c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002240:	f7fe fa74 	bl	800072c <__aeabi_ddiv>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800224c:	f7fd ff8c 	bl	8000168 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	a341      	add	r3, pc, #260	; (adr r3, 8002360 <compensate_pressure+0x330>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe f93b 	bl	80004d8 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800226e:	f7fe fa5d 	bl	800072c <__aeabi_ddiv>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f8bf 	bl	8000404 <__aeabi_i2d>
 8002286:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800228a:	f7fe f925 	bl	80004d8 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800229a:	f7fe f91d 	bl	80004d8 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <compensate_pressure+0x358>)
 80022ac:	f7fe fa3e 	bl	800072c <__aeabi_ddiv>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f8a0 	bl	8000404 <__aeabi_i2d>
 80022c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022c8:	f7fe f906 	bl	80004d8 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <compensate_pressure+0x33c>)
 80022da:	f7fe fa27 	bl	800072c <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 80022e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ee:	f7fd ff3d 	bl	800016c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	461d      	mov	r5, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f87f 	bl	8000404 <__aeabi_i2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fd ff2d 	bl	800016c <__adddf3>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <compensate_pressure+0x35c>)
 8002320:	f7fe fa04 	bl	800072c <__aeabi_ddiv>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800232c:	f7fd ff1e 	bl	800016c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        if (pressure < pressure_min)
 8002338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800233c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002340:	f7fe fb3c 	bl	80009bc <__aeabi_dcmplt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d027      	beq.n	800239a <compensate_pressure+0x36a>
 800234a:	e021      	b.n	8002390 <compensate_pressure+0x360>
 800234c:	f3af 8000 	nop.w
 8002350:	00000000 	.word	0x00000000
 8002354:	40dd4c00 	.word	0x40dd4c00
 8002358:	00000000 	.word	0x00000000
 800235c:	40fadb00 	.word	0x40fadb00
 8002360:	00000000 	.word	0x00000000
 8002364:	40b86a00 	.word	0x40b86a00
 8002368:	40ef4000 	.word	0x40ef4000
 800236c:	40e00000 	.word	0x40e00000
 8002370:	40100000 	.word	0x40100000
 8002374:	40f00000 	.word	0x40f00000
 8002378:	41200000 	.word	0x41200000
 800237c:	3ff00000 	.word	0x3ff00000
 8002380:	41300000 	.word	0x41300000
 8002384:	40b00000 	.word	0x40b00000
 8002388:	41e00000 	.word	0x41e00000
 800238c:	40300000 	.word	0x40300000
        {
            pressure = pressure_min;
 8002390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002394:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002398:	e011      	b.n	80023be <compensate_pressure+0x38e>
        }
        else if (pressure > pressure_max)
 800239a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800239e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023a2:	f7fe fb29 	bl	80009f8 <__aeabi_dcmpgt>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <compensate_pressure+0x38e>
        {
            pressure = pressure_max;
 80023ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80023b4:	e003      	b.n	80023be <compensate_pressure+0x38e>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 80023b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 80023be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	3738      	adds	r7, #56	; 0x38
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}

080023cc <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b094      	sub	sp, #80	; 0x50
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <compensate_humidity+0x218>)
 80023e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f807 	bl	8000404 <__aeabi_i2d>
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <compensate_humidity+0x21c>)
 80023fc:	f7fd feb4 	bl	8000168 <__aeabi_dsub>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fd fff8 	bl	8000404 <__aeabi_i2d>
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <compensate_humidity+0x220>)
 800241a:	f7fe f85d 	bl	80004d8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4614      	mov	r4, r2
 8002424:	461d      	mov	r5, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fd ffe9 	bl	8000404 <__aeabi_i2d>
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b6e      	ldr	r3, [pc, #440]	; (80025f0 <compensate_humidity+0x224>)
 8002438:	f7fe f978 	bl	800072c <__aeabi_ddiv>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002448:	f7fe f846 	bl	80004d8 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd fe8a 	bl	800016c <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ffbd 	bl	80003e4 <__aeabi_ui2d>
 800246a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800246e:	f7fd fe7b 	bl	8000168 <__aeabi_dsub>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd ffbf 	bl	8000404 <__aeabi_i2d>
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <compensate_humidity+0x228>)
 800248c:	f7fe f94e 	bl	800072c <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	7f1b      	ldrb	r3, [r3, #28]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd ffa1 	bl	80003e4 <__aeabi_ui2d>
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <compensate_humidity+0x22c>)
 80024a8:	f7fe f940 	bl	800072c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024b8:	f7fe f80e 	bl	80004d8 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <compensate_humidity+0x230>)
 80024ca:	f7fd fe4f 	bl	800016c <__adddf3>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ff91 	bl	8000404 <__aeabi_i2d>
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <compensate_humidity+0x22c>)
 80024e8:	f7fe f920 	bl	800072c <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024f8:	f7fd ffee 	bl	80004d8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002508:	f7fd ffe6 	bl	80004d8 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	4b38      	ldr	r3, [pc, #224]	; (80025fc <compensate_humidity+0x230>)
 800251a:	f7fd fe27 	bl	800016c <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8002526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800252a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800252e:	f7fd ffd3 	bl	80004d8 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4614      	mov	r4, r2
 8002538:	461d      	mov	r5, r3
 800253a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800253e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002542:	f7fd ffc9 	bl	80004d8 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd ffc3 	bl	80004d8 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	7e1b      	ldrb	r3, [r3, #24]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff40 	bl	80003e4 <__aeabi_ui2d>
 8002564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002568:	f7fd ffb6 	bl	80004d8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <compensate_humidity+0x234>)
 800257a:	f7fe f8d7 	bl	800072c <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	491d      	ldr	r1, [pc, #116]	; (80025fc <compensate_humidity+0x230>)
 8002588:	f7fd fdee 	bl	8000168 <__aeabi_dsub>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002594:	f7fd ffa0 	bl	80004d8 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 80025a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025a8:	f7fe fa26 	bl	80009f8 <__aeabi_dcmpgt>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 80025b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80025ba:	e00c      	b.n	80025d6 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 80025bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025c4:	f7fe f9fa 	bl	80009bc <__aeabi_dcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 80025ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 80025d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	3750      	adds	r7, #80	; 0x50
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}
 80025e4:	40590000 	.word	0x40590000
 80025e8:	40f2c000 	.word	0x40f2c000
 80025ec:	40500000 	.word	0x40500000
 80025f0:	40d00000 	.word	0x40d00000
 80025f4:	40f00000 	.word	0x40f00000
 80025f8:	41900000 	.word	0x41900000
 80025fc:	3ff00000 	.word	0x3ff00000
 8002600:	41200000 	.word	0x41200000

08002604 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800260c:	2388      	movs	r3, #136	; 0x88
 800260e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002628:	f107 010c 	add.w	r1, r7, #12
 800262c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	221a      	movs	r2, #26
 8002634:	f7fe ff98 	bl	8001568 <bme280_get_regs>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 800263e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11d      	bne.n	8002682 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f849 	bl	80026e4 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002652:	23e1      	movs	r3, #225	; 0xe1
 8002654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002658:	f107 010c 	add.w	r1, r7, #12
 800265c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2207      	movs	r2, #7
 8002664:	f7fe ff80 	bl	8001568 <bme280_get_regs>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 800266e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f8df 	bl	8002840 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8002682:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002686:	4618      	mov	r0, r3
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800268e:	b480      	push	{r7}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
 80026a0:	e016      	b.n	80026d0 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	441a      	add	r2, r3
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	440b      	add	r3, r1
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	441a      	add	r2, r3
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4619      	mov	r1, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	440b      	add	r3, r1
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	3301      	adds	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
 80026d0:	7dfa      	ldrb	r2, [r7, #23]
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3e4      	bcc.n	80026a2 <interleave_reg_addr+0x14>
    }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3318      	adds	r3, #24
 80026f2:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3301      	adds	r3, #1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b21b      	sxth	r3, r3
 8002704:	4313      	orrs	r3, r2
 8002706:	b21b      	sxth	r3, r3
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3303      	adds	r3, #3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3302      	adds	r3, #2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21a      	sxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3305      	adds	r3, #5
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b21a      	sxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b21b      	sxth	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	b21a      	sxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3307      	adds	r3, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	b21a      	sxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3306      	adds	r3, #6
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	b21b      	sxth	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b21b      	sxth	r3, r3
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3309      	adds	r3, #9
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b21a      	sxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3308      	adds	r3, #8
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b21b      	sxth	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b21a      	sxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	330b      	adds	r3, #11
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	b21a      	sxth	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	330a      	adds	r3, #10
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b21b      	sxth	r3, r3
 800278a:	4313      	orrs	r3, r2
 800278c:	b21a      	sxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	330d      	adds	r3, #13
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21a      	sxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	330c      	adds	r3, #12
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	330f      	adds	r3, #15
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	330e      	adds	r3, #14
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3311      	adds	r3, #17
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3310      	adds	r3, #16
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	b21a      	sxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3313      	adds	r3, #19
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3312      	adds	r3, #18
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3315      	adds	r3, #21
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21a      	sxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3314      	adds	r3, #20
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b21b      	sxth	r3, r3
 800280c:	4313      	orrs	r3, r2
 800280e:	b21a      	sxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3317      	adds	r3, #23
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	b21a      	sxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3316      	adds	r3, #22
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b21b      	sxth	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b21a      	sxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7e5a      	ldrb	r2, [r3, #25]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	761a      	strb	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	3318      	adds	r3, #24
 800284e:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	b21a      	sxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b21b      	sxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b21a      	sxth	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	789a      	ldrb	r2, [r3, #2]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3303      	adds	r3, #3
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b25b      	sxtb	r3, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	b29b      	uxth	r3, r3
 800287e:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b21b      	sxth	r3, r3
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800288e:	8a7a      	ldrh	r2, [r7, #18]
 8002890:	8a3b      	ldrh	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	b21a      	sxth	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3305      	adds	r3, #5
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80028b6:	89fa      	ldrh	r2, [r7, #14]
 80028b8:	89bb      	ldrh	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b21a      	sxth	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3306      	adds	r3, #6
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b25a      	sxtb	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	460a      	mov	r2, r1
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80028ee:	79fa      	ldrb	r2, [r7, #7]
 80028f0:	79bb      	ldrb	r3, [r7, #6]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e001      	b.n	8002904 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <null_ptr_check+0x26>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <null_ptr_check+0x26>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <null_ptr_check+0x26>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8002936:	23ff      	movs	r3, #255	; 0xff
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e001      	b.n	8002940 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800294e:	b590      	push	{r4, r7, lr}
 8002950:	b087      	sub	sp, #28
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	461a      	mov	r2, r3
 800295a:	460b      	mov	r3, r1
 800295c:	72fb      	strb	r3, [r7, #11]
 800295e:	4613      	mov	r3, r2
 8002960:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685c      	ldr	r4, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6898      	ldr	r0, [r3, #8]
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	7af9      	ldrb	r1, [r7, #11]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	47a0      	blx	r4
 8002972:	6178      	str	r0, [r7, #20]

  return ret;
 8002974:	697b      	ldr	r3, [r7, #20]
}
 8002976:	4618      	mov	r0, r3
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}

0800297e <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	461a      	mov	r2, r3
 800298a:	460b      	mov	r3, r1
 800298c:	72fb      	strb	r3, [r7, #11]
 800298e:	4613      	mov	r3, r2
 8002990:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681c      	ldr	r4, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6898      	ldr	r0, [r3, #8]
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	7af9      	ldrb	r1, [r7, #11]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	47a0      	blx	r4
 80029a2:	6178      	str	r0, [r7, #20]

  return ret;
 80029a4:	697b      	ldr	r3, [r7, #20]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
	...

080029b0 <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 80029ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f96c 	bl	8000c9c <__aeabi_i2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4907      	ldr	r1, [pc, #28]	; (80029e4 <lsm6ds3_from_fs16g_to_mg+0x34>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f9bb 	bl	8000d44 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4905      	ldr	r1, [pc, #20]	; (80029e8 <lsm6ds3_from_fs16g_to_mg+0x38>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fa6a 	bl	8000eac <__aeabi_fdiv>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	43f40000 	.word	0x43f40000
 80029e8:	447a0000 	.word	0x447a0000

080029ec <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80029f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f94e 	bl	8000c9c <__aeabi_i2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4904      	ldr	r1, [pc, #16]	; (8002a14 <lsm6ds3_from_fs2000dps_to_mdps+0x28>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f99d 	bl	8000d44 <__aeabi_fmul>
 8002a0a:	4603      	mov	r3, r0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	428c0000 	.word	0x428c0000

08002a18 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe f938 	bl	8000c9c <__aeabi_i2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fa3a 	bl	8000eac <__aeabi_fdiv>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <lsm6ds3_from_lsb_to_celsius+0x34>)
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe f879 	bl	8000b34 <__addsf3>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	41c80000 	.word	0x41c80000

08002a50 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a5c:	f107 0208 	add.w	r2, r7, #8
 8002a60:	2301      	movs	r3, #1
 8002a62:	2110      	movs	r1, #16
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff72 	bl	800294e <lsm6ds3_read_reg>
 8002a6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	7a3b      	ldrb	r3, [r7, #8]
 8002a7c:	f362 0383 	bfi	r3, r2, #2, #2
 8002a80:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a82:	f107 0208 	add.w	r2, r7, #8
 8002a86:	2301      	movs	r3, #1
 8002a88:	2110      	movs	r1, #16
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff77 	bl	800297e <lsm6ds3_write_reg>
 8002a90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002aa8:	f107 0208 	add.w	r2, r7, #8
 8002aac:	2301      	movs	r3, #1
 8002aae:	2110      	movs	r1, #16
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff4c 	bl	800294e <lsm6ds3_read_reg>
 8002ab6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	7a3b      	ldrb	r3, [r7, #8]
 8002ac8:	f362 1307 	bfi	r3, r2, #4, #4
 8002acc:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002ace:	f107 0208 	add.w	r2, r7, #8
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2110      	movs	r1, #16
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff51 	bl	800297e <lsm6ds3_write_reg>
 8002adc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002af4:	f107 0208 	add.w	r2, r7, #8
 8002af8:	2301      	movs	r3, #1
 8002afa:	2111      	movs	r1, #17
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff26 	bl	800294e <lsm6ds3_read_reg>
 8002b02:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	7a3b      	ldrb	r3, [r7, #8]
 8002b14:	f362 0343 	bfi	r3, r2, #1, #3
 8002b18:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b1a:	f107 0208 	add.w	r2, r7, #8
 8002b1e:	2301      	movs	r3, #1
 8002b20:	2111      	movs	r1, #17
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff2b 	bl	800297e <lsm6ds3_write_reg>
 8002b28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b40:	f107 0208 	add.w	r2, r7, #8
 8002b44:	2301      	movs	r3, #1
 8002b46:	2111      	movs	r1, #17
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff00 	bl	800294e <lsm6ds3_read_reg>
 8002b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	7a3b      	ldrb	r3, [r7, #8]
 8002b60:	f362 1307 	bfi	r3, r2, #4, #4
 8002b64:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002b66:	f107 0208 	add.w	r2, r7, #8
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	2111      	movs	r1, #17
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff05 	bl	800297e <lsm6ds3_write_reg>
 8002b74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8002b8a:	f107 0208 	add.w	r2, r7, #8
 8002b8e:	2302      	movs	r3, #2
 8002b90:	2120      	movs	r1, #32
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fedb 	bl	800294e <lsm6ds3_read_reg>
 8002b98:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002b9a:	7a7b      	ldrb	r3, [r7, #9]
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	7a3b      	ldrb	r3, [r7, #8]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	801a      	strh	r2, [r3, #0]

  return ret;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8002bd0:	f107 020c 	add.w	r2, r7, #12
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	2122      	movs	r1, #34	; 0x22
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff feb8 	bl	800294e <lsm6ds3_read_reg>
 8002bde:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002be0:	7b7b      	ldrb	r3, [r7, #13]
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	7b3b      	ldrb	r3, [r7, #12]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3302      	adds	r3, #2
 8002c08:	b212      	sxth	r2, r2
 8002c0a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3302      	adds	r3, #2
 8002c26:	b212      	sxth	r2, r2
 8002c28:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002c2a:	7c7a      	ldrb	r2, [r7, #17]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	b212      	sxth	r2, r2
 8002c32:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3304      	adds	r3, #4
 8002c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	7c3b      	ldrb	r3, [r7, #16]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	b212      	sxth	r2, r2
 8002c50:	801a      	strh	r2, [r3, #0]

  return ret;
 8002c52:	697b      	ldr	r3, [r7, #20]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8002c66:	f107 020c 	add.w	r2, r7, #12
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	2128      	movs	r1, #40	; 0x28
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fe6d 	bl	800294e <lsm6ds3_read_reg>
 8002c74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c76:	7b7b      	ldrb	r3, [r7, #13]
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	7b3b      	ldrb	r3, [r7, #12]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	b212      	sxth	r2, r2
 8002ca0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	3302      	adds	r3, #2
 8002cbc:	b212      	sxth	r2, r2
 8002cbe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002cc0:	7c7a      	ldrb	r2, [r7, #17]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	b212      	sxth	r2, r2
 8002cc8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	7c3b      	ldrb	r3, [r7, #16]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	b212      	sxth	r2, r2
 8002ce6:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ce8:	697b      	ldr	r3, [r7, #20]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	210f      	movs	r1, #15
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fe23 	bl	800294e <lsm6ds3_read_reg>
 8002d08:	60f8      	str	r0, [r7, #12]

  return ret;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d20:	f107 0208 	add.w	r2, r7, #8
 8002d24:	2301      	movs	r3, #1
 8002d26:	2112      	movs	r1, #18
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fe10 	bl	800294e <lsm6ds3_read_reg>
 8002d2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	7a3b      	ldrb	r3, [r7, #8]
 8002d40:	f362 0300 	bfi	r3, r2, #0, #1
 8002d44:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002d46:	f107 0208 	add.w	r2, r7, #8
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2112      	movs	r1, #18
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fe15 	bl	800297e <lsm6ds3_write_reg>
 8002d54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d64:	f000 fa9a 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d68:	f000 f809 	bl	8002d7e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d6c:	f000 f89e 	bl	8002eac <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d70:	f000 f840 	bl	8002df4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002d74:	f000 f86c 	bl	8002e50 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8002d78:	f7fe f9f0 	bl	800115c <app_main>
  //bme280_set_regs( 4, BME280_I2C_INTF);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <main+0x1c>

08002d7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b090      	sub	sp, #64	; 0x40
 8002d82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d84:	f107 0318 	add.w	r3, r7, #24
 8002d88:	2228      	movs	r2, #40	; 0x28
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fa0b 	bl	80051a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da4:	2301      	movs	r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da8:	2310      	movs	r3, #16
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fdd1 	bl	800495c <HAL_RCC_OscConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002dc0:	f000 f8b4 	bl	8002f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 f83f 	bl	8004e60 <HAL_RCC_ClockConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002de8:	f000 f8a0 	bl	8002f2c <Error_Handler>
  }
}
 8002dec:	bf00      	nop
 8002dee:	3740      	adds	r7, #64	; 0x40
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <MX_I2C1_Init+0x54>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <MX_I2C1_Init+0x58>)
 8002e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e30:	4804      	ldr	r0, [pc, #16]	; (8002e44 <MX_I2C1_Init+0x50>)
 8002e32:	f000 fd39 	bl	80038a8 <HAL_I2C_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e3c:	f000 f876 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200001f8 	.word	0x200001f8
 8002e48:	40005400 	.word	0x40005400
 8002e4c:	000186a0 	.word	0x000186a0

08002e50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <MX_I2C2_Init+0x54>)
 8002e58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <MX_I2C2_Init+0x58>)
 8002e5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e8c:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <MX_I2C2_Init+0x50>)
 8002e8e:	f000 fd0b 	bl	80038a8 <HAL_I2C_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e98:	f000 f848 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	2000024c 	.word	0x2000024c
 8002ea4:	40005800 	.word	0x40005800
 8002ea8:	000186a0 	.word	0x000186a0

08002eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_GPIO_Init+0x78>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <MX_GPIO_Init+0x78>)
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_GPIO_Init+0x78>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <MX_GPIO_Init+0x78>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <MX_GPIO_Init+0x78>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_GPIO_Init+0x78>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ef6:	480c      	ldr	r0, [pc, #48]	; (8002f28 <MX_GPIO_Init+0x7c>)
 8002ef8:	f000 fcbe 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	4619      	mov	r1, r3
 8002f14:	4804      	ldr	r0, [pc, #16]	; (8002f28 <MX_GPIO_Init+0x7c>)
 8002f16:	f000 fb2b 	bl	8003570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40011000 	.word	0x40011000

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_MspInit+0x40>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_MspInit+0x40>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6193      	str	r3, [r2, #24]
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_MspInit+0x40>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_MspInit+0x40>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_MspInit+0x40>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_MspInit+0x40>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a32      	ldr	r2, [pc, #200]	; (8003060 <HAL_I2C_MspInit+0xe4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d133      	bne.n	8003004 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fba:	2312      	movs	r3, #18
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4827      	ldr	r0, [pc, #156]	; (8003068 <HAL_I2C_MspInit+0xec>)
 8002fca:	f000 fad1 	bl	8003570 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_I2C_MspInit+0xf0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe4:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_I2C_MspInit+0xf0>)
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff4:	61d3      	str	r3, [r2, #28]
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003002:	e029      	b.n	8003058 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_I2C_MspInit+0xf4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d124      	bne.n	8003058 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	6193      	str	r3, [r2, #24]
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003026:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800302c:	2312      	movs	r3, #18
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003030:	2303      	movs	r3, #3
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	4619      	mov	r1, r3
 800303a:	480b      	ldr	r0, [pc, #44]	; (8003068 <HAL_I2C_MspInit+0xec>)
 800303c:	f000 fa98 	bl	8003570 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8003046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800304a:	61d3      	str	r3, [r2, #28]
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	bf00      	nop
 800305a:	3730      	adds	r7, #48	; 0x30
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40005400 	.word	0x40005400
 8003064:	40021000 	.word	0x40021000
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40010000 	.word	0x40010000
 8003070:	40005800 	.word	0x40005800

08003074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <NMI_Handler+0x4>

0800307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <HardFault_Handler+0x4>

08003080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler+0x4>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <BusFault_Handler+0x4>

0800308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <UsageFault_Handler+0x4>

08003092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ba:	f000 f935 	bl	8003328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  return 1;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <_kill>:

int _kill(int pid, int sig)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030da:	f002 f83b 	bl	8005154 <__errno>
 80030de:	4603      	mov	r3, r0
 80030e0:	2216      	movs	r2, #22
 80030e2:	601a      	str	r2, [r3, #0]
  return -1;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_exit>:

void _exit (int status)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ffe7 	bl	80030d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003102:	e7fe      	b.n	8003102 <_exit+0x12>

08003104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e00a      	b.n	800312c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003116:	f3af 8000 	nop.w
 800311a:	4601      	mov	r1, r0
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60ba      	str	r2, [r7, #8]
 8003122:	b2ca      	uxtb	r2, r1
 8003124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	dbf0      	blt.n	8003116 <_read+0x12>
  }

  return len;
 8003134:	687b      	ldr	r3, [r7, #4]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e009      	b.n	8003164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60ba      	str	r2, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3301      	adds	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	dbf1      	blt.n	8003150 <_write+0x12>
  }
  return len;
 800316c:	687b      	ldr	r3, [r7, #4]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_close>:

int _close(int file)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800319c:	605a      	str	r2, [r3, #4]
  return 0;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <_isatty>:

int _isatty(int file)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
	...

080031d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <_sbrk+0x5c>)
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <_sbrk+0x60>)
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <_sbrk+0x64>)
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <_sbrk+0x68>)
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <_sbrk+0x64>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d207      	bcs.n	8003218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003208:	f001 ffa4 	bl	8005154 <__errno>
 800320c:	4603      	mov	r3, r0
 800320e:	220c      	movs	r2, #12
 8003210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003216:	e009      	b.n	800322c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <_sbrk+0x64>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <_sbrk+0x64>)
 8003228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20005000 	.word	0x20005000
 8003238:	00000400 	.word	0x00000400
 800323c:	200002a0 	.word	0x200002a0
 8003240:	200002b8 	.word	0x200002b8

08003244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003250:	f7ff fff8 	bl	8003244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003256:	490c      	ldr	r1, [pc, #48]	; (8003288 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003258:	4a0c      	ldr	r2, [pc, #48]	; (800328c <LoopFillZerobss+0x16>)
  movs r3, #0
 800325a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800325c:	e002      	b.n	8003264 <LoopCopyDataInit>

0800325e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003262:	3304      	adds	r3, #4

08003264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003268:	d3f9      	bcc.n	800325e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800326c:	4c09      	ldr	r4, [pc, #36]	; (8003294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003270:	e001      	b.n	8003276 <LoopFillZerobss>

08003272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003274:	3204      	adds	r2, #4

08003276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003278:	d3fb      	bcc.n	8003272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800327a:	f001 ff71 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800327e:	f7ff fd6f 	bl	8002d60 <main>
  bx lr
 8003282:	4770      	bx	lr
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800328c:	0800812c 	.word	0x0800812c
  ldr r2, =_sbss
 8003290:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003294:	200002b8 	.word	0x200002b8

08003298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC1_2_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_Init+0x28>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_Init+0x28>)
 80032a6:	f043 0310 	orr.w	r3, r3, #16
 80032aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ac:	2003      	movs	r0, #3
 80032ae:	f000 f92b 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032b2:	200f      	movs	r0, #15
 80032b4:	f000 f808 	bl	80032c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b8:	f7ff fe3e 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40022000 	.word	0x40022000

080032c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_InitTick+0x54>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_InitTick+0x58>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032de:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f935 	bl	8003556 <HAL_SYSTICK_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00e      	b.n	8003314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d80a      	bhi.n	8003312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fc:	2200      	movs	r2, #0
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003304:	f000 f90b 	bl	800351e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003308:	4a06      	ldr	r2, [pc, #24]	; (8003324 <HAL_InitTick+0x5c>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000000 	.word	0x20000000
 8003320:	20000008 	.word	0x20000008
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_IncTick+0x1c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_IncTick+0x20>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_IncTick+0x20>)
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	20000008 	.word	0x20000008
 8003348:	200002a4 	.word	0x200002a4

0800334c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return uwTick;
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <HAL_GetTick+0x10>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	200002a4 	.word	0x200002a4

08003360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff fff0 	bl	800334c <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003378:	d005      	beq.n	8003386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_Delay+0x44>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003386:	bf00      	nop
 8003388:	f7ff ffe0 	bl	800334c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d8f7      	bhi.n	8003388 <HAL_Delay+0x28>
  {
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000008 	.word	0x20000008

080033a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c4:	4013      	ands	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	60d3      	str	r3, [r2, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <__NVIC_GetPriorityGrouping+0x18>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 0307 	and.w	r3, r3, #7
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
         );
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d4:	d301      	bcc.n	80034da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00f      	b.n	80034fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <SysTick_Config+0x40>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e2:	210f      	movs	r1, #15
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034e8:	f7ff ff90 	bl	800340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SysTick_Config+0x40>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <SysTick_Config+0x40>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010

08003508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff49 	bl	80033a8 <__NVIC_SetPriorityGrouping>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003530:	f7ff ff5e 	bl	80033f0 <__NVIC_GetPriorityGrouping>
 8003534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff90 	bl	8003460 <NVIC_EncodePriority>
 8003540:	4602      	mov	r2, r0
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff5f 	bl	800340c <__NVIC_SetPriority>
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffb0 	bl	80034c4 <SysTick_Config>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b08b      	sub	sp, #44	; 0x2c
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800357e:	2300      	movs	r3, #0
 8003580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	e169      	b.n	8003858 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003584:	2201      	movs	r2, #1
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	429a      	cmp	r2, r3
 800359e:	f040 8158 	bne.w	8003852 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a9a      	ldr	r2, [pc, #616]	; (8003810 <HAL_GPIO_Init+0x2a0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d05e      	beq.n	800366a <HAL_GPIO_Init+0xfa>
 80035ac:	4a98      	ldr	r2, [pc, #608]	; (8003810 <HAL_GPIO_Init+0x2a0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d875      	bhi.n	800369e <HAL_GPIO_Init+0x12e>
 80035b2:	4a98      	ldr	r2, [pc, #608]	; (8003814 <HAL_GPIO_Init+0x2a4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d058      	beq.n	800366a <HAL_GPIO_Init+0xfa>
 80035b8:	4a96      	ldr	r2, [pc, #600]	; (8003814 <HAL_GPIO_Init+0x2a4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d86f      	bhi.n	800369e <HAL_GPIO_Init+0x12e>
 80035be:	4a96      	ldr	r2, [pc, #600]	; (8003818 <HAL_GPIO_Init+0x2a8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d052      	beq.n	800366a <HAL_GPIO_Init+0xfa>
 80035c4:	4a94      	ldr	r2, [pc, #592]	; (8003818 <HAL_GPIO_Init+0x2a8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d869      	bhi.n	800369e <HAL_GPIO_Init+0x12e>
 80035ca:	4a94      	ldr	r2, [pc, #592]	; (800381c <HAL_GPIO_Init+0x2ac>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d04c      	beq.n	800366a <HAL_GPIO_Init+0xfa>
 80035d0:	4a92      	ldr	r2, [pc, #584]	; (800381c <HAL_GPIO_Init+0x2ac>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d863      	bhi.n	800369e <HAL_GPIO_Init+0x12e>
 80035d6:	4a92      	ldr	r2, [pc, #584]	; (8003820 <HAL_GPIO_Init+0x2b0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d046      	beq.n	800366a <HAL_GPIO_Init+0xfa>
 80035dc:	4a90      	ldr	r2, [pc, #576]	; (8003820 <HAL_GPIO_Init+0x2b0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d85d      	bhi.n	800369e <HAL_GPIO_Init+0x12e>
 80035e2:	2b12      	cmp	r3, #18
 80035e4:	d82a      	bhi.n	800363c <HAL_GPIO_Init+0xcc>
 80035e6:	2b12      	cmp	r3, #18
 80035e8:	d859      	bhi.n	800369e <HAL_GPIO_Init+0x12e>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_GPIO_Init+0x80>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	0800366b 	.word	0x0800366b
 80035f4:	08003645 	.word	0x08003645
 80035f8:	08003657 	.word	0x08003657
 80035fc:	08003699 	.word	0x08003699
 8003600:	0800369f 	.word	0x0800369f
 8003604:	0800369f 	.word	0x0800369f
 8003608:	0800369f 	.word	0x0800369f
 800360c:	0800369f 	.word	0x0800369f
 8003610:	0800369f 	.word	0x0800369f
 8003614:	0800369f 	.word	0x0800369f
 8003618:	0800369f 	.word	0x0800369f
 800361c:	0800369f 	.word	0x0800369f
 8003620:	0800369f 	.word	0x0800369f
 8003624:	0800369f 	.word	0x0800369f
 8003628:	0800369f 	.word	0x0800369f
 800362c:	0800369f 	.word	0x0800369f
 8003630:	0800369f 	.word	0x0800369f
 8003634:	0800364d 	.word	0x0800364d
 8003638:	08003661 	.word	0x08003661
 800363c:	4a79      	ldr	r2, [pc, #484]	; (8003824 <HAL_GPIO_Init+0x2b4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003642:	e02c      	b.n	800369e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	623b      	str	r3, [r7, #32]
          break;
 800364a:	e029      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	3304      	adds	r3, #4
 8003652:	623b      	str	r3, [r7, #32]
          break;
 8003654:	e024      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	3308      	adds	r3, #8
 800365c:	623b      	str	r3, [r7, #32]
          break;
 800365e:	e01f      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	330c      	adds	r3, #12
 8003666:	623b      	str	r3, [r7, #32]
          break;
 8003668:	e01a      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003672:	2304      	movs	r3, #4
 8003674:	623b      	str	r3, [r7, #32]
          break;
 8003676:	e013      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003680:	2308      	movs	r3, #8
 8003682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	611a      	str	r2, [r3, #16]
          break;
 800368a:	e009      	b.n	80036a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800368c:	2308      	movs	r3, #8
 800368e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	615a      	str	r2, [r3, #20]
          break;
 8003696:	e003      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003698:	2300      	movs	r3, #0
 800369a:	623b      	str	r3, [r7, #32]
          break;
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x130>
          break;
 800369e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2bff      	cmp	r3, #255	; 0xff
 80036a4:	d801      	bhi.n	80036aa <HAL_GPIO_Init+0x13a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	e001      	b.n	80036ae <HAL_GPIO_Init+0x13e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2bff      	cmp	r3, #255	; 0xff
 80036b4:	d802      	bhi.n	80036bc <HAL_GPIO_Init+0x14c>
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	e002      	b.n	80036c2 <HAL_GPIO_Init+0x152>
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	3b08      	subs	r3, #8
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	210f      	movs	r1, #15
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	401a      	ands	r2, r3
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80b1 	beq.w	8003852 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036f0:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <HAL_GPIO_Init+0x2b8>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4a4c      	ldr	r2, [pc, #304]	; (8003828 <HAL_GPIO_Init+0x2b8>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6193      	str	r3, [r2, #24]
 80036fc:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <HAL_GPIO_Init+0x2b8>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003708:	4a48      	ldr	r2, [pc, #288]	; (800382c <HAL_GPIO_Init+0x2bc>)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	220f      	movs	r2, #15
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a40      	ldr	r2, [pc, #256]	; (8003830 <HAL_GPIO_Init+0x2c0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_GPIO_Init+0x1ec>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3f      	ldr	r2, [pc, #252]	; (8003834 <HAL_GPIO_Init+0x2c4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00d      	beq.n	8003758 <HAL_GPIO_Init+0x1e8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3e      	ldr	r2, [pc, #248]	; (8003838 <HAL_GPIO_Init+0x2c8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <HAL_GPIO_Init+0x1e4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3d      	ldr	r2, [pc, #244]	; (800383c <HAL_GPIO_Init+0x2cc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_GPIO_Init+0x1e0>
 800374c:	2303      	movs	r3, #3
 800374e:	e006      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 8003750:	2304      	movs	r3, #4
 8003752:	e004      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 8003754:	2302      	movs	r3, #2
 8003756:	e002      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_GPIO_Init+0x1ee>
 800375c:	2300      	movs	r3, #0
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800376e:	492f      	ldr	r1, [pc, #188]	; (800382c <HAL_GPIO_Init+0x2bc>)
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	492c      	ldr	r1, [pc, #176]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	43db      	mvns	r3, r3
 800379e:	4928      	ldr	r1, [pc, #160]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037b0:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	4922      	ldr	r1, [pc, #136]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60cb      	str	r3, [r1, #12]
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	491e      	ldr	r1, [pc, #120]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	4918      	ldr	r1, [pc, #96]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	e006      	b.n	80037f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	4914      	ldr	r1, [pc, #80]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d021      	beq.n	8003844 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	e021      	b.n	8003852 <HAL_GPIO_Init+0x2e2>
 800380e:	bf00      	nop
 8003810:	10320000 	.word	0x10320000
 8003814:	10310000 	.word	0x10310000
 8003818:	10220000 	.word	0x10220000
 800381c:	10210000 	.word	0x10210000
 8003820:	10120000 	.word	0x10120000
 8003824:	10110000 	.word	0x10110000
 8003828:	40021000 	.word	0x40021000
 800382c:	40010000 	.word	0x40010000
 8003830:	40010800 	.word	0x40010800
 8003834:	40010c00 	.word	0x40010c00
 8003838:	40011000 	.word	0x40011000
 800383c:	40011400 	.word	0x40011400
 8003840:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_GPIO_Init+0x304>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	43db      	mvns	r3, r3
 800384c:	4909      	ldr	r1, [pc, #36]	; (8003874 <HAL_GPIO_Init+0x304>)
 800384e:	4013      	ands	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	3301      	adds	r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	fa22 f303 	lsr.w	r3, r2, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	f47f ae8e 	bne.w	8003584 <HAL_GPIO_Init+0x14>
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	372c      	adds	r7, #44	; 0x2c
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	40010400 	.word	0x40010400

08003878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003888:	787b      	ldrb	r3, [r7, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003894:	e003      	b.n	800389e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	041a      	lsls	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e12b      	b.n	8003b12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fb54 	bl	8002f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800390a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800390c:	f001 fbf0 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 8003910:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a81      	ldr	r2, [pc, #516]	; (8003b1c <HAL_I2C_Init+0x274>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d807      	bhi.n	800392c <HAL_I2C_Init+0x84>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <HAL_I2C_Init+0x278>)
 8003920:	4293      	cmp	r3, r2
 8003922:	bf94      	ite	ls
 8003924:	2301      	movls	r3, #1
 8003926:	2300      	movhi	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e006      	b.n	800393a <HAL_I2C_Init+0x92>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a7d      	ldr	r2, [pc, #500]	; (8003b24 <HAL_I2C_Init+0x27c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	bf94      	ite	ls
 8003934:	2301      	movls	r3, #1
 8003936:	2300      	movhi	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0e7      	b.n	8003b12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a78      	ldr	r2, [pc, #480]	; (8003b28 <HAL_I2C_Init+0x280>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	0c9b      	lsrs	r3, r3, #18
 800394c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a6a      	ldr	r2, [pc, #424]	; (8003b1c <HAL_I2C_Init+0x274>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d802      	bhi.n	800397c <HAL_I2C_Init+0xd4>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3301      	adds	r3, #1
 800397a:	e009      	b.n	8003990 <HAL_I2C_Init+0xe8>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	4a69      	ldr	r2, [pc, #420]	; (8003b2c <HAL_I2C_Init+0x284>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	3301      	adds	r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	495c      	ldr	r1, [pc, #368]	; (8003b1c <HAL_I2C_Init+0x274>)
 80039ac:	428b      	cmp	r3, r1
 80039ae:	d819      	bhi.n	80039e4 <HAL_I2C_Init+0x13c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e59      	subs	r1, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039c4:	400b      	ands	r3, r1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_I2C_Init+0x138>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e59      	subs	r1, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039de:	e051      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 80039e0:	2304      	movs	r3, #4
 80039e2:	e04f      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <HAL_I2C_Init+0x168>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e58      	subs	r0, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e012      	b.n	8003a36 <HAL_I2C_Init+0x18e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	0099      	lsls	r1, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x196>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e022      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <HAL_I2C_Init+0x1bc>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1e58      	subs	r0, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	440b      	add	r3, r1
 8003a54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a62:	e00f      	b.n	8003a84 <HAL_I2C_Init+0x1dc>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	6809      	ldr	r1, [r1, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6911      	ldr	r1, [r2, #16]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68d2      	ldr	r2, [r2, #12]
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	000186a0 	.word	0x000186a0
 8003b20:	001e847f 	.word	0x001e847f
 8003b24:	003d08ff 	.word	0x003d08ff
 8003b28:	431bde83 	.word	0x431bde83
 8003b2c:	10624dd3 	.word	0x10624dd3

08003b30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4a:	f7ff fbff 	bl	800334c <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	f040 80d9 	bne.w	8003d10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2319      	movs	r3, #25
 8003b64:	2201      	movs	r2, #1
 8003b66:	496d      	ldr	r1, [pc, #436]	; (8003d1c <HAL_I2C_Mem_Write+0x1ec>)
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fcc1 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0cc      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_I2C_Mem_Write+0x56>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e0c5      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d007      	beq.n	8003bac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2221      	movs	r2, #33	; 0x21
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a4d      	ldr	r2, [pc, #308]	; (8003d20 <HAL_I2C_Mem_Write+0x1f0>)
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bee:	88f8      	ldrh	r0, [r7, #6]
 8003bf0:	893a      	ldrh	r2, [r7, #8]
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 faf8 	bl	80041f4 <I2C_RequestMemoryWrite>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d052      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e081      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fd86 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d107      	bne.n	8003c36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06b      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d11b      	bne.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d017      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1aa      	bne.n	8003c0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fd79 	bl	80047b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e016      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	00100002 	.word	0x00100002
 8003d20:	ffff0000 	.word	0xffff0000

08003d24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d42:	f7ff fb03 	bl	800334c <HAL_GetTick>
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	f040 8244 	bne.w	80041de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2319      	movs	r3, #25
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4982      	ldr	r1, [pc, #520]	; (8003f68 <HAL_I2C_Mem_Read+0x244>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fbc5 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e237      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x5a>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e230      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d007      	beq.n	8003da4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2222      	movs	r2, #34	; 0x22
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a62      	ldr	r2, [pc, #392]	; (8003f6c <HAL_I2C_Mem_Read+0x248>)
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003de6:	88f8      	ldrh	r0, [r7, #6]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	8979      	ldrh	r1, [r7, #10]
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	4603      	mov	r3, r0
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa92 	bl	8004320 <I2C_RequestMemoryRead>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1ec      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d113      	bne.n	8003e36 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e1c0      	b.n	80041b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d11e      	bne.n	8003e7c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e4e:	b672      	cpsid	i
}
 8003e50:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e78:	b662      	cpsie	i
}
 8003e7a:	e035      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d11e      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e94:	b672      	cpsid	i
}
 8003e96:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ebe:	b662      	cpsie	i
}
 8003ec0:	e012      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ee8:	e166      	b.n	80041b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	f200 811f 	bhi.w	8004132 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d123      	bne.n	8003f44 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fc9f 	bl	8004844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e167      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f42:	e139      	b.n	80041b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d152      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	2200      	movs	r2, #0
 8003f54:	4906      	ldr	r1, [pc, #24]	; (8003f70 <HAL_I2C_Mem_Read+0x24c>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 faca 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e13c      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
 8003f66:	bf00      	nop
 8003f68:	00100002 	.word	0x00100002
 8003f6c:	ffff0000 	.word	0xffff0000
 8003f70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
}
 8003f76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fba:	b662      	cpsie	i
}
 8003fbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff0:	e0e2      	b.n	80041b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	497b      	ldr	r1, [pc, #492]	; (80041e8 <HAL_I2C_Mem_Read+0x4c4>)
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa77 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0e9      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800401c:	b672      	cpsid	i
}
 800401e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004052:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_I2C_Mem_Read+0x4c8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	4a65      	ldr	r2, [pc, #404]	; (80041f0 <HAL_I2C_Mem_Read+0x4cc>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a1a      	lsrs	r2, r3, #8
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00da      	lsls	r2, r3, #3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	3b01      	subs	r3, #1
 8004070:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d118      	bne.n	80040aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800409a:	b662      	cpsie	i
}
 800409c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e09a      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d1d9      	bne.n	800406c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040fa:	b662      	cpsie	i
}
 80040fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004130:	e042      	b.n	80041b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fb84 	bl	8004844 <I2C_WaitOnRXNEFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e04c      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d118      	bne.n	80041b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f ae94 	bne.w	8003eea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3728      	adds	r7, #40	; 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	00010004 	.word	0x00010004
 80041ec:	20000000 	.word	0x20000000
 80041f0:	14f8b589 	.word	0x14f8b589

080041f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	460b      	mov	r3, r1
 8004208:	813b      	strh	r3, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	2200      	movs	r2, #0
 8004226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f960 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004244:	d103      	bne.n	800424e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e05f      	b.n	8004312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004252:	897b      	ldrh	r3, [r7, #10]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	492d      	ldr	r1, [pc, #180]	; (800431c <I2C_RequestMemoryWrite+0x128>)
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f9bb 	bl	80045e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e04c      	b.n	8004312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fa46 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d107      	bne.n	80042b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e02b      	b.n	8004312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]
 80042ca:	e021      	b.n	8004310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042dc:	6a39      	ldr	r1, [r7, #32]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fa20 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d107      	bne.n	8004302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e005      	b.n	8004312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004306:	893b      	ldrh	r3, [r7, #8]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	00010002 	.word	0x00010002

08004320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4603      	mov	r3, r0
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	460b      	mov	r3, r1
 8004334:	813b      	strh	r3, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004348:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2200      	movs	r2, #0
 8004362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8c2 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004380:	d103      	bne.n	800438a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0aa      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800439c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	4952      	ldr	r1, [pc, #328]	; (80044ec <I2C_RequestMemoryRead+0x1cc>)
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f91d 	bl	80045e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e097      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	6a39      	ldr	r1, [r7, #32]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f9a8 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00d      	beq.n	80043f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d107      	bne.n	80043f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e076      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]
 8004406:	e021      	b.n	800444c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	6a39      	ldr	r1, [r7, #32]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f982 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d107      	bne.n	800443e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e050      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004442:	893b      	ldrh	r3, [r7, #8]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	6a39      	ldr	r1, [r7, #32]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f967 	bl	8004724 <I2C_WaitOnTXEFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2b04      	cmp	r3, #4
 8004462:	d107      	bne.n	8004474 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004472:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e035      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004486:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2200      	movs	r2, #0
 8004490:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f82b 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	d103      	bne.n	80044b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e013      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	4906      	ldr	r1, [pc, #24]	; (80044ec <I2C_RequestMemoryRead+0x1cc>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f886 	bl	80045e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	00010002 	.word	0x00010002

080044f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004500:	e048      	b.n	8004594 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004508:	d044      	beq.n	8004594 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe ff1f 	bl	800334c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d139      	bne.n	8004594 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d10d      	bne.n	8004546 <I2C_WaitOnFlagUntilTimeout+0x56>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	e00c      	b.n	8004560 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	43da      	mvns	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	429a      	cmp	r2, r3
 8004564:	d116      	bne.n	8004594 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e023      	b.n	80045dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10d      	bne.n	80045ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	43da      	mvns	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4013      	ands	r3, r2
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf0c      	ite	eq
 80045b0:	2301      	moveq	r3, #1
 80045b2:	2300      	movne	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	e00c      	b.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d093      	beq.n	8004502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f2:	e071      	b.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d123      	bne.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004612:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800461c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0204 	orr.w	r2, r3, #4
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e067      	b.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004652:	d041      	beq.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004654:	f7fe fe7a 	bl	800334c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d302      	bcc.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d136      	bne.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10c      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e00b      	b.n	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	43da      	mvns	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e021      	b.n	800471c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10c      	bne.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	43da      	mvns	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e00b      	b.n	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4013      	ands	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	f47f af6d 	bne.w	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004730:	e034      	b.n	800479c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f8e3 	bl	80048fe <I2C_IsAcknowledgeFailed>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e034      	b.n	80047ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d028      	beq.n	800479c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fe fdff 	bl	800334c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d016      	beq.n	800479c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e007      	b.n	80047ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b80      	cmp	r3, #128	; 0x80
 80047a8:	d1c3      	bne.n	8004732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c0:	e034      	b.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f89b 	bl	80048fe <I2C_IsAcknowledgeFailed>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e034      	b.n	800483c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d8:	d028      	beq.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fdb7 	bl	800334c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11d      	bne.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d016      	beq.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e007      	b.n	800483c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b04      	cmp	r3, #4
 8004838:	d1c3      	bne.n	80047c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004850:	e049      	b.n	80048e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b10      	cmp	r3, #16
 800485e:	d119      	bne.n	8004894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0210 	mvn.w	r2, #16
 8004868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e030      	b.n	80048f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004894:	f7fe fd5a 	bl	800334c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d11d      	bne.n	80048e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d016      	beq.n	80048e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e007      	b.n	80048f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d1ae      	bne.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004914:	d11b      	bne.n	800494e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800491e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0204 	orr.w	r2, r3, #4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
	...

0800495c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e272      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8087 	beq.w	8004a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800497c:	4b92      	ldr	r3, [pc, #584]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b04      	cmp	r3, #4
 8004986:	d00c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004988:	4b8f      	ldr	r3, [pc, #572]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b08      	cmp	r3, #8
 8004992:	d112      	bne.n	80049ba <HAL_RCC_OscConfig+0x5e>
 8004994:	4b8c      	ldr	r3, [pc, #560]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d10b      	bne.n	80049ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a2:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d06c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x12c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d168      	bne.n	8004a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e24c      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x76>
 80049c4:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a7f      	ldr	r2, [pc, #508]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e02e      	b.n	8004a30 <HAL_RCC_OscConfig+0xd4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x98>
 80049da:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7a      	ldr	r2, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b78      	ldr	r3, [pc, #480]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a77      	ldr	r2, [pc, #476]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e01d      	b.n	8004a30 <HAL_RCC_OscConfig+0xd4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCC_OscConfig+0xbc>
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a71      	ldr	r2, [pc, #452]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	4b6f      	ldr	r3, [pc, #444]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6e      	ldr	r2, [pc, #440]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e00b      	b.n	8004a30 <HAL_RCC_OscConfig+0xd4>
 8004a18:	4b6b      	ldr	r3, [pc, #428]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6a      	ldr	r2, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b68      	ldr	r3, [pc, #416]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a67      	ldr	r2, [pc, #412]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d013      	beq.n	8004a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fe fc88 	bl	800334c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a40:	f7fe fc84 	bl	800334c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e200      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0xe4>
 8004a5e:	e014      	b.n	8004a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe fc74 	bl	800334c <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a68:	f7fe fc70 	bl	800334c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1ec      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x10c>
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d063      	beq.n	8004b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a96:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aa2:	4b49      	ldr	r3, [pc, #292]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d11c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x18c>
 8004aae:	4b46      	ldr	r3, [pc, #280]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aba:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x176>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e1c0      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4939      	ldr	r1, [pc, #228]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae6:	e03a      	b.n	8004b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCC_OscConfig+0x270>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fe fc29 	bl	800334c <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fe fc25 	bl	800334c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1a1      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4927      	ldr	r1, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]
 8004b30:	e015      	b.n	8004b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <HAL_RCC_OscConfig+0x270>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fe fc08 	bl	800334c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b40:	f7fe fc04 	bl	800334c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e180      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d03a      	beq.n	8004be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d019      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b72:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <HAL_RCC_OscConfig+0x274>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7fe fbe8 	bl	800334c <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b80:	f7fe fbe4 	bl	800334c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e160      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f000 faba 	bl	8005118 <RCC_Delay>
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bac:	f7fe fbce 	bl	800334c <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fe fbca 	bl	800334c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d908      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e146      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	42420000 	.word	0x42420000
 8004bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd4:	4b92      	ldr	r3, [pc, #584]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e9      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a6 	beq.w	8004d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf2:	4b8b      	ldr	r3, [pc, #556]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4a87      	ldr	r2, [pc, #540]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	61d3      	str	r3, [r2, #28]
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1a:	4b82      	ldr	r3, [pc, #520]	; (8004e24 <HAL_RCC_OscConfig+0x4c8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d118      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c26:	4b7f      	ldr	r3, [pc, #508]	; (8004e24 <HAL_RCC_OscConfig+0x4c8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	; (8004e24 <HAL_RCC_OscConfig+0x4c8>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c32:	f7fe fb8b 	bl	800334c <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fe fb87 	bl	800334c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b64      	cmp	r3, #100	; 0x64
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e103      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	4b75      	ldr	r3, [pc, #468]	; (8004e24 <HAL_RCC_OscConfig+0x4c8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x312>
 8004c60:	4b6f      	ldr	r3, [pc, #444]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4a6e      	ldr	r2, [pc, #440]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	e02d      	b.n	8004cca <HAL_RCC_OscConfig+0x36e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x334>
 8004c76:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4a69      	ldr	r2, [pc, #420]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	6213      	str	r3, [r2, #32]
 8004c82:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4a66      	ldr	r2, [pc, #408]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	f023 0304 	bic.w	r3, r3, #4
 8004c8c:	6213      	str	r3, [r2, #32]
 8004c8e:	e01c      	b.n	8004cca <HAL_RCC_OscConfig+0x36e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	d10c      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x356>
 8004c98:	4b61      	ldr	r3, [pc, #388]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	4a60      	ldr	r2, [pc, #384]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004c9e:	f043 0304 	orr.w	r3, r3, #4
 8004ca2:	6213      	str	r3, [r2, #32]
 8004ca4:	4b5e      	ldr	r3, [pc, #376]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4a5d      	ldr	r2, [pc, #372]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	e00b      	b.n	8004cca <HAL_RCC_OscConfig+0x36e>
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4a5a      	ldr	r2, [pc, #360]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6213      	str	r3, [r2, #32]
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4a57      	ldr	r2, [pc, #348]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d015      	beq.n	8004cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fb3b 	bl	800334c <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fe fb37 	bl	800334c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0b1      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ee      	beq.n	8004cda <HAL_RCC_OscConfig+0x37e>
 8004cfc:	e014      	b.n	8004d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfe:	f7fe fb25 	bl	800334c <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d04:	e00a      	b.n	8004d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fe fb21 	bl	800334c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e09b      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1c:	4b40      	ldr	r3, [pc, #256]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ee      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2e:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8087 	beq.w	8004e52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d061      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d146      	bne.n	8004de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d58:	4b33      	ldr	r3, [pc, #204]	; (8004e28 <HAL_RCC_OscConfig+0x4cc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fe faf5 	bl	800334c <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fe faf1 	bl	800334c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e06d      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d78:	4b29      	ldr	r3, [pc, #164]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d108      	bne.n	8004da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4921      	ldr	r1, [pc, #132]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a19      	ldr	r1, [r3, #32]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	430b      	orrs	r3, r1
 8004db2:	491b      	ldr	r1, [pc, #108]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fe fac5 	bl	800334c <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fe fac1 	bl	800334c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e03d      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dd8:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x46a>
 8004de4:	e035      	b.n	8004e52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RCC_OscConfig+0x4cc>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe faae 	bl	800334c <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fe faaa 	bl	800334c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e026      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x498>
 8004e12:	e01e      	b.n	8004e52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e019      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40007000 	.word	0x40007000
 8004e28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCC_OscConfig+0x500>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000

08004e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0d0      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e74:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d910      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b67      	ldr	r3, [pc, #412]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 0207 	bic.w	r2, r3, #7
 8004e8a:	4965      	ldr	r1, [pc, #404]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b63      	ldr	r3, [pc, #396]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0b8      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ebc:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a58      	ldr	r2, [pc, #352]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed4:	4b53      	ldr	r3, [pc, #332]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a52      	ldr	r2, [pc, #328]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee0:	4b50      	ldr	r3, [pc, #320]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	494d      	ldr	r1, [pc, #308]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d040      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	4b47      	ldr	r3, [pc, #284]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d115      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e07f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e073      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e06b      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4936      	ldr	r1, [pc, #216]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f50:	f7fe f9fc 	bl	800334c <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7fe f9f8 	bl	800334c <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e053      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 020c 	and.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1eb      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d210      	bcs.n	8004fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b24      	ldr	r3, [pc, #144]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 0207 	bic.w	r2, r3, #7
 8004f96:	4922      	ldr	r1, [pc, #136]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e032      	b.n	8005016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4916      	ldr	r1, [pc, #88]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	490e      	ldr	r1, [pc, #56]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fee:	f000 f821 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	490a      	ldr	r1, [pc, #40]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8005000:	5ccb      	ldrb	r3, [r1, r3]
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1cc>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_ClockConfig+0x1d0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe f95a 	bl	80032c8 <HAL_InitTick>

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40022000 	.word	0x40022000
 8005024:	40021000 	.word	0x40021000
 8005028:	08007d20 	.word	0x08007d20
 800502c:	20000000 	.word	0x20000000
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800504e:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b04      	cmp	r3, #4
 800505c:	d002      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x30>
 800505e:	2b08      	cmp	r3, #8
 8005060:	d003      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0x36>
 8005062:	e027      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005064:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_RCC_GetSysClockFreq+0x98>)
 8005066:	613b      	str	r3, [r7, #16]
      break;
 8005068:	e027      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	0c9b      	lsrs	r3, r3, #18
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	4a17      	ldr	r2, [pc, #92]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005074:	5cd3      	ldrb	r3, [r2, r3]
 8005076:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d010      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	0c5b      	lsrs	r3, r3, #17
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800508e:	5cd3      	ldrb	r3, [r2, r3]
 8005090:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <HAL_RCC_GetSysClockFreq+0x98>)
 8005096:	fb03 f202 	mul.w	r2, r3, r2
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e004      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	613b      	str	r3, [r7, #16]
      break;
 80050b2:	e002      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetSysClockFreq+0x98>)
 80050b6:	613b      	str	r3, [r7, #16]
      break;
 80050b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ba:	693b      	ldr	r3, [r7, #16]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	007a1200 	.word	0x007a1200
 80050d0:	08007d38 	.word	0x08007d38
 80050d4:	08007d48 	.word	0x08007d48
 80050d8:	003d0900 	.word	0x003d0900

080050dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e0:	4b02      	ldr	r3, [pc, #8]	; (80050ec <HAL_RCC_GetHCLKFreq+0x10>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	20000000 	.word	0x20000000

080050f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050f4:	f7ff fff2 	bl	80050dc <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4903      	ldr	r1, [pc, #12]	; (8005114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40021000 	.word	0x40021000
 8005114:	08007d30 	.word	0x08007d30

08005118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <RCC_Delay+0x34>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <RCC_Delay+0x38>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	0a5b      	lsrs	r3, r3, #9
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005134:	bf00      	nop
  }
  while (Delay --);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f9      	bne.n	8005134 <RCC_Delay+0x1c>
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	20000000 	.word	0x20000000
 8005150:	10624dd3 	.word	0x10624dd3

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	; (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	2000000c 	.word	0x2000000c

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	2600      	movs	r6, #0
 8005164:	4d0c      	ldr	r5, [pc, #48]	; (8005198 <__libc_init_array+0x38>)
 8005166:	4c0d      	ldr	r4, [pc, #52]	; (800519c <__libc_init_array+0x3c>)
 8005168:	1b64      	subs	r4, r4, r5
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	42a6      	cmp	r6, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	f002 fd46 	bl	8007c00 <_init>
 8005174:	2600      	movs	r6, #0
 8005176:	4d0a      	ldr	r5, [pc, #40]	; (80051a0 <__libc_init_array+0x40>)
 8005178:	4c0a      	ldr	r4, [pc, #40]	; (80051a4 <__libc_init_array+0x44>)
 800517a:	1b64      	subs	r4, r4, r5
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	42a6      	cmp	r6, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	f855 3b04 	ldr.w	r3, [r5], #4
 8005188:	4798      	blx	r3
 800518a:	3601      	adds	r6, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005192:	4798      	blx	r3
 8005194:	3601      	adds	r6, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	08008124 	.word	0x08008124
 800519c:	08008124 	.word	0x08008124
 80051a0:	08008124 	.word	0x08008124
 80051a4:	08008128 	.word	0x08008128

080051a8 <memset>:
 80051a8:	4603      	mov	r3, r0
 80051aa:	4402      	add	r2, r0
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d100      	bne.n	80051b2 <memset+0xa>
 80051b0:	4770      	bx	lr
 80051b2:	f803 1b01 	strb.w	r1, [r3], #1
 80051b6:	e7f9      	b.n	80051ac <memset+0x4>

080051b8 <__cvt>:
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051be:	461f      	mov	r7, r3
 80051c0:	bfbb      	ittet	lt
 80051c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80051c6:	461f      	movlt	r7, r3
 80051c8:	2300      	movge	r3, #0
 80051ca:	232d      	movlt	r3, #45	; 0x2d
 80051cc:	b088      	sub	sp, #32
 80051ce:	4614      	mov	r4, r2
 80051d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051d4:	7013      	strb	r3, [r2, #0]
 80051d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80051dc:	f023 0820 	bic.w	r8, r3, #32
 80051e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051e4:	d005      	beq.n	80051f2 <__cvt+0x3a>
 80051e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051ea:	d100      	bne.n	80051ee <__cvt+0x36>
 80051ec:	3501      	adds	r5, #1
 80051ee:	2302      	movs	r3, #2
 80051f0:	e000      	b.n	80051f4 <__cvt+0x3c>
 80051f2:	2303      	movs	r3, #3
 80051f4:	aa07      	add	r2, sp, #28
 80051f6:	9204      	str	r2, [sp, #16]
 80051f8:	aa06      	add	r2, sp, #24
 80051fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051fe:	e9cd 3500 	strd	r3, r5, [sp]
 8005202:	4622      	mov	r2, r4
 8005204:	463b      	mov	r3, r7
 8005206:	f000 fcdb 	bl	8005bc0 <_dtoa_r>
 800520a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800520e:	4606      	mov	r6, r0
 8005210:	d102      	bne.n	8005218 <__cvt+0x60>
 8005212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005214:	07db      	lsls	r3, r3, #31
 8005216:	d522      	bpl.n	800525e <__cvt+0xa6>
 8005218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800521c:	eb06 0905 	add.w	r9, r6, r5
 8005220:	d110      	bne.n	8005244 <__cvt+0x8c>
 8005222:	7833      	ldrb	r3, [r6, #0]
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d10a      	bne.n	800523e <__cvt+0x86>
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	4620      	mov	r0, r4
 800522e:	4639      	mov	r1, r7
 8005230:	f7fb fbba 	bl	80009a8 <__aeabi_dcmpeq>
 8005234:	b918      	cbnz	r0, 800523e <__cvt+0x86>
 8005236:	f1c5 0501 	rsb	r5, r5, #1
 800523a:	f8ca 5000 	str.w	r5, [sl]
 800523e:	f8da 3000 	ldr.w	r3, [sl]
 8005242:	4499      	add	r9, r3
 8005244:	2200      	movs	r2, #0
 8005246:	2300      	movs	r3, #0
 8005248:	4620      	mov	r0, r4
 800524a:	4639      	mov	r1, r7
 800524c:	f7fb fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8005250:	b108      	cbz	r0, 8005256 <__cvt+0x9e>
 8005252:	f8cd 901c 	str.w	r9, [sp, #28]
 8005256:	2230      	movs	r2, #48	; 0x30
 8005258:	9b07      	ldr	r3, [sp, #28]
 800525a:	454b      	cmp	r3, r9
 800525c:	d307      	bcc.n	800526e <__cvt+0xb6>
 800525e:	4630      	mov	r0, r6
 8005260:	9b07      	ldr	r3, [sp, #28]
 8005262:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005264:	1b9b      	subs	r3, r3, r6
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	b008      	add	sp, #32
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	9107      	str	r1, [sp, #28]
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e7f0      	b.n	8005258 <__cvt+0xa0>

08005276 <__exponent>:
 8005276:	4603      	mov	r3, r0
 8005278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527a:	2900      	cmp	r1, #0
 800527c:	f803 2b02 	strb.w	r2, [r3], #2
 8005280:	bfb6      	itet	lt
 8005282:	222d      	movlt	r2, #45	; 0x2d
 8005284:	222b      	movge	r2, #43	; 0x2b
 8005286:	4249      	neglt	r1, r1
 8005288:	2909      	cmp	r1, #9
 800528a:	7042      	strb	r2, [r0, #1]
 800528c:	dd2b      	ble.n	80052e6 <__exponent+0x70>
 800528e:	f10d 0407 	add.w	r4, sp, #7
 8005292:	46a4      	mov	ip, r4
 8005294:	270a      	movs	r7, #10
 8005296:	fb91 f6f7 	sdiv	r6, r1, r7
 800529a:	460a      	mov	r2, r1
 800529c:	46a6      	mov	lr, r4
 800529e:	fb07 1516 	mls	r5, r7, r6, r1
 80052a2:	2a63      	cmp	r2, #99	; 0x63
 80052a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80052a8:	4631      	mov	r1, r6
 80052aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80052ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052b2:	dcf0      	bgt.n	8005296 <__exponent+0x20>
 80052b4:	3130      	adds	r1, #48	; 0x30
 80052b6:	f1ae 0502 	sub.w	r5, lr, #2
 80052ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052be:	4629      	mov	r1, r5
 80052c0:	1c44      	adds	r4, r0, #1
 80052c2:	4561      	cmp	r1, ip
 80052c4:	d30a      	bcc.n	80052dc <__exponent+0x66>
 80052c6:	f10d 0209 	add.w	r2, sp, #9
 80052ca:	eba2 020e 	sub.w	r2, r2, lr
 80052ce:	4565      	cmp	r5, ip
 80052d0:	bf88      	it	hi
 80052d2:	2200      	movhi	r2, #0
 80052d4:	4413      	add	r3, r2
 80052d6:	1a18      	subs	r0, r3, r0
 80052d8:	b003      	add	sp, #12
 80052da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052e4:	e7ed      	b.n	80052c2 <__exponent+0x4c>
 80052e6:	2330      	movs	r3, #48	; 0x30
 80052e8:	3130      	adds	r1, #48	; 0x30
 80052ea:	7083      	strb	r3, [r0, #2]
 80052ec:	70c1      	strb	r1, [r0, #3]
 80052ee:	1d03      	adds	r3, r0, #4
 80052f0:	e7f1      	b.n	80052d6 <__exponent+0x60>
	...

080052f4 <_printf_float>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	b091      	sub	sp, #68	; 0x44
 80052fa:	460c      	mov	r4, r1
 80052fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005300:	4616      	mov	r6, r2
 8005302:	461f      	mov	r7, r3
 8005304:	4605      	mov	r5, r0
 8005306:	f001 fb3f 	bl	8006988 <_localeconv_r>
 800530a:	6803      	ldr	r3, [r0, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	9309      	str	r3, [sp, #36]	; 0x24
 8005310:	f7fa ff1e 	bl	8000150 <strlen>
 8005314:	2300      	movs	r3, #0
 8005316:	930e      	str	r3, [sp, #56]	; 0x38
 8005318:	f8d8 3000 	ldr.w	r3, [r8]
 800531c:	900a      	str	r0, [sp, #40]	; 0x28
 800531e:	3307      	adds	r3, #7
 8005320:	f023 0307 	bic.w	r3, r3, #7
 8005324:	f103 0208 	add.w	r2, r3, #8
 8005328:	f894 9018 	ldrb.w	r9, [r4, #24]
 800532c:	f8d4 b000 	ldr.w	fp, [r4]
 8005330:	f8c8 2000 	str.w	r2, [r8]
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800533c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005340:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005344:	930b      	str	r3, [sp, #44]	; 0x2c
 8005346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800534a:	4640      	mov	r0, r8
 800534c:	4b9c      	ldr	r3, [pc, #624]	; (80055c0 <_printf_float+0x2cc>)
 800534e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005350:	f7fb fb5c 	bl	8000a0c <__aeabi_dcmpun>
 8005354:	bb70      	cbnz	r0, 80053b4 <_printf_float+0xc0>
 8005356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800535a:	4640      	mov	r0, r8
 800535c:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <_printf_float+0x2cc>)
 800535e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005360:	f7fb fb36 	bl	80009d0 <__aeabi_dcmple>
 8005364:	bb30      	cbnz	r0, 80053b4 <_printf_float+0xc0>
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	4640      	mov	r0, r8
 800536c:	4651      	mov	r1, sl
 800536e:	f7fb fb25 	bl	80009bc <__aeabi_dcmplt>
 8005372:	b110      	cbz	r0, 800537a <_printf_float+0x86>
 8005374:	232d      	movs	r3, #45	; 0x2d
 8005376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537a:	4b92      	ldr	r3, [pc, #584]	; (80055c4 <_printf_float+0x2d0>)
 800537c:	4892      	ldr	r0, [pc, #584]	; (80055c8 <_printf_float+0x2d4>)
 800537e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005382:	bf94      	ite	ls
 8005384:	4698      	movls	r8, r3
 8005386:	4680      	movhi	r8, r0
 8005388:	2303      	movs	r3, #3
 800538a:	f04f 0a00 	mov.w	sl, #0
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	f02b 0304 	bic.w	r3, fp, #4
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	4633      	mov	r3, r6
 8005398:	4621      	mov	r1, r4
 800539a:	4628      	mov	r0, r5
 800539c:	9700      	str	r7, [sp, #0]
 800539e:	aa0f      	add	r2, sp, #60	; 0x3c
 80053a0:	f000 f9d4 	bl	800574c <_printf_common>
 80053a4:	3001      	adds	r0, #1
 80053a6:	f040 8090 	bne.w	80054ca <_printf_float+0x1d6>
 80053aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ae:	b011      	add	sp, #68	; 0x44
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	4642      	mov	r2, r8
 80053b6:	4653      	mov	r3, sl
 80053b8:	4640      	mov	r0, r8
 80053ba:	4651      	mov	r1, sl
 80053bc:	f7fb fb26 	bl	8000a0c <__aeabi_dcmpun>
 80053c0:	b148      	cbz	r0, 80053d6 <_printf_float+0xe2>
 80053c2:	f1ba 0f00 	cmp.w	sl, #0
 80053c6:	bfb8      	it	lt
 80053c8:	232d      	movlt	r3, #45	; 0x2d
 80053ca:	4880      	ldr	r0, [pc, #512]	; (80055cc <_printf_float+0x2d8>)
 80053cc:	bfb8      	it	lt
 80053ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053d2:	4b7f      	ldr	r3, [pc, #508]	; (80055d0 <_printf_float+0x2dc>)
 80053d4:	e7d3      	b.n	800537e <_printf_float+0x8a>
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	d142      	bne.n	8005466 <_printf_float+0x172>
 80053e0:	2306      	movs	r3, #6
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	9206      	str	r2, [sp, #24]
 80053e8:	aa0e      	add	r2, sp, #56	; 0x38
 80053ea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80053ee:	aa0d      	add	r2, sp, #52	; 0x34
 80053f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80053f4:	9203      	str	r2, [sp, #12]
 80053f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80053fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	6863      	ldr	r3, [r4, #4]
 8005402:	4642      	mov	r2, r8
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4628      	mov	r0, r5
 8005408:	4653      	mov	r3, sl
 800540a:	910b      	str	r1, [sp, #44]	; 0x2c
 800540c:	f7ff fed4 	bl	80051b8 <__cvt>
 8005410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005412:	4680      	mov	r8, r0
 8005414:	2947      	cmp	r1, #71	; 0x47
 8005416:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005418:	d108      	bne.n	800542c <_printf_float+0x138>
 800541a:	1cc8      	adds	r0, r1, #3
 800541c:	db02      	blt.n	8005424 <_printf_float+0x130>
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	4299      	cmp	r1, r3
 8005422:	dd40      	ble.n	80054a6 <_printf_float+0x1b2>
 8005424:	f1a9 0902 	sub.w	r9, r9, #2
 8005428:	fa5f f989 	uxtb.w	r9, r9
 800542c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005430:	d81f      	bhi.n	8005472 <_printf_float+0x17e>
 8005432:	464a      	mov	r2, r9
 8005434:	3901      	subs	r1, #1
 8005436:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800543a:	910d      	str	r1, [sp, #52]	; 0x34
 800543c:	f7ff ff1b 	bl	8005276 <__exponent>
 8005440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005442:	4682      	mov	sl, r0
 8005444:	1813      	adds	r3, r2, r0
 8005446:	2a01      	cmp	r2, #1
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	dc02      	bgt.n	8005452 <_printf_float+0x15e>
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	07d2      	lsls	r2, r2, #31
 8005450:	d501      	bpl.n	8005456 <_printf_float+0x162>
 8005452:	3301      	adds	r3, #1
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800545a:	2b00      	cmp	r3, #0
 800545c:	d09b      	beq.n	8005396 <_printf_float+0xa2>
 800545e:	232d      	movs	r3, #45	; 0x2d
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005464:	e797      	b.n	8005396 <_printf_float+0xa2>
 8005466:	2947      	cmp	r1, #71	; 0x47
 8005468:	d1bc      	bne.n	80053e4 <_printf_float+0xf0>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ba      	bne.n	80053e4 <_printf_float+0xf0>
 800546e:	2301      	movs	r3, #1
 8005470:	e7b7      	b.n	80053e2 <_printf_float+0xee>
 8005472:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005476:	d118      	bne.n	80054aa <_printf_float+0x1b6>
 8005478:	2900      	cmp	r1, #0
 800547a:	6863      	ldr	r3, [r4, #4]
 800547c:	dd0b      	ble.n	8005496 <_printf_float+0x1a2>
 800547e:	6121      	str	r1, [r4, #16]
 8005480:	b913      	cbnz	r3, 8005488 <_printf_float+0x194>
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	07d0      	lsls	r0, r2, #31
 8005486:	d502      	bpl.n	800548e <_printf_float+0x19a>
 8005488:	3301      	adds	r3, #1
 800548a:	440b      	add	r3, r1
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	f04f 0a00 	mov.w	sl, #0
 8005492:	65a1      	str	r1, [r4, #88]	; 0x58
 8005494:	e7df      	b.n	8005456 <_printf_float+0x162>
 8005496:	b913      	cbnz	r3, 800549e <_printf_float+0x1aa>
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	07d2      	lsls	r2, r2, #31
 800549c:	d501      	bpl.n	80054a2 <_printf_float+0x1ae>
 800549e:	3302      	adds	r3, #2
 80054a0:	e7f4      	b.n	800548c <_printf_float+0x198>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e7f2      	b.n	800548c <_printf_float+0x198>
 80054a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80054aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ac:	4299      	cmp	r1, r3
 80054ae:	db05      	blt.n	80054bc <_printf_float+0x1c8>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	6121      	str	r1, [r4, #16]
 80054b4:	07d8      	lsls	r0, r3, #31
 80054b6:	d5ea      	bpl.n	800548e <_printf_float+0x19a>
 80054b8:	1c4b      	adds	r3, r1, #1
 80054ba:	e7e7      	b.n	800548c <_printf_float+0x198>
 80054bc:	2900      	cmp	r1, #0
 80054be:	bfcc      	ite	gt
 80054c0:	2201      	movgt	r2, #1
 80054c2:	f1c1 0202 	rsble	r2, r1, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	e7e0      	b.n	800548c <_printf_float+0x198>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	055a      	lsls	r2, r3, #21
 80054ce:	d407      	bmi.n	80054e0 <_printf_float+0x1ec>
 80054d0:	6923      	ldr	r3, [r4, #16]
 80054d2:	4642      	mov	r2, r8
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	d12b      	bne.n	8005536 <_printf_float+0x242>
 80054de:	e764      	b.n	80053aa <_printf_float+0xb6>
 80054e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054e4:	f240 80dd 	bls.w	80056a2 <_printf_float+0x3ae>
 80054e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	f7fb fa5a 	bl	80009a8 <__aeabi_dcmpeq>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d033      	beq.n	8005560 <_printf_float+0x26c>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <_printf_float+0x2e0>)
 8005500:	47b8      	blx	r7
 8005502:	3001      	adds	r0, #1
 8005504:	f43f af51 	beq.w	80053aa <_printf_float+0xb6>
 8005508:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800550c:	429a      	cmp	r2, r3
 800550e:	db02      	blt.n	8005516 <_printf_float+0x222>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	07d8      	lsls	r0, r3, #31
 8005514:	d50f      	bpl.n	8005536 <_printf_float+0x242>
 8005516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800551a:	4631      	mov	r1, r6
 800551c:	4628      	mov	r0, r5
 800551e:	47b8      	blx	r7
 8005520:	3001      	adds	r0, #1
 8005522:	f43f af42 	beq.w	80053aa <_printf_float+0xb6>
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	f104 091a 	add.w	r9, r4, #26
 800552e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005530:	3b01      	subs	r3, #1
 8005532:	4543      	cmp	r3, r8
 8005534:	dc09      	bgt.n	800554a <_printf_float+0x256>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	079b      	lsls	r3, r3, #30
 800553a:	f100 8102 	bmi.w	8005742 <_printf_float+0x44e>
 800553e:	68e0      	ldr	r0, [r4, #12]
 8005540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005542:	4298      	cmp	r0, r3
 8005544:	bfb8      	it	lt
 8005546:	4618      	movlt	r0, r3
 8005548:	e731      	b.n	80053ae <_printf_float+0xba>
 800554a:	2301      	movs	r3, #1
 800554c:	464a      	mov	r2, r9
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	f43f af28 	beq.w	80053aa <_printf_float+0xb6>
 800555a:	f108 0801 	add.w	r8, r8, #1
 800555e:	e7e6      	b.n	800552e <_printf_float+0x23a>
 8005560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005562:	2b00      	cmp	r3, #0
 8005564:	dc38      	bgt.n	80055d8 <_printf_float+0x2e4>
 8005566:	2301      	movs	r3, #1
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <_printf_float+0x2e0>)
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f af1a 	beq.w	80053aa <_printf_float+0xb6>
 8005576:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800557a:	4313      	orrs	r3, r2
 800557c:	d102      	bne.n	8005584 <_printf_float+0x290>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	07d9      	lsls	r1, r3, #31
 8005582:	d5d8      	bpl.n	8005536 <_printf_float+0x242>
 8005584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af0b 	beq.w	80053aa <_printf_float+0xb6>
 8005594:	f04f 0900 	mov.w	r9, #0
 8005598:	f104 0a1a 	add.w	sl, r4, #26
 800559c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800559e:	425b      	negs	r3, r3
 80055a0:	454b      	cmp	r3, r9
 80055a2:	dc01      	bgt.n	80055a8 <_printf_float+0x2b4>
 80055a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a6:	e794      	b.n	80054d2 <_printf_float+0x1de>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4652      	mov	r2, sl
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f aef9 	beq.w	80053aa <_printf_float+0xb6>
 80055b8:	f109 0901 	add.w	r9, r9, #1
 80055bc:	e7ee      	b.n	800559c <_printf_float+0x2a8>
 80055be:	bf00      	nop
 80055c0:	7fefffff 	.word	0x7fefffff
 80055c4:	08007d50 	.word	0x08007d50
 80055c8:	08007d54 	.word	0x08007d54
 80055cc:	08007d5c 	.word	0x08007d5c
 80055d0:	08007d58 	.word	0x08007d58
 80055d4:	08007d60 	.word	0x08007d60
 80055d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055dc:	429a      	cmp	r2, r3
 80055de:	bfa8      	it	ge
 80055e0:	461a      	movge	r2, r3
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	4691      	mov	r9, r2
 80055e6:	dc37      	bgt.n	8005658 <_printf_float+0x364>
 80055e8:	f04f 0b00 	mov.w	fp, #0
 80055ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055f0:	f104 021a 	add.w	r2, r4, #26
 80055f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80055f8:	ebaa 0309 	sub.w	r3, sl, r9
 80055fc:	455b      	cmp	r3, fp
 80055fe:	dc33      	bgt.n	8005668 <_printf_float+0x374>
 8005600:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005604:	429a      	cmp	r2, r3
 8005606:	db3b      	blt.n	8005680 <_printf_float+0x38c>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07da      	lsls	r2, r3, #31
 800560c:	d438      	bmi.n	8005680 <_printf_float+0x38c>
 800560e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005610:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005612:	eba3 020a 	sub.w	r2, r3, sl
 8005616:	eba3 0901 	sub.w	r9, r3, r1
 800561a:	4591      	cmp	r9, r2
 800561c:	bfa8      	it	ge
 800561e:	4691      	movge	r9, r2
 8005620:	f1b9 0f00 	cmp.w	r9, #0
 8005624:	dc34      	bgt.n	8005690 <_printf_float+0x39c>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800562e:	f104 0a1a 	add.w	sl, r4, #26
 8005632:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	eba3 0309 	sub.w	r3, r3, r9
 800563c:	4543      	cmp	r3, r8
 800563e:	f77f af7a 	ble.w	8005536 <_printf_float+0x242>
 8005642:	2301      	movs	r3, #1
 8005644:	4652      	mov	r2, sl
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	f43f aeac 	beq.w	80053aa <_printf_float+0xb6>
 8005652:	f108 0801 	add.w	r8, r8, #1
 8005656:	e7ec      	b.n	8005632 <_printf_float+0x33e>
 8005658:	4613      	mov	r3, r2
 800565a:	4631      	mov	r1, r6
 800565c:	4642      	mov	r2, r8
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	d1c0      	bne.n	80055e8 <_printf_float+0x2f4>
 8005666:	e6a0      	b.n	80053aa <_printf_float+0xb6>
 8005668:	2301      	movs	r3, #1
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f ae99 	beq.w	80053aa <_printf_float+0xb6>
 8005678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800567a:	f10b 0b01 	add.w	fp, fp, #1
 800567e:	e7b9      	b.n	80055f4 <_printf_float+0x300>
 8005680:	4631      	mov	r1, r6
 8005682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	d1bf      	bne.n	800560e <_printf_float+0x31a>
 800568e:	e68c      	b.n	80053aa <_printf_float+0xb6>
 8005690:	464b      	mov	r3, r9
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	eb08 020a 	add.w	r2, r8, sl
 800569a:	47b8      	blx	r7
 800569c:	3001      	adds	r0, #1
 800569e:	d1c2      	bne.n	8005626 <_printf_float+0x332>
 80056a0:	e683      	b.n	80053aa <_printf_float+0xb6>
 80056a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056a4:	2a01      	cmp	r2, #1
 80056a6:	dc01      	bgt.n	80056ac <_printf_float+0x3b8>
 80056a8:	07db      	lsls	r3, r3, #31
 80056aa:	d537      	bpl.n	800571c <_printf_float+0x428>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4642      	mov	r2, r8
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f ae77 	beq.w	80053aa <_printf_float+0xb6>
 80056bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f ae6f 	beq.w	80053aa <_printf_float+0xb6>
 80056cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056d0:	2200      	movs	r2, #0
 80056d2:	2300      	movs	r3, #0
 80056d4:	f7fb f968 	bl	80009a8 <__aeabi_dcmpeq>
 80056d8:	b9d8      	cbnz	r0, 8005712 <_printf_float+0x41e>
 80056da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056dc:	f108 0201 	add.w	r2, r8, #1
 80056e0:	3b01      	subs	r3, #1
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	d10e      	bne.n	800570a <_printf_float+0x416>
 80056ec:	e65d      	b.n	80053aa <_printf_float+0xb6>
 80056ee:	2301      	movs	r3, #1
 80056f0:	464a      	mov	r2, r9
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae56 	beq.w	80053aa <_printf_float+0xb6>
 80056fe:	f108 0801 	add.w	r8, r8, #1
 8005702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005704:	3b01      	subs	r3, #1
 8005706:	4543      	cmp	r3, r8
 8005708:	dcf1      	bgt.n	80056ee <_printf_float+0x3fa>
 800570a:	4653      	mov	r3, sl
 800570c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005710:	e6e0      	b.n	80054d4 <_printf_float+0x1e0>
 8005712:	f04f 0800 	mov.w	r8, #0
 8005716:	f104 091a 	add.w	r9, r4, #26
 800571a:	e7f2      	b.n	8005702 <_printf_float+0x40e>
 800571c:	2301      	movs	r3, #1
 800571e:	4642      	mov	r2, r8
 8005720:	e7df      	b.n	80056e2 <_printf_float+0x3ee>
 8005722:	2301      	movs	r3, #1
 8005724:	464a      	mov	r2, r9
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	f43f ae3c 	beq.w	80053aa <_printf_float+0xb6>
 8005732:	f108 0801 	add.w	r8, r8, #1
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800573a:	1a5b      	subs	r3, r3, r1
 800573c:	4543      	cmp	r3, r8
 800573e:	dcf0      	bgt.n	8005722 <_printf_float+0x42e>
 8005740:	e6fd      	b.n	800553e <_printf_float+0x24a>
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	f104 0919 	add.w	r9, r4, #25
 800574a:	e7f4      	b.n	8005736 <_printf_float+0x442>

0800574c <_printf_common>:
 800574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	4616      	mov	r6, r2
 8005752:	4699      	mov	r9, r3
 8005754:	688a      	ldr	r2, [r1, #8]
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	4607      	mov	r7, r0
 800575a:	4293      	cmp	r3, r2
 800575c:	bfb8      	it	lt
 800575e:	4613      	movlt	r3, r2
 8005760:	6033      	str	r3, [r6, #0]
 8005762:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005766:	460c      	mov	r4, r1
 8005768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800576c:	b10a      	cbz	r2, 8005772 <_printf_common+0x26>
 800576e:	3301      	adds	r3, #1
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	0699      	lsls	r1, r3, #26
 8005776:	bf42      	ittt	mi
 8005778:	6833      	ldrmi	r3, [r6, #0]
 800577a:	3302      	addmi	r3, #2
 800577c:	6033      	strmi	r3, [r6, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	f015 0506 	ands.w	r5, r5, #6
 8005784:	d106      	bne.n	8005794 <_printf_common+0x48>
 8005786:	f104 0a19 	add.w	sl, r4, #25
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	6832      	ldr	r2, [r6, #0]
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	42ab      	cmp	r3, r5
 8005792:	dc28      	bgt.n	80057e6 <_printf_common+0x9a>
 8005794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005798:	1e13      	subs	r3, r2, #0
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	bf18      	it	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	0692      	lsls	r2, r2, #26
 80057a2:	d42d      	bmi.n	8005800 <_printf_common+0xb4>
 80057a4:	4649      	mov	r1, r9
 80057a6:	4638      	mov	r0, r7
 80057a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057ac:	47c0      	blx	r8
 80057ae:	3001      	adds	r0, #1
 80057b0:	d020      	beq.n	80057f4 <_printf_common+0xa8>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	68e5      	ldr	r5, [r4, #12]
 80057b6:	f003 0306 	and.w	r3, r3, #6
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf18      	it	ne
 80057be:	2500      	movne	r5, #0
 80057c0:	6832      	ldr	r2, [r6, #0]
 80057c2:	f04f 0600 	mov.w	r6, #0
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	bf08      	it	eq
 80057ca:	1aad      	subeq	r5, r5, r2
 80057cc:	6922      	ldr	r2, [r4, #16]
 80057ce:	bf08      	it	eq
 80057d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bfc4      	itt	gt
 80057d8:	1a9b      	subgt	r3, r3, r2
 80057da:	18ed      	addgt	r5, r5, r3
 80057dc:	341a      	adds	r4, #26
 80057de:	42b5      	cmp	r5, r6
 80057e0:	d11a      	bne.n	8005818 <_printf_common+0xcc>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e008      	b.n	80057f8 <_printf_common+0xac>
 80057e6:	2301      	movs	r3, #1
 80057e8:	4652      	mov	r2, sl
 80057ea:	4649      	mov	r1, r9
 80057ec:	4638      	mov	r0, r7
 80057ee:	47c0      	blx	r8
 80057f0:	3001      	adds	r0, #1
 80057f2:	d103      	bne.n	80057fc <_printf_common+0xb0>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fc:	3501      	adds	r5, #1
 80057fe:	e7c4      	b.n	800578a <_printf_common+0x3e>
 8005800:	2030      	movs	r0, #48	; 0x30
 8005802:	18e1      	adds	r1, r4, r3
 8005804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800580e:	4422      	add	r2, r4
 8005810:	3302      	adds	r3, #2
 8005812:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005816:	e7c5      	b.n	80057a4 <_printf_common+0x58>
 8005818:	2301      	movs	r3, #1
 800581a:	4622      	mov	r2, r4
 800581c:	4649      	mov	r1, r9
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d0e6      	beq.n	80057f4 <_printf_common+0xa8>
 8005826:	3601      	adds	r6, #1
 8005828:	e7d9      	b.n	80057de <_printf_common+0x92>
	...

0800582c <_printf_i>:
 800582c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	7e0f      	ldrb	r7, [r1, #24]
 8005832:	4691      	mov	r9, r2
 8005834:	2f78      	cmp	r7, #120	; 0x78
 8005836:	4680      	mov	r8, r0
 8005838:	460c      	mov	r4, r1
 800583a:	469a      	mov	sl, r3
 800583c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800583e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005842:	d807      	bhi.n	8005854 <_printf_i+0x28>
 8005844:	2f62      	cmp	r7, #98	; 0x62
 8005846:	d80a      	bhi.n	800585e <_printf_i+0x32>
 8005848:	2f00      	cmp	r7, #0
 800584a:	f000 80d9 	beq.w	8005a00 <_printf_i+0x1d4>
 800584e:	2f58      	cmp	r7, #88	; 0x58
 8005850:	f000 80a4 	beq.w	800599c <_printf_i+0x170>
 8005854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800585c:	e03a      	b.n	80058d4 <_printf_i+0xa8>
 800585e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005862:	2b15      	cmp	r3, #21
 8005864:	d8f6      	bhi.n	8005854 <_printf_i+0x28>
 8005866:	a101      	add	r1, pc, #4	; (adr r1, 800586c <_printf_i+0x40>)
 8005868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800586c:	080058c5 	.word	0x080058c5
 8005870:	080058d9 	.word	0x080058d9
 8005874:	08005855 	.word	0x08005855
 8005878:	08005855 	.word	0x08005855
 800587c:	08005855 	.word	0x08005855
 8005880:	08005855 	.word	0x08005855
 8005884:	080058d9 	.word	0x080058d9
 8005888:	08005855 	.word	0x08005855
 800588c:	08005855 	.word	0x08005855
 8005890:	08005855 	.word	0x08005855
 8005894:	08005855 	.word	0x08005855
 8005898:	080059e7 	.word	0x080059e7
 800589c:	08005909 	.word	0x08005909
 80058a0:	080059c9 	.word	0x080059c9
 80058a4:	08005855 	.word	0x08005855
 80058a8:	08005855 	.word	0x08005855
 80058ac:	08005a09 	.word	0x08005a09
 80058b0:	08005855 	.word	0x08005855
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005855 	.word	0x08005855
 80058bc:	08005855 	.word	0x08005855
 80058c0:	080059d1 	.word	0x080059d1
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	1d1a      	adds	r2, r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	602a      	str	r2, [r5, #0]
 80058cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0a4      	b.n	8005a22 <_printf_i+0x1f6>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	6829      	ldr	r1, [r5, #0]
 80058dc:	0606      	lsls	r6, r0, #24
 80058de:	f101 0304 	add.w	r3, r1, #4
 80058e2:	d50a      	bpl.n	80058fa <_printf_i+0xce>
 80058e4:	680e      	ldr	r6, [r1, #0]
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	2e00      	cmp	r6, #0
 80058ea:	da03      	bge.n	80058f4 <_printf_i+0xc8>
 80058ec:	232d      	movs	r3, #45	; 0x2d
 80058ee:	4276      	negs	r6, r6
 80058f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f4:	230a      	movs	r3, #10
 80058f6:	485e      	ldr	r0, [pc, #376]	; (8005a70 <_printf_i+0x244>)
 80058f8:	e019      	b.n	800592e <_printf_i+0x102>
 80058fa:	680e      	ldr	r6, [r1, #0]
 80058fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	bf18      	it	ne
 8005904:	b236      	sxthne	r6, r6
 8005906:	e7ef      	b.n	80058e8 <_printf_i+0xbc>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	1d19      	adds	r1, r3, #4
 800590e:	6029      	str	r1, [r5, #0]
 8005910:	0601      	lsls	r1, r0, #24
 8005912:	d501      	bpl.n	8005918 <_printf_i+0xec>
 8005914:	681e      	ldr	r6, [r3, #0]
 8005916:	e002      	b.n	800591e <_printf_i+0xf2>
 8005918:	0646      	lsls	r6, r0, #25
 800591a:	d5fb      	bpl.n	8005914 <_printf_i+0xe8>
 800591c:	881e      	ldrh	r6, [r3, #0]
 800591e:	2f6f      	cmp	r7, #111	; 0x6f
 8005920:	bf0c      	ite	eq
 8005922:	2308      	moveq	r3, #8
 8005924:	230a      	movne	r3, #10
 8005926:	4852      	ldr	r0, [pc, #328]	; (8005a70 <_printf_i+0x244>)
 8005928:	2100      	movs	r1, #0
 800592a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800592e:	6865      	ldr	r5, [r4, #4]
 8005930:	2d00      	cmp	r5, #0
 8005932:	bfa8      	it	ge
 8005934:	6821      	ldrge	r1, [r4, #0]
 8005936:	60a5      	str	r5, [r4, #8]
 8005938:	bfa4      	itt	ge
 800593a:	f021 0104 	bicge.w	r1, r1, #4
 800593e:	6021      	strge	r1, [r4, #0]
 8005940:	b90e      	cbnz	r6, 8005946 <_printf_i+0x11a>
 8005942:	2d00      	cmp	r5, #0
 8005944:	d04d      	beq.n	80059e2 <_printf_i+0x1b6>
 8005946:	4615      	mov	r5, r2
 8005948:	fbb6 f1f3 	udiv	r1, r6, r3
 800594c:	fb03 6711 	mls	r7, r3, r1, r6
 8005950:	5dc7      	ldrb	r7, [r0, r7]
 8005952:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005956:	4637      	mov	r7, r6
 8005958:	42bb      	cmp	r3, r7
 800595a:	460e      	mov	r6, r1
 800595c:	d9f4      	bls.n	8005948 <_printf_i+0x11c>
 800595e:	2b08      	cmp	r3, #8
 8005960:	d10b      	bne.n	800597a <_printf_i+0x14e>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	07de      	lsls	r6, r3, #31
 8005966:	d508      	bpl.n	800597a <_printf_i+0x14e>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	6861      	ldr	r1, [r4, #4]
 800596c:	4299      	cmp	r1, r3
 800596e:	bfde      	ittt	le
 8005970:	2330      	movle	r3, #48	; 0x30
 8005972:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005976:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800597a:	1b52      	subs	r2, r2, r5
 800597c:	6122      	str	r2, [r4, #16]
 800597e:	464b      	mov	r3, r9
 8005980:	4621      	mov	r1, r4
 8005982:	4640      	mov	r0, r8
 8005984:	f8cd a000 	str.w	sl, [sp]
 8005988:	aa03      	add	r2, sp, #12
 800598a:	f7ff fedf 	bl	800574c <_printf_common>
 800598e:	3001      	adds	r0, #1
 8005990:	d14c      	bne.n	8005a2c <_printf_i+0x200>
 8005992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005996:	b004      	add	sp, #16
 8005998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599c:	4834      	ldr	r0, [pc, #208]	; (8005a70 <_printf_i+0x244>)
 800599e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059a2:	6829      	ldr	r1, [r5, #0]
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80059aa:	6029      	str	r1, [r5, #0]
 80059ac:	061d      	lsls	r5, r3, #24
 80059ae:	d514      	bpl.n	80059da <_printf_i+0x1ae>
 80059b0:	07df      	lsls	r7, r3, #31
 80059b2:	bf44      	itt	mi
 80059b4:	f043 0320 	orrmi.w	r3, r3, #32
 80059b8:	6023      	strmi	r3, [r4, #0]
 80059ba:	b91e      	cbnz	r6, 80059c4 <_printf_i+0x198>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	f023 0320 	bic.w	r3, r3, #32
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	2310      	movs	r3, #16
 80059c6:	e7af      	b.n	8005928 <_printf_i+0xfc>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f043 0320 	orr.w	r3, r3, #32
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2378      	movs	r3, #120	; 0x78
 80059d2:	4828      	ldr	r0, [pc, #160]	; (8005a74 <_printf_i+0x248>)
 80059d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059d8:	e7e3      	b.n	80059a2 <_printf_i+0x176>
 80059da:	0659      	lsls	r1, r3, #25
 80059dc:	bf48      	it	mi
 80059de:	b2b6      	uxthmi	r6, r6
 80059e0:	e7e6      	b.n	80059b0 <_printf_i+0x184>
 80059e2:	4615      	mov	r5, r2
 80059e4:	e7bb      	b.n	800595e <_printf_i+0x132>
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	6826      	ldr	r6, [r4, #0]
 80059ea:	1d18      	adds	r0, r3, #4
 80059ec:	6961      	ldr	r1, [r4, #20]
 80059ee:	6028      	str	r0, [r5, #0]
 80059f0:	0635      	lsls	r5, r6, #24
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	d501      	bpl.n	80059fa <_printf_i+0x1ce>
 80059f6:	6019      	str	r1, [r3, #0]
 80059f8:	e002      	b.n	8005a00 <_printf_i+0x1d4>
 80059fa:	0670      	lsls	r0, r6, #25
 80059fc:	d5fb      	bpl.n	80059f6 <_printf_i+0x1ca>
 80059fe:	8019      	strh	r1, [r3, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	4615      	mov	r5, r2
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	e7ba      	b.n	800597e <_printf_i+0x152>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	681d      	ldr	r5, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 ffc7 	bl	80069a8 <memchr>
 8005a1a:	b108      	cbz	r0, 8005a20 <_printf_i+0x1f4>
 8005a1c:	1b40      	subs	r0, r0, r5
 8005a1e:	6060      	str	r0, [r4, #4]
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	6123      	str	r3, [r4, #16]
 8005a24:	2300      	movs	r3, #0
 8005a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2a:	e7a8      	b.n	800597e <_printf_i+0x152>
 8005a2c:	462a      	mov	r2, r5
 8005a2e:	4649      	mov	r1, r9
 8005a30:	4640      	mov	r0, r8
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	47d0      	blx	sl
 8005a36:	3001      	adds	r0, #1
 8005a38:	d0ab      	beq.n	8005992 <_printf_i+0x166>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	079b      	lsls	r3, r3, #30
 8005a3e:	d413      	bmi.n	8005a68 <_printf_i+0x23c>
 8005a40:	68e0      	ldr	r0, [r4, #12]
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	4298      	cmp	r0, r3
 8005a46:	bfb8      	it	lt
 8005a48:	4618      	movlt	r0, r3
 8005a4a:	e7a4      	b.n	8005996 <_printf_i+0x16a>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4632      	mov	r2, r6
 8005a50:	4649      	mov	r1, r9
 8005a52:	4640      	mov	r0, r8
 8005a54:	47d0      	blx	sl
 8005a56:	3001      	adds	r0, #1
 8005a58:	d09b      	beq.n	8005992 <_printf_i+0x166>
 8005a5a:	3501      	adds	r5, #1
 8005a5c:	68e3      	ldr	r3, [r4, #12]
 8005a5e:	9903      	ldr	r1, [sp, #12]
 8005a60:	1a5b      	subs	r3, r3, r1
 8005a62:	42ab      	cmp	r3, r5
 8005a64:	dcf2      	bgt.n	8005a4c <_printf_i+0x220>
 8005a66:	e7eb      	b.n	8005a40 <_printf_i+0x214>
 8005a68:	2500      	movs	r5, #0
 8005a6a:	f104 0619 	add.w	r6, r4, #25
 8005a6e:	e7f5      	b.n	8005a5c <_printf_i+0x230>
 8005a70:	08007d62 	.word	0x08007d62
 8005a74:	08007d73 	.word	0x08007d73

08005a78 <iprintf>:
 8005a78:	b40f      	push	{r0, r1, r2, r3}
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <iprintf+0x2c>)
 8005a7c:	b513      	push	{r0, r1, r4, lr}
 8005a7e:	681c      	ldr	r4, [r3, #0]
 8005a80:	b124      	cbz	r4, 8005a8c <iprintf+0x14>
 8005a82:	69a3      	ldr	r3, [r4, #24]
 8005a84:	b913      	cbnz	r3, 8005a8c <iprintf+0x14>
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fee0 	bl	800684c <__sinit>
 8005a8c:	ab05      	add	r3, sp, #20
 8005a8e:	4620      	mov	r0, r4
 8005a90:	9a04      	ldr	r2, [sp, #16]
 8005a92:	68a1      	ldr	r1, [r4, #8]
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	f001 fc3d 	bl	8007314 <_vfiprintf_r>
 8005a9a:	b002      	add	sp, #8
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	b004      	add	sp, #16
 8005aa2:	4770      	bx	lr
 8005aa4:	2000000c 	.word	0x2000000c

08005aa8 <quorem>:
 8005aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	6903      	ldr	r3, [r0, #16]
 8005aae:	690c      	ldr	r4, [r1, #16]
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	42a3      	cmp	r3, r4
 8005ab4:	f2c0 8082 	blt.w	8005bbc <quorem+0x114>
 8005ab8:	3c01      	subs	r4, #1
 8005aba:	f100 0514 	add.w	r5, r0, #20
 8005abe:	f101 0814 	add.w	r8, r1, #20
 8005ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ad8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005adc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ae0:	d331      	bcc.n	8005b46 <quorem+0x9e>
 8005ae2:	f04f 0e00 	mov.w	lr, #0
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	46ac      	mov	ip, r5
 8005aea:	46f2      	mov	sl, lr
 8005aec:	f850 2b04 	ldr.w	r2, [r0], #4
 8005af0:	b293      	uxth	r3, r2
 8005af2:	fb06 e303 	mla	r3, r6, r3, lr
 8005af6:	0c12      	lsrs	r2, r2, #16
 8005af8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	fb06 e202 	mla	r2, r6, r2, lr
 8005b02:	ebaa 0303 	sub.w	r3, sl, r3
 8005b06:	f8dc a000 	ldr.w	sl, [ip]
 8005b0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b0e:	fa1f fa8a 	uxth.w	sl, sl
 8005b12:	4453      	add	r3, sl
 8005b14:	f8dc a000 	ldr.w	sl, [ip]
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b28:	4581      	cmp	r9, r0
 8005b2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b2e:	f84c 3b04 	str.w	r3, [ip], #4
 8005b32:	d2db      	bcs.n	8005aec <quorem+0x44>
 8005b34:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b38:	b92b      	cbnz	r3, 8005b46 <quorem+0x9e>
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	3b04      	subs	r3, #4
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	d32f      	bcc.n	8005ba4 <quorem+0xfc>
 8005b44:	613c      	str	r4, [r7, #16]
 8005b46:	4638      	mov	r0, r7
 8005b48:	f001 f9c8 	bl	8006edc <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	db25      	blt.n	8005b9c <quorem+0xf4>
 8005b50:	4628      	mov	r0, r5
 8005b52:	f04f 0c00 	mov.w	ip, #0
 8005b56:	3601      	adds	r6, #1
 8005b58:	f858 1b04 	ldr.w	r1, [r8], #4
 8005b5c:	f8d0 e000 	ldr.w	lr, [r0]
 8005b60:	b28b      	uxth	r3, r1
 8005b62:	ebac 0303 	sub.w	r3, ip, r3
 8005b66:	fa1f f28e 	uxth.w	r2, lr
 8005b6a:	4413      	add	r3, r2
 8005b6c:	0c0a      	lsrs	r2, r1, #16
 8005b6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b7c:	45c1      	cmp	r9, r8
 8005b7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b82:	f840 3b04 	str.w	r3, [r0], #4
 8005b86:	d2e7      	bcs.n	8005b58 <quorem+0xb0>
 8005b88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b90:	b922      	cbnz	r2, 8005b9c <quorem+0xf4>
 8005b92:	3b04      	subs	r3, #4
 8005b94:	429d      	cmp	r5, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	d30a      	bcc.n	8005bb0 <quorem+0x108>
 8005b9a:	613c      	str	r4, [r7, #16]
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	b003      	add	sp, #12
 8005ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	3b04      	subs	r3, #4
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d1cb      	bne.n	8005b44 <quorem+0x9c>
 8005bac:	3c01      	subs	r4, #1
 8005bae:	e7c6      	b.n	8005b3e <quorem+0x96>
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	3b04      	subs	r3, #4
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d1f0      	bne.n	8005b9a <quorem+0xf2>
 8005bb8:	3c01      	subs	r4, #1
 8005bba:	e7eb      	b.n	8005b94 <quorem+0xec>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7ee      	b.n	8005b9e <quorem+0xf6>

08005bc0 <_dtoa_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	461f      	mov	r7, r3
 8005bc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bca:	b099      	sub	sp, #100	; 0x64
 8005bcc:	4605      	mov	r5, r0
 8005bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005bd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005bd6:	b974      	cbnz	r4, 8005bf6 <_dtoa_r+0x36>
 8005bd8:	2010      	movs	r0, #16
 8005bda:	f000 fedd 	bl	8006998 <malloc>
 8005bde:	4602      	mov	r2, r0
 8005be0:	6268      	str	r0, [r5, #36]	; 0x24
 8005be2:	b920      	cbnz	r0, 8005bee <_dtoa_r+0x2e>
 8005be4:	21ea      	movs	r1, #234	; 0xea
 8005be6:	4ba8      	ldr	r3, [pc, #672]	; (8005e88 <_dtoa_r+0x2c8>)
 8005be8:	48a8      	ldr	r0, [pc, #672]	; (8005e8c <_dtoa_r+0x2cc>)
 8005bea:	f001 fde9 	bl	80077c0 <__assert_func>
 8005bee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bf2:	6004      	str	r4, [r0, #0]
 8005bf4:	60c4      	str	r4, [r0, #12]
 8005bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	b151      	cbz	r1, 8005c12 <_dtoa_r+0x52>
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4093      	lsls	r3, r2
 8005c02:	604a      	str	r2, [r1, #4]
 8005c04:	608b      	str	r3, [r1, #8]
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 ff2a 	bl	8006a60 <_Bfree>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	1e3b      	subs	r3, r7, #0
 8005c14:	bfaf      	iteee	ge
 8005c16:	2300      	movge	r3, #0
 8005c18:	2201      	movlt	r2, #1
 8005c1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	9305      	strlt	r3, [sp, #20]
 8005c20:	bfa8      	it	ge
 8005c22:	f8c8 3000 	strge.w	r3, [r8]
 8005c26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c2a:	4b99      	ldr	r3, [pc, #612]	; (8005e90 <_dtoa_r+0x2d0>)
 8005c2c:	bfb8      	it	lt
 8005c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8005c32:	ea33 0309 	bics.w	r3, r3, r9
 8005c36:	d119      	bne.n	8005c6c <_dtoa_r+0xac>
 8005c38:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c44:	4333      	orrs	r3, r6
 8005c46:	f000 857f 	beq.w	8006748 <_dtoa_r+0xb88>
 8005c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c4c:	b953      	cbnz	r3, 8005c64 <_dtoa_r+0xa4>
 8005c4e:	4b91      	ldr	r3, [pc, #580]	; (8005e94 <_dtoa_r+0x2d4>)
 8005c50:	e022      	b.n	8005c98 <_dtoa_r+0xd8>
 8005c52:	4b91      	ldr	r3, [pc, #580]	; (8005e98 <_dtoa_r+0x2d8>)
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	3308      	adds	r3, #8
 8005c58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	9803      	ldr	r0, [sp, #12]
 8005c5e:	b019      	add	sp, #100	; 0x64
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	4b8b      	ldr	r3, [pc, #556]	; (8005e94 <_dtoa_r+0x2d4>)
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	3303      	adds	r3, #3
 8005c6a:	e7f5      	b.n	8005c58 <_dtoa_r+0x98>
 8005c6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f7fa fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8005c80:	4680      	mov	r8, r0
 8005c82:	b158      	cbz	r0, 8005c9c <_dtoa_r+0xdc>
 8005c84:	2301      	movs	r3, #1
 8005c86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8558 	beq.w	8006742 <_dtoa_r+0xb82>
 8005c92:	4882      	ldr	r0, [pc, #520]	; (8005e9c <_dtoa_r+0x2dc>)
 8005c94:	6018      	str	r0, [r3, #0]
 8005c96:	1e43      	subs	r3, r0, #1
 8005c98:	9303      	str	r3, [sp, #12]
 8005c9a:	e7df      	b.n	8005c5c <_dtoa_r+0x9c>
 8005c9c:	ab16      	add	r3, sp, #88	; 0x58
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	ab17      	add	r3, sp, #92	; 0x5c
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005caa:	f001 f9bf 	bl	800702c <__d2b>
 8005cae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005cb2:	4683      	mov	fp, r0
 8005cb4:	2c00      	cmp	r4, #0
 8005cb6:	d07f      	beq.n	8005db8 <_dtoa_r+0x1f8>
 8005cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005cca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005cce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <_dtoa_r+0x2e0>)
 8005cd6:	f7fa fa47 	bl	8000168 <__aeabi_dsub>
 8005cda:	a365      	add	r3, pc, #404	; (adr r3, 8005e70 <_dtoa_r+0x2b0>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fbfa 	bl	80004d8 <__aeabi_dmul>
 8005ce4:	a364      	add	r3, pc, #400	; (adr r3, 8005e78 <_dtoa_r+0x2b8>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	f7fa fa3f 	bl	800016c <__adddf3>
 8005cee:	4606      	mov	r6, r0
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	f7fa fb86 	bl	8000404 <__aeabi_i2d>
 8005cf8:	a361      	add	r3, pc, #388	; (adr r3, 8005e80 <_dtoa_r+0x2c0>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fbeb 	bl	80004d8 <__aeabi_dmul>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4630      	mov	r0, r6
 8005d08:	4639      	mov	r1, r7
 8005d0a:	f7fa fa2f 	bl	800016c <__adddf3>
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460f      	mov	r7, r1
 8005d12:	f7fa fe91 	bl	8000a38 <__aeabi_d2iz>
 8005d16:	2200      	movs	r2, #0
 8005d18:	4682      	mov	sl, r0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f7fa fe4c 	bl	80009bc <__aeabi_dcmplt>
 8005d24:	b148      	cbz	r0, 8005d3a <_dtoa_r+0x17a>
 8005d26:	4650      	mov	r0, sl
 8005d28:	f7fa fb6c 	bl	8000404 <__aeabi_i2d>
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	463b      	mov	r3, r7
 8005d30:	f7fa fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005d34:	b908      	cbnz	r0, 8005d3a <_dtoa_r+0x17a>
 8005d36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d3a:	f1ba 0f16 	cmp.w	sl, #22
 8005d3e:	d858      	bhi.n	8005df2 <_dtoa_r+0x232>
 8005d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d44:	4b57      	ldr	r3, [pc, #348]	; (8005ea4 <_dtoa_r+0x2e4>)
 8005d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fe35 	bl	80009bc <__aeabi_dcmplt>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d04f      	beq.n	8005df6 <_dtoa_r+0x236>
 8005d56:	2300      	movs	r3, #0
 8005d58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d60:	1b1c      	subs	r4, r3, r4
 8005d62:	1e63      	subs	r3, r4, #1
 8005d64:	9309      	str	r3, [sp, #36]	; 0x24
 8005d66:	bf49      	itett	mi
 8005d68:	f1c4 0301 	rsbmi	r3, r4, #1
 8005d6c:	2300      	movpl	r3, #0
 8005d6e:	9306      	strmi	r3, [sp, #24]
 8005d70:	2300      	movmi	r3, #0
 8005d72:	bf54      	ite	pl
 8005d74:	9306      	strpl	r3, [sp, #24]
 8005d76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005d78:	f1ba 0f00 	cmp.w	sl, #0
 8005d7c:	db3d      	blt.n	8005dfa <_dtoa_r+0x23a>
 8005d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d84:	4453      	add	r3, sl
 8005d86:	9309      	str	r3, [sp, #36]	; 0x24
 8005d88:	2300      	movs	r3, #0
 8005d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	f200 808c 	bhi.w	8005eac <_dtoa_r+0x2ec>
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	bfc4      	itt	gt
 8005d98:	3b04      	subgt	r3, #4
 8005d9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d9e:	bfc8      	it	gt
 8005da0:	2400      	movgt	r4, #0
 8005da2:	f1a3 0302 	sub.w	r3, r3, #2
 8005da6:	bfd8      	it	le
 8005da8:	2401      	movle	r4, #1
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	f200 808a 	bhi.w	8005ec4 <_dtoa_r+0x304>
 8005db0:	e8df f003 	tbb	[pc, r3]
 8005db4:	5b4d4f2d 	.word	0x5b4d4f2d
 8005db8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005dbc:	441c      	add	r4, r3
 8005dbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	bfc3      	ittte	gt
 8005dc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005dca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005dce:	fa09 f303 	lslgt.w	r3, r9, r3
 8005dd2:	f1c3 0320 	rsble	r3, r3, #32
 8005dd6:	bfc6      	itte	gt
 8005dd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ddc:	4318      	orrgt	r0, r3
 8005dde:	fa06 f003 	lslle.w	r0, r6, r3
 8005de2:	f7fa faff 	bl	80003e4 <__aeabi_ui2d>
 8005de6:	2301      	movs	r3, #1
 8005de8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005dec:	3c01      	subs	r4, #1
 8005dee:	9313      	str	r3, [sp, #76]	; 0x4c
 8005df0:	e76f      	b.n	8005cd2 <_dtoa_r+0x112>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7b2      	b.n	8005d5c <_dtoa_r+0x19c>
 8005df6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005df8:	e7b1      	b.n	8005d5e <_dtoa_r+0x19e>
 8005dfa:	9b06      	ldr	r3, [sp, #24]
 8005dfc:	eba3 030a 	sub.w	r3, r3, sl
 8005e00:	9306      	str	r3, [sp, #24]
 8005e02:	f1ca 0300 	rsb	r3, sl, #0
 8005e06:	930a      	str	r3, [sp, #40]	; 0x28
 8005e08:	2300      	movs	r3, #0
 8005e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e0c:	e7be      	b.n	8005d8c <_dtoa_r+0x1cc>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dc58      	bgt.n	8005eca <_dtoa_r+0x30a>
 8005e18:	f04f 0901 	mov.w	r9, #1
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005e22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005e26:	2200      	movs	r2, #0
 8005e28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005e2a:	6042      	str	r2, [r0, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	f102 0614 	add.w	r6, r2, #20
 8005e32:	429e      	cmp	r6, r3
 8005e34:	6841      	ldr	r1, [r0, #4]
 8005e36:	d94e      	bls.n	8005ed6 <_dtoa_r+0x316>
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 fdd1 	bl	80069e0 <_Balloc>
 8005e3e:	9003      	str	r0, [sp, #12]
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d14c      	bne.n	8005ede <_dtoa_r+0x31e>
 8005e44:	4602      	mov	r2, r0
 8005e46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <_dtoa_r+0x2e8>)
 8005e4c:	e6cc      	b.n	8005be8 <_dtoa_r+0x28>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e7de      	b.n	8005e10 <_dtoa_r+0x250>
 8005e52:	2300      	movs	r3, #0
 8005e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e58:	eb0a 0903 	add.w	r9, sl, r3
 8005e5c:	f109 0301 	add.w	r3, r9, #1
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	bfb8      	it	lt
 8005e66:	2301      	movlt	r3, #1
 8005e68:	e7dd      	b.n	8005e26 <_dtoa_r+0x266>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e7f2      	b.n	8005e54 <_dtoa_r+0x294>
 8005e6e:	bf00      	nop
 8005e70:	636f4361 	.word	0x636f4361
 8005e74:	3fd287a7 	.word	0x3fd287a7
 8005e78:	8b60c8b3 	.word	0x8b60c8b3
 8005e7c:	3fc68a28 	.word	0x3fc68a28
 8005e80:	509f79fb 	.word	0x509f79fb
 8005e84:	3fd34413 	.word	0x3fd34413
 8005e88:	08007d91 	.word	0x08007d91
 8005e8c:	08007da8 	.word	0x08007da8
 8005e90:	7ff00000 	.word	0x7ff00000
 8005e94:	08007d8d 	.word	0x08007d8d
 8005e98:	08007d84 	.word	0x08007d84
 8005e9c:	08007d61 	.word	0x08007d61
 8005ea0:	3ff80000 	.word	0x3ff80000
 8005ea4:	08007ef8 	.word	0x08007ef8
 8005ea8:	08007e03 	.word	0x08007e03
 8005eac:	2401      	movs	r4, #1
 8005eae:	2300      	movs	r3, #0
 8005eb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005eb2:	9322      	str	r3, [sp, #136]	; 0x88
 8005eb4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2312      	movs	r3, #18
 8005ebc:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ec0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ec2:	e7b0      	b.n	8005e26 <_dtoa_r+0x266>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ec8:	e7f4      	b.n	8005eb4 <_dtoa_r+0x2f4>
 8005eca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005ece:	464b      	mov	r3, r9
 8005ed0:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ed4:	e7a7      	b.n	8005e26 <_dtoa_r+0x266>
 8005ed6:	3101      	adds	r1, #1
 8005ed8:	6041      	str	r1, [r0, #4]
 8005eda:	0052      	lsls	r2, r2, #1
 8005edc:	e7a7      	b.n	8005e2e <_dtoa_r+0x26e>
 8005ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ee0:	9a03      	ldr	r2, [sp, #12]
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	9b08      	ldr	r3, [sp, #32]
 8005ee6:	2b0e      	cmp	r3, #14
 8005ee8:	f200 80a8 	bhi.w	800603c <_dtoa_r+0x47c>
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	f000 80a5 	beq.w	800603c <_dtoa_r+0x47c>
 8005ef2:	f1ba 0f00 	cmp.w	sl, #0
 8005ef6:	dd34      	ble.n	8005f62 <_dtoa_r+0x3a2>
 8005ef8:	4a9a      	ldr	r2, [pc, #616]	; (8006164 <_dtoa_r+0x5a4>)
 8005efa:	f00a 030f 	and.w	r3, sl, #15
 8005efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005f12:	d016      	beq.n	8005f42 <_dtoa_r+0x382>
 8005f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f18:	4b93      	ldr	r3, [pc, #588]	; (8006168 <_dtoa_r+0x5a8>)
 8005f1a:	2703      	movs	r7, #3
 8005f1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f20:	f7fa fc04 	bl	800072c <__aeabi_ddiv>
 8005f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f28:	f004 040f 	and.w	r4, r4, #15
 8005f2c:	4e8e      	ldr	r6, [pc, #568]	; (8006168 <_dtoa_r+0x5a8>)
 8005f2e:	b954      	cbnz	r4, 8005f46 <_dtoa_r+0x386>
 8005f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f38:	f7fa fbf8 	bl	800072c <__aeabi_ddiv>
 8005f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f40:	e029      	b.n	8005f96 <_dtoa_r+0x3d6>
 8005f42:	2702      	movs	r7, #2
 8005f44:	e7f2      	b.n	8005f2c <_dtoa_r+0x36c>
 8005f46:	07e1      	lsls	r1, r4, #31
 8005f48:	d508      	bpl.n	8005f5c <_dtoa_r+0x39c>
 8005f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f52:	f7fa fac1 	bl	80004d8 <__aeabi_dmul>
 8005f56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f5a:	3701      	adds	r7, #1
 8005f5c:	1064      	asrs	r4, r4, #1
 8005f5e:	3608      	adds	r6, #8
 8005f60:	e7e5      	b.n	8005f2e <_dtoa_r+0x36e>
 8005f62:	f000 80a5 	beq.w	80060b0 <_dtoa_r+0x4f0>
 8005f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f6a:	f1ca 0400 	rsb	r4, sl, #0
 8005f6e:	4b7d      	ldr	r3, [pc, #500]	; (8006164 <_dtoa_r+0x5a4>)
 8005f70:	f004 020f 	and.w	r2, r4, #15
 8005f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f7fa faac 	bl	80004d8 <__aeabi_dmul>
 8005f80:	2702      	movs	r7, #2
 8005f82:	2300      	movs	r3, #0
 8005f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f88:	4e77      	ldr	r6, [pc, #476]	; (8006168 <_dtoa_r+0x5a8>)
 8005f8a:	1124      	asrs	r4, r4, #4
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	f040 8084 	bne.w	800609a <_dtoa_r+0x4da>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1d2      	bne.n	8005f3c <_dtoa_r+0x37c>
 8005f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 808b 	beq.w	80060b4 <_dtoa_r+0x4f4>
 8005f9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fa2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005faa:	2200      	movs	r2, #0
 8005fac:	4b6f      	ldr	r3, [pc, #444]	; (800616c <_dtoa_r+0x5ac>)
 8005fae:	f7fa fd05 	bl	80009bc <__aeabi_dcmplt>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d07e      	beq.n	80060b4 <_dtoa_r+0x4f4>
 8005fb6:	9b08      	ldr	r3, [sp, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d07b      	beq.n	80060b4 <_dtoa_r+0x4f4>
 8005fbc:	f1b9 0f00 	cmp.w	r9, #0
 8005fc0:	dd38      	ble.n	8006034 <_dtoa_r+0x474>
 8005fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4b69      	ldr	r3, [pc, #420]	; (8006170 <_dtoa_r+0x5b0>)
 8005fca:	f7fa fa85 	bl	80004d8 <__aeabi_dmul>
 8005fce:	464c      	mov	r4, r9
 8005fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005fd8:	3701      	adds	r7, #1
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f7fa fa12 	bl	8000404 <__aeabi_i2d>
 8005fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe4:	f7fa fa78 	bl	80004d8 <__aeabi_dmul>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4b62      	ldr	r3, [pc, #392]	; (8006174 <_dtoa_r+0x5b4>)
 8005fec:	f7fa f8be 	bl	800016c <__adddf3>
 8005ff0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ff8:	9611      	str	r6, [sp, #68]	; 0x44
 8005ffa:	2c00      	cmp	r4, #0
 8005ffc:	d15d      	bne.n	80060ba <_dtoa_r+0x4fa>
 8005ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006002:	2200      	movs	r2, #0
 8006004:	4b5c      	ldr	r3, [pc, #368]	; (8006178 <_dtoa_r+0x5b8>)
 8006006:	f7fa f8af 	bl	8000168 <__aeabi_dsub>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006012:	4633      	mov	r3, r6
 8006014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006016:	f7fa fcef 	bl	80009f8 <__aeabi_dcmpgt>
 800601a:	2800      	cmp	r0, #0
 800601c:	f040 829c 	bne.w	8006558 <_dtoa_r+0x998>
 8006020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006026:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800602a:	f7fa fcc7 	bl	80009bc <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	f040 8290 	bne.w	8006554 <_dtoa_r+0x994>
 8006034:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800603c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800603e:	2b00      	cmp	r3, #0
 8006040:	f2c0 8152 	blt.w	80062e8 <_dtoa_r+0x728>
 8006044:	f1ba 0f0e 	cmp.w	sl, #14
 8006048:	f300 814e 	bgt.w	80062e8 <_dtoa_r+0x728>
 800604c:	4b45      	ldr	r3, [pc, #276]	; (8006164 <_dtoa_r+0x5a4>)
 800604e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006056:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800605a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800605c:	2b00      	cmp	r3, #0
 800605e:	f280 80db 	bge.w	8006218 <_dtoa_r+0x658>
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f300 80d7 	bgt.w	8006218 <_dtoa_r+0x658>
 800606a:	f040 8272 	bne.w	8006552 <_dtoa_r+0x992>
 800606e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006072:	2200      	movs	r2, #0
 8006074:	4b40      	ldr	r3, [pc, #256]	; (8006178 <_dtoa_r+0x5b8>)
 8006076:	f7fa fa2f 	bl	80004d8 <__aeabi_dmul>
 800607a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607e:	f7fa fcb1 	bl	80009e4 <__aeabi_dcmpge>
 8006082:	9c08      	ldr	r4, [sp, #32]
 8006084:	4626      	mov	r6, r4
 8006086:	2800      	cmp	r0, #0
 8006088:	f040 8248 	bne.w	800651c <_dtoa_r+0x95c>
 800608c:	2331      	movs	r3, #49	; 0x31
 800608e:	9f03      	ldr	r7, [sp, #12]
 8006090:	f10a 0a01 	add.w	sl, sl, #1
 8006094:	f807 3b01 	strb.w	r3, [r7], #1
 8006098:	e244      	b.n	8006524 <_dtoa_r+0x964>
 800609a:	07e2      	lsls	r2, r4, #31
 800609c:	d505      	bpl.n	80060aa <_dtoa_r+0x4ea>
 800609e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060a2:	f7fa fa19 	bl	80004d8 <__aeabi_dmul>
 80060a6:	2301      	movs	r3, #1
 80060a8:	3701      	adds	r7, #1
 80060aa:	1064      	asrs	r4, r4, #1
 80060ac:	3608      	adds	r6, #8
 80060ae:	e76d      	b.n	8005f8c <_dtoa_r+0x3cc>
 80060b0:	2702      	movs	r7, #2
 80060b2:	e770      	b.n	8005f96 <_dtoa_r+0x3d6>
 80060b4:	46d0      	mov	r8, sl
 80060b6:	9c08      	ldr	r4, [sp, #32]
 80060b8:	e78f      	b.n	8005fda <_dtoa_r+0x41a>
 80060ba:	9903      	ldr	r1, [sp, #12]
 80060bc:	4b29      	ldr	r3, [pc, #164]	; (8006164 <_dtoa_r+0x5a4>)
 80060be:	4421      	add	r1, r4
 80060c0:	9112      	str	r1, [sp, #72]	; 0x48
 80060c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d055      	beq.n	8006180 <_dtoa_r+0x5c0>
 80060d4:	2000      	movs	r0, #0
 80060d6:	4929      	ldr	r1, [pc, #164]	; (800617c <_dtoa_r+0x5bc>)
 80060d8:	f7fa fb28 	bl	800072c <__aeabi_ddiv>
 80060dc:	463b      	mov	r3, r7
 80060de:	4632      	mov	r2, r6
 80060e0:	f7fa f842 	bl	8000168 <__aeabi_dsub>
 80060e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060e8:	9f03      	ldr	r7, [sp, #12]
 80060ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ee:	f7fa fca3 	bl	8000a38 <__aeabi_d2iz>
 80060f2:	4604      	mov	r4, r0
 80060f4:	f7fa f986 	bl	8000404 <__aeabi_i2d>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006100:	f7fa f832 	bl	8000168 <__aeabi_dsub>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	3430      	adds	r4, #48	; 0x30
 800610a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800610e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006112:	f807 4b01 	strb.w	r4, [r7], #1
 8006116:	f7fa fc51 	bl	80009bc <__aeabi_dcmplt>
 800611a:	2800      	cmp	r0, #0
 800611c:	d174      	bne.n	8006208 <_dtoa_r+0x648>
 800611e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006122:	2000      	movs	r0, #0
 8006124:	4911      	ldr	r1, [pc, #68]	; (800616c <_dtoa_r+0x5ac>)
 8006126:	f7fa f81f 	bl	8000168 <__aeabi_dsub>
 800612a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800612e:	f7fa fc45 	bl	80009bc <__aeabi_dcmplt>
 8006132:	2800      	cmp	r0, #0
 8006134:	f040 80b7 	bne.w	80062a6 <_dtoa_r+0x6e6>
 8006138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800613a:	429f      	cmp	r7, r3
 800613c:	f43f af7a 	beq.w	8006034 <_dtoa_r+0x474>
 8006140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006144:	2200      	movs	r2, #0
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <_dtoa_r+0x5b0>)
 8006148:	f7fa f9c6 	bl	80004d8 <__aeabi_dmul>
 800614c:	2200      	movs	r2, #0
 800614e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <_dtoa_r+0x5b0>)
 8006158:	f7fa f9be 	bl	80004d8 <__aeabi_dmul>
 800615c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006160:	e7c3      	b.n	80060ea <_dtoa_r+0x52a>
 8006162:	bf00      	nop
 8006164:	08007ef8 	.word	0x08007ef8
 8006168:	08007ed0 	.word	0x08007ed0
 800616c:	3ff00000 	.word	0x3ff00000
 8006170:	40240000 	.word	0x40240000
 8006174:	401c0000 	.word	0x401c0000
 8006178:	40140000 	.word	0x40140000
 800617c:	3fe00000 	.word	0x3fe00000
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa f9a8 	bl	80004d8 <__aeabi_dmul>
 8006188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800618a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800618e:	9c03      	ldr	r4, [sp, #12]
 8006190:	9314      	str	r3, [sp, #80]	; 0x50
 8006192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006196:	f7fa fc4f 	bl	8000a38 <__aeabi_d2iz>
 800619a:	9015      	str	r0, [sp, #84]	; 0x54
 800619c:	f7fa f932 	bl	8000404 <__aeabi_i2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a8:	f7f9 ffde 	bl	8000168 <__aeabi_dsub>
 80061ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061ae:	4606      	mov	r6, r0
 80061b0:	3330      	adds	r3, #48	; 0x30
 80061b2:	f804 3b01 	strb.w	r3, [r4], #1
 80061b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061b8:	460f      	mov	r7, r1
 80061ba:	429c      	cmp	r4, r3
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	d124      	bne.n	800620c <_dtoa_r+0x64c>
 80061c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061c6:	4bb0      	ldr	r3, [pc, #704]	; (8006488 <_dtoa_r+0x8c8>)
 80061c8:	f7f9 ffd0 	bl	800016c <__adddf3>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa fc10 	bl	80009f8 <__aeabi_dcmpgt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d163      	bne.n	80062a4 <_dtoa_r+0x6e4>
 80061dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061e0:	2000      	movs	r0, #0
 80061e2:	49a9      	ldr	r1, [pc, #676]	; (8006488 <_dtoa_r+0x8c8>)
 80061e4:	f7f9 ffc0 	bl	8000168 <__aeabi_dsub>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4630      	mov	r0, r6
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa fbe4 	bl	80009bc <__aeabi_dcmplt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f43f af1d 	beq.w	8006034 <_dtoa_r+0x474>
 80061fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061fc:	1e7b      	subs	r3, r7, #1
 80061fe:	9314      	str	r3, [sp, #80]	; 0x50
 8006200:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006204:	2b30      	cmp	r3, #48	; 0x30
 8006206:	d0f8      	beq.n	80061fa <_dtoa_r+0x63a>
 8006208:	46c2      	mov	sl, r8
 800620a:	e03b      	b.n	8006284 <_dtoa_r+0x6c4>
 800620c:	4b9f      	ldr	r3, [pc, #636]	; (800648c <_dtoa_r+0x8cc>)
 800620e:	f7fa f963 	bl	80004d8 <__aeabi_dmul>
 8006212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006216:	e7bc      	b.n	8006192 <_dtoa_r+0x5d2>
 8006218:	9f03      	ldr	r7, [sp, #12]
 800621a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800621e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006222:	4640      	mov	r0, r8
 8006224:	4649      	mov	r1, r9
 8006226:	f7fa fa81 	bl	800072c <__aeabi_ddiv>
 800622a:	f7fa fc05 	bl	8000a38 <__aeabi_d2iz>
 800622e:	4604      	mov	r4, r0
 8006230:	f7fa f8e8 	bl	8000404 <__aeabi_i2d>
 8006234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006238:	f7fa f94e 	bl	80004d8 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	f7f9 ff90 	bl	8000168 <__aeabi_dsub>
 8006248:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800624c:	f807 6b01 	strb.w	r6, [r7], #1
 8006250:	9e03      	ldr	r6, [sp, #12]
 8006252:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006256:	1bbe      	subs	r6, r7, r6
 8006258:	45b4      	cmp	ip, r6
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	d136      	bne.n	80062ce <_dtoa_r+0x70e>
 8006260:	f7f9 ff84 	bl	800016c <__adddf3>
 8006264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006268:	4680      	mov	r8, r0
 800626a:	4689      	mov	r9, r1
 800626c:	f7fa fbc4 	bl	80009f8 <__aeabi_dcmpgt>
 8006270:	bb58      	cbnz	r0, 80062ca <_dtoa_r+0x70a>
 8006272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7fa fb95 	bl	80009a8 <__aeabi_dcmpeq>
 800627e:	b108      	cbz	r0, 8006284 <_dtoa_r+0x6c4>
 8006280:	07e1      	lsls	r1, r4, #31
 8006282:	d422      	bmi.n	80062ca <_dtoa_r+0x70a>
 8006284:	4628      	mov	r0, r5
 8006286:	4659      	mov	r1, fp
 8006288:	f000 fbea 	bl	8006a60 <_Bfree>
 800628c:	2300      	movs	r3, #0
 800628e:	703b      	strb	r3, [r7, #0]
 8006290:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006292:	f10a 0001 	add.w	r0, sl, #1
 8006296:	6018      	str	r0, [r3, #0]
 8006298:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800629a:	2b00      	cmp	r3, #0
 800629c:	f43f acde 	beq.w	8005c5c <_dtoa_r+0x9c>
 80062a0:	601f      	str	r7, [r3, #0]
 80062a2:	e4db      	b.n	8005c5c <_dtoa_r+0x9c>
 80062a4:	4627      	mov	r7, r4
 80062a6:	463b      	mov	r3, r7
 80062a8:	461f      	mov	r7, r3
 80062aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ae:	2a39      	cmp	r2, #57	; 0x39
 80062b0:	d107      	bne.n	80062c2 <_dtoa_r+0x702>
 80062b2:	9a03      	ldr	r2, [sp, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d1f7      	bne.n	80062a8 <_dtoa_r+0x6e8>
 80062b8:	2230      	movs	r2, #48	; 0x30
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	f108 0801 	add.w	r8, r8, #1
 80062c0:	700a      	strb	r2, [r1, #0]
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	3201      	adds	r2, #1
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e79e      	b.n	8006208 <_dtoa_r+0x648>
 80062ca:	46d0      	mov	r8, sl
 80062cc:	e7eb      	b.n	80062a6 <_dtoa_r+0x6e6>
 80062ce:	2200      	movs	r2, #0
 80062d0:	4b6e      	ldr	r3, [pc, #440]	; (800648c <_dtoa_r+0x8cc>)
 80062d2:	f7fa f901 	bl	80004d8 <__aeabi_dmul>
 80062d6:	2200      	movs	r2, #0
 80062d8:	2300      	movs	r3, #0
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	f7fa fb63 	bl	80009a8 <__aeabi_dcmpeq>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d09b      	beq.n	800621e <_dtoa_r+0x65e>
 80062e6:	e7cd      	b.n	8006284 <_dtoa_r+0x6c4>
 80062e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	f000 80d0 	beq.w	8006490 <_dtoa_r+0x8d0>
 80062f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062f2:	2a01      	cmp	r2, #1
 80062f4:	f300 80ae 	bgt.w	8006454 <_dtoa_r+0x894>
 80062f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	f000 80a6 	beq.w	800644c <_dtoa_r+0x88c>
 8006300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006304:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006306:	9f06      	ldr	r7, [sp, #24]
 8006308:	9a06      	ldr	r2, [sp, #24]
 800630a:	2101      	movs	r1, #1
 800630c:	441a      	add	r2, r3
 800630e:	9206      	str	r2, [sp, #24]
 8006310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006312:	4628      	mov	r0, r5
 8006314:	441a      	add	r2, r3
 8006316:	9209      	str	r2, [sp, #36]	; 0x24
 8006318:	f000 fc58 	bl	8006bcc <__i2b>
 800631c:	4606      	mov	r6, r0
 800631e:	2f00      	cmp	r7, #0
 8006320:	dd0c      	ble.n	800633c <_dtoa_r+0x77c>
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	dd09      	ble.n	800633c <_dtoa_r+0x77c>
 8006328:	42bb      	cmp	r3, r7
 800632a:	bfa8      	it	ge
 800632c:	463b      	movge	r3, r7
 800632e:	9a06      	ldr	r2, [sp, #24]
 8006330:	1aff      	subs	r7, r7, r3
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	9206      	str	r2, [sp, #24]
 8006336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	9309      	str	r3, [sp, #36]	; 0x24
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	b1f3      	cbz	r3, 800637e <_dtoa_r+0x7be>
 8006340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 80a8 	beq.w	8006498 <_dtoa_r+0x8d8>
 8006348:	2c00      	cmp	r4, #0
 800634a:	dd10      	ble.n	800636e <_dtoa_r+0x7ae>
 800634c:	4631      	mov	r1, r6
 800634e:	4622      	mov	r2, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fcf9 	bl	8006d48 <__pow5mult>
 8006356:	465a      	mov	r2, fp
 8006358:	4601      	mov	r1, r0
 800635a:	4606      	mov	r6, r0
 800635c:	4628      	mov	r0, r5
 800635e:	f000 fc4b 	bl	8006bf8 <__multiply>
 8006362:	4680      	mov	r8, r0
 8006364:	4659      	mov	r1, fp
 8006366:	4628      	mov	r0, r5
 8006368:	f000 fb7a 	bl	8006a60 <_Bfree>
 800636c:	46c3      	mov	fp, r8
 800636e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006370:	1b1a      	subs	r2, r3, r4
 8006372:	d004      	beq.n	800637e <_dtoa_r+0x7be>
 8006374:	4659      	mov	r1, fp
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fce6 	bl	8006d48 <__pow5mult>
 800637c:	4683      	mov	fp, r0
 800637e:	2101      	movs	r1, #1
 8006380:	4628      	mov	r0, r5
 8006382:	f000 fc23 	bl	8006bcc <__i2b>
 8006386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006388:	4604      	mov	r4, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	f340 8086 	ble.w	800649c <_dtoa_r+0x8dc>
 8006390:	461a      	mov	r2, r3
 8006392:	4601      	mov	r1, r0
 8006394:	4628      	mov	r0, r5
 8006396:	f000 fcd7 	bl	8006d48 <__pow5mult>
 800639a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800639c:	4604      	mov	r4, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	dd7f      	ble.n	80064a2 <_dtoa_r+0x8e2>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063ac:	6918      	ldr	r0, [r3, #16]
 80063ae:	f000 fbbf 	bl	8006b30 <__hi0bits>
 80063b2:	f1c0 0020 	rsb	r0, r0, #32
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	4418      	add	r0, r3
 80063ba:	f010 001f 	ands.w	r0, r0, #31
 80063be:	f000 8092 	beq.w	80064e6 <_dtoa_r+0x926>
 80063c2:	f1c0 0320 	rsb	r3, r0, #32
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	f340 808a 	ble.w	80064e0 <_dtoa_r+0x920>
 80063cc:	f1c0 001c 	rsb	r0, r0, #28
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	4407      	add	r7, r0
 80063d4:	4403      	add	r3, r0
 80063d6:	9306      	str	r3, [sp, #24]
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	4403      	add	r3, r0
 80063dc:	9309      	str	r3, [sp, #36]	; 0x24
 80063de:	9b06      	ldr	r3, [sp, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dd05      	ble.n	80063f0 <_dtoa_r+0x830>
 80063e4:	4659      	mov	r1, fp
 80063e6:	461a      	mov	r2, r3
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 fd07 	bl	8006dfc <__lshift>
 80063ee:	4683      	mov	fp, r0
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd05      	ble.n	8006402 <_dtoa_r+0x842>
 80063f6:	4621      	mov	r1, r4
 80063f8:	461a      	mov	r2, r3
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fcfe 	bl	8006dfc <__lshift>
 8006400:	4604      	mov	r4, r0
 8006402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d070      	beq.n	80064ea <_dtoa_r+0x92a>
 8006408:	4621      	mov	r1, r4
 800640a:	4658      	mov	r0, fp
 800640c:	f000 fd66 	bl	8006edc <__mcmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	da6a      	bge.n	80064ea <_dtoa_r+0x92a>
 8006414:	2300      	movs	r3, #0
 8006416:	4659      	mov	r1, fp
 8006418:	220a      	movs	r2, #10
 800641a:	4628      	mov	r0, r5
 800641c:	f000 fb42 	bl	8006aa4 <__multadd>
 8006420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006422:	4683      	mov	fp, r0
 8006424:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8194 	beq.w	8006756 <_dtoa_r+0xb96>
 800642e:	4631      	mov	r1, r6
 8006430:	2300      	movs	r3, #0
 8006432:	220a      	movs	r2, #10
 8006434:	4628      	mov	r0, r5
 8006436:	f000 fb35 	bl	8006aa4 <__multadd>
 800643a:	f1b9 0f00 	cmp.w	r9, #0
 800643e:	4606      	mov	r6, r0
 8006440:	f300 8093 	bgt.w	800656a <_dtoa_r+0x9aa>
 8006444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006446:	2b02      	cmp	r3, #2
 8006448:	dc57      	bgt.n	80064fa <_dtoa_r+0x93a>
 800644a:	e08e      	b.n	800656a <_dtoa_r+0x9aa>
 800644c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800644e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006452:	e757      	b.n	8006304 <_dtoa_r+0x744>
 8006454:	9b08      	ldr	r3, [sp, #32]
 8006456:	1e5c      	subs	r4, r3, #1
 8006458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800645a:	42a3      	cmp	r3, r4
 800645c:	bfb7      	itett	lt
 800645e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006460:	1b1c      	subge	r4, r3, r4
 8006462:	1ae2      	sublt	r2, r4, r3
 8006464:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006466:	bfbe      	ittt	lt
 8006468:	940a      	strlt	r4, [sp, #40]	; 0x28
 800646a:	189b      	addlt	r3, r3, r2
 800646c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800646e:	9b08      	ldr	r3, [sp, #32]
 8006470:	bfb8      	it	lt
 8006472:	2400      	movlt	r4, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	bfbb      	ittet	lt
 8006478:	9b06      	ldrlt	r3, [sp, #24]
 800647a:	9a08      	ldrlt	r2, [sp, #32]
 800647c:	9f06      	ldrge	r7, [sp, #24]
 800647e:	1a9f      	sublt	r7, r3, r2
 8006480:	bfac      	ite	ge
 8006482:	9b08      	ldrge	r3, [sp, #32]
 8006484:	2300      	movlt	r3, #0
 8006486:	e73f      	b.n	8006308 <_dtoa_r+0x748>
 8006488:	3fe00000 	.word	0x3fe00000
 800648c:	40240000 	.word	0x40240000
 8006490:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006492:	9f06      	ldr	r7, [sp, #24]
 8006494:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006496:	e742      	b.n	800631e <_dtoa_r+0x75e>
 8006498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649a:	e76b      	b.n	8006374 <_dtoa_r+0x7b4>
 800649c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800649e:	2b01      	cmp	r3, #1
 80064a0:	dc19      	bgt.n	80064d6 <_dtoa_r+0x916>
 80064a2:	9b04      	ldr	r3, [sp, #16]
 80064a4:	b9bb      	cbnz	r3, 80064d6 <_dtoa_r+0x916>
 80064a6:	9b05      	ldr	r3, [sp, #20]
 80064a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064ac:	b99b      	cbnz	r3, 80064d6 <_dtoa_r+0x916>
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064b4:	0d1b      	lsrs	r3, r3, #20
 80064b6:	051b      	lsls	r3, r3, #20
 80064b8:	b183      	cbz	r3, 80064dc <_dtoa_r+0x91c>
 80064ba:	f04f 0801 	mov.w	r8, #1
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	3301      	adds	r3, #1
 80064c2:	9306      	str	r3, [sp, #24]
 80064c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c6:	3301      	adds	r3, #1
 80064c8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f47f af6a 	bne.w	80063a6 <_dtoa_r+0x7e6>
 80064d2:	2001      	movs	r0, #1
 80064d4:	e76f      	b.n	80063b6 <_dtoa_r+0x7f6>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	e7f6      	b.n	80064ca <_dtoa_r+0x90a>
 80064dc:	4698      	mov	r8, r3
 80064de:	e7f4      	b.n	80064ca <_dtoa_r+0x90a>
 80064e0:	f43f af7d 	beq.w	80063de <_dtoa_r+0x81e>
 80064e4:	4618      	mov	r0, r3
 80064e6:	301c      	adds	r0, #28
 80064e8:	e772      	b.n	80063d0 <_dtoa_r+0x810>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dc36      	bgt.n	800655e <_dtoa_r+0x99e>
 80064f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	dd33      	ble.n	800655e <_dtoa_r+0x99e>
 80064f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064fa:	f1b9 0f00 	cmp.w	r9, #0
 80064fe:	d10d      	bne.n	800651c <_dtoa_r+0x95c>
 8006500:	4621      	mov	r1, r4
 8006502:	464b      	mov	r3, r9
 8006504:	2205      	movs	r2, #5
 8006506:	4628      	mov	r0, r5
 8006508:	f000 facc 	bl	8006aa4 <__multadd>
 800650c:	4601      	mov	r1, r0
 800650e:	4604      	mov	r4, r0
 8006510:	4658      	mov	r0, fp
 8006512:	f000 fce3 	bl	8006edc <__mcmp>
 8006516:	2800      	cmp	r0, #0
 8006518:	f73f adb8 	bgt.w	800608c <_dtoa_r+0x4cc>
 800651c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800651e:	9f03      	ldr	r7, [sp, #12]
 8006520:	ea6f 0a03 	mvn.w	sl, r3
 8006524:	f04f 0800 	mov.w	r8, #0
 8006528:	4621      	mov	r1, r4
 800652a:	4628      	mov	r0, r5
 800652c:	f000 fa98 	bl	8006a60 <_Bfree>
 8006530:	2e00      	cmp	r6, #0
 8006532:	f43f aea7 	beq.w	8006284 <_dtoa_r+0x6c4>
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	d005      	beq.n	8006548 <_dtoa_r+0x988>
 800653c:	45b0      	cmp	r8, r6
 800653e:	d003      	beq.n	8006548 <_dtoa_r+0x988>
 8006540:	4641      	mov	r1, r8
 8006542:	4628      	mov	r0, r5
 8006544:	f000 fa8c 	bl	8006a60 <_Bfree>
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	f000 fa88 	bl	8006a60 <_Bfree>
 8006550:	e698      	b.n	8006284 <_dtoa_r+0x6c4>
 8006552:	2400      	movs	r4, #0
 8006554:	4626      	mov	r6, r4
 8006556:	e7e1      	b.n	800651c <_dtoa_r+0x95c>
 8006558:	46c2      	mov	sl, r8
 800655a:	4626      	mov	r6, r4
 800655c:	e596      	b.n	800608c <_dtoa_r+0x4cc>
 800655e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80fd 	beq.w	8006764 <_dtoa_r+0xba4>
 800656a:	2f00      	cmp	r7, #0
 800656c:	dd05      	ble.n	800657a <_dtoa_r+0x9ba>
 800656e:	4631      	mov	r1, r6
 8006570:	463a      	mov	r2, r7
 8006572:	4628      	mov	r0, r5
 8006574:	f000 fc42 	bl	8006dfc <__lshift>
 8006578:	4606      	mov	r6, r0
 800657a:	f1b8 0f00 	cmp.w	r8, #0
 800657e:	d05c      	beq.n	800663a <_dtoa_r+0xa7a>
 8006580:	4628      	mov	r0, r5
 8006582:	6871      	ldr	r1, [r6, #4]
 8006584:	f000 fa2c 	bl	80069e0 <_Balloc>
 8006588:	4607      	mov	r7, r0
 800658a:	b928      	cbnz	r0, 8006598 <_dtoa_r+0x9d8>
 800658c:	4602      	mov	r2, r0
 800658e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006592:	4b7f      	ldr	r3, [pc, #508]	; (8006790 <_dtoa_r+0xbd0>)
 8006594:	f7ff bb28 	b.w	8005be8 <_dtoa_r+0x28>
 8006598:	6932      	ldr	r2, [r6, #16]
 800659a:	f106 010c 	add.w	r1, r6, #12
 800659e:	3202      	adds	r2, #2
 80065a0:	0092      	lsls	r2, r2, #2
 80065a2:	300c      	adds	r0, #12
 80065a4:	f000 fa0e 	bl	80069c4 <memcpy>
 80065a8:	2201      	movs	r2, #1
 80065aa:	4639      	mov	r1, r7
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 fc25 	bl	8006dfc <__lshift>
 80065b2:	46b0      	mov	r8, r6
 80065b4:	4606      	mov	r6, r0
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	3301      	adds	r3, #1
 80065ba:	9308      	str	r3, [sp, #32]
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	444b      	add	r3, r9
 80065c0:	930a      	str	r3, [sp, #40]	; 0x28
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	4621      	mov	r1, r4
 80065ce:	3b01      	subs	r3, #1
 80065d0:	4658      	mov	r0, fp
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	f7ff fa68 	bl	8005aa8 <quorem>
 80065d8:	4603      	mov	r3, r0
 80065da:	4641      	mov	r1, r8
 80065dc:	3330      	adds	r3, #48	; 0x30
 80065de:	9006      	str	r0, [sp, #24]
 80065e0:	4658      	mov	r0, fp
 80065e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e4:	f000 fc7a 	bl	8006edc <__mcmp>
 80065e8:	4632      	mov	r2, r6
 80065ea:	4681      	mov	r9, r0
 80065ec:	4621      	mov	r1, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 fc90 	bl	8006f14 <__mdiff>
 80065f4:	68c2      	ldr	r2, [r0, #12]
 80065f6:	4607      	mov	r7, r0
 80065f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fa:	bb02      	cbnz	r2, 800663e <_dtoa_r+0xa7e>
 80065fc:	4601      	mov	r1, r0
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fc6c 	bl	8006edc <__mcmp>
 8006604:	4602      	mov	r2, r0
 8006606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006608:	4639      	mov	r1, r7
 800660a:	4628      	mov	r0, r5
 800660c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006610:	f000 fa26 	bl	8006a60 <_Bfree>
 8006614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006618:	9f08      	ldr	r7, [sp, #32]
 800661a:	ea43 0102 	orr.w	r1, r3, r2
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	430b      	orrs	r3, r1
 8006622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006624:	d10d      	bne.n	8006642 <_dtoa_r+0xa82>
 8006626:	2b39      	cmp	r3, #57	; 0x39
 8006628:	d029      	beq.n	800667e <_dtoa_r+0xabe>
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	dd01      	ble.n	8006634 <_dtoa_r+0xa74>
 8006630:	9b06      	ldr	r3, [sp, #24]
 8006632:	3331      	adds	r3, #49	; 0x31
 8006634:	9a04      	ldr	r2, [sp, #16]
 8006636:	7013      	strb	r3, [r2, #0]
 8006638:	e776      	b.n	8006528 <_dtoa_r+0x968>
 800663a:	4630      	mov	r0, r6
 800663c:	e7b9      	b.n	80065b2 <_dtoa_r+0x9f2>
 800663e:	2201      	movs	r2, #1
 8006640:	e7e2      	b.n	8006608 <_dtoa_r+0xa48>
 8006642:	f1b9 0f00 	cmp.w	r9, #0
 8006646:	db06      	blt.n	8006656 <_dtoa_r+0xa96>
 8006648:	9922      	ldr	r1, [sp, #136]	; 0x88
 800664a:	ea41 0909 	orr.w	r9, r1, r9
 800664e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006650:	ea59 0101 	orrs.w	r1, r9, r1
 8006654:	d120      	bne.n	8006698 <_dtoa_r+0xad8>
 8006656:	2a00      	cmp	r2, #0
 8006658:	ddec      	ble.n	8006634 <_dtoa_r+0xa74>
 800665a:	4659      	mov	r1, fp
 800665c:	2201      	movs	r2, #1
 800665e:	4628      	mov	r0, r5
 8006660:	9308      	str	r3, [sp, #32]
 8006662:	f000 fbcb 	bl	8006dfc <__lshift>
 8006666:	4621      	mov	r1, r4
 8006668:	4683      	mov	fp, r0
 800666a:	f000 fc37 	bl	8006edc <__mcmp>
 800666e:	2800      	cmp	r0, #0
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	dc02      	bgt.n	800667a <_dtoa_r+0xaba>
 8006674:	d1de      	bne.n	8006634 <_dtoa_r+0xa74>
 8006676:	07da      	lsls	r2, r3, #31
 8006678:	d5dc      	bpl.n	8006634 <_dtoa_r+0xa74>
 800667a:	2b39      	cmp	r3, #57	; 0x39
 800667c:	d1d8      	bne.n	8006630 <_dtoa_r+0xa70>
 800667e:	2339      	movs	r3, #57	; 0x39
 8006680:	9a04      	ldr	r2, [sp, #16]
 8006682:	7013      	strb	r3, [r2, #0]
 8006684:	463b      	mov	r3, r7
 8006686:	461f      	mov	r7, r3
 8006688:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800668c:	3b01      	subs	r3, #1
 800668e:	2a39      	cmp	r2, #57	; 0x39
 8006690:	d050      	beq.n	8006734 <_dtoa_r+0xb74>
 8006692:	3201      	adds	r2, #1
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	e747      	b.n	8006528 <_dtoa_r+0x968>
 8006698:	2a00      	cmp	r2, #0
 800669a:	dd03      	ble.n	80066a4 <_dtoa_r+0xae4>
 800669c:	2b39      	cmp	r3, #57	; 0x39
 800669e:	d0ee      	beq.n	800667e <_dtoa_r+0xabe>
 80066a0:	3301      	adds	r3, #1
 80066a2:	e7c7      	b.n	8006634 <_dtoa_r+0xa74>
 80066a4:	9a08      	ldr	r2, [sp, #32]
 80066a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066ac:	428a      	cmp	r2, r1
 80066ae:	d02a      	beq.n	8006706 <_dtoa_r+0xb46>
 80066b0:	4659      	mov	r1, fp
 80066b2:	2300      	movs	r3, #0
 80066b4:	220a      	movs	r2, #10
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f9f4 	bl	8006aa4 <__multadd>
 80066bc:	45b0      	cmp	r8, r6
 80066be:	4683      	mov	fp, r0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	f04f 020a 	mov.w	r2, #10
 80066c8:	4641      	mov	r1, r8
 80066ca:	4628      	mov	r0, r5
 80066cc:	d107      	bne.n	80066de <_dtoa_r+0xb1e>
 80066ce:	f000 f9e9 	bl	8006aa4 <__multadd>
 80066d2:	4680      	mov	r8, r0
 80066d4:	4606      	mov	r6, r0
 80066d6:	9b08      	ldr	r3, [sp, #32]
 80066d8:	3301      	adds	r3, #1
 80066da:	9308      	str	r3, [sp, #32]
 80066dc:	e775      	b.n	80065ca <_dtoa_r+0xa0a>
 80066de:	f000 f9e1 	bl	8006aa4 <__multadd>
 80066e2:	4631      	mov	r1, r6
 80066e4:	4680      	mov	r8, r0
 80066e6:	2300      	movs	r3, #0
 80066e8:	220a      	movs	r2, #10
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 f9da 	bl	8006aa4 <__multadd>
 80066f0:	4606      	mov	r6, r0
 80066f2:	e7f0      	b.n	80066d6 <_dtoa_r+0xb16>
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	bfcc      	ite	gt
 80066fa:	464f      	movgt	r7, r9
 80066fc:	2701      	movle	r7, #1
 80066fe:	f04f 0800 	mov.w	r8, #0
 8006702:	9a03      	ldr	r2, [sp, #12]
 8006704:	4417      	add	r7, r2
 8006706:	4659      	mov	r1, fp
 8006708:	2201      	movs	r2, #1
 800670a:	4628      	mov	r0, r5
 800670c:	9308      	str	r3, [sp, #32]
 800670e:	f000 fb75 	bl	8006dfc <__lshift>
 8006712:	4621      	mov	r1, r4
 8006714:	4683      	mov	fp, r0
 8006716:	f000 fbe1 	bl	8006edc <__mcmp>
 800671a:	2800      	cmp	r0, #0
 800671c:	dcb2      	bgt.n	8006684 <_dtoa_r+0xac4>
 800671e:	d102      	bne.n	8006726 <_dtoa_r+0xb66>
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	07db      	lsls	r3, r3, #31
 8006724:	d4ae      	bmi.n	8006684 <_dtoa_r+0xac4>
 8006726:	463b      	mov	r3, r7
 8006728:	461f      	mov	r7, r3
 800672a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800672e:	2a30      	cmp	r2, #48	; 0x30
 8006730:	d0fa      	beq.n	8006728 <_dtoa_r+0xb68>
 8006732:	e6f9      	b.n	8006528 <_dtoa_r+0x968>
 8006734:	9a03      	ldr	r2, [sp, #12]
 8006736:	429a      	cmp	r2, r3
 8006738:	d1a5      	bne.n	8006686 <_dtoa_r+0xac6>
 800673a:	2331      	movs	r3, #49	; 0x31
 800673c:	f10a 0a01 	add.w	sl, sl, #1
 8006740:	e779      	b.n	8006636 <_dtoa_r+0xa76>
 8006742:	4b14      	ldr	r3, [pc, #80]	; (8006794 <_dtoa_r+0xbd4>)
 8006744:	f7ff baa8 	b.w	8005c98 <_dtoa_r+0xd8>
 8006748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800674a:	2b00      	cmp	r3, #0
 800674c:	f47f aa81 	bne.w	8005c52 <_dtoa_r+0x92>
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <_dtoa_r+0xbd8>)
 8006752:	f7ff baa1 	b.w	8005c98 <_dtoa_r+0xd8>
 8006756:	f1b9 0f00 	cmp.w	r9, #0
 800675a:	dc03      	bgt.n	8006764 <_dtoa_r+0xba4>
 800675c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800675e:	2b02      	cmp	r3, #2
 8006760:	f73f aecb 	bgt.w	80064fa <_dtoa_r+0x93a>
 8006764:	9f03      	ldr	r7, [sp, #12]
 8006766:	4621      	mov	r1, r4
 8006768:	4658      	mov	r0, fp
 800676a:	f7ff f99d 	bl	8005aa8 <quorem>
 800676e:	9a03      	ldr	r2, [sp, #12]
 8006770:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006774:	f807 3b01 	strb.w	r3, [r7], #1
 8006778:	1aba      	subs	r2, r7, r2
 800677a:	4591      	cmp	r9, r2
 800677c:	ddba      	ble.n	80066f4 <_dtoa_r+0xb34>
 800677e:	4659      	mov	r1, fp
 8006780:	2300      	movs	r3, #0
 8006782:	220a      	movs	r2, #10
 8006784:	4628      	mov	r0, r5
 8006786:	f000 f98d 	bl	8006aa4 <__multadd>
 800678a:	4683      	mov	fp, r0
 800678c:	e7eb      	b.n	8006766 <_dtoa_r+0xba6>
 800678e:	bf00      	nop
 8006790:	08007e03 	.word	0x08007e03
 8006794:	08007d60 	.word	0x08007d60
 8006798:	08007d84 	.word	0x08007d84

0800679c <std>:
 800679c:	2300      	movs	r3, #0
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
 80067a2:	e9c0 3300 	strd	r3, r3, [r0]
 80067a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067aa:	6083      	str	r3, [r0, #8]
 80067ac:	8181      	strh	r1, [r0, #12]
 80067ae:	6643      	str	r3, [r0, #100]	; 0x64
 80067b0:	81c2      	strh	r2, [r0, #14]
 80067b2:	6183      	str	r3, [r0, #24]
 80067b4:	4619      	mov	r1, r3
 80067b6:	2208      	movs	r2, #8
 80067b8:	305c      	adds	r0, #92	; 0x5c
 80067ba:	f7fe fcf5 	bl	80051a8 <memset>
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <std+0x38>)
 80067c0:	6224      	str	r4, [r4, #32]
 80067c2:	6263      	str	r3, [r4, #36]	; 0x24
 80067c4:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <std+0x3c>)
 80067c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80067c8:	4b04      	ldr	r3, [pc, #16]	; (80067dc <std+0x40>)
 80067ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <std+0x44>)
 80067ce:	6323      	str	r3, [r4, #48]	; 0x30
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	08007595 	.word	0x08007595
 80067d8:	080075b7 	.word	0x080075b7
 80067dc:	080075ef 	.word	0x080075ef
 80067e0:	08007613 	.word	0x08007613

080067e4 <_cleanup_r>:
 80067e4:	4901      	ldr	r1, [pc, #4]	; (80067ec <_cleanup_r+0x8>)
 80067e6:	f000 b8af 	b.w	8006948 <_fwalk_reent>
 80067ea:	bf00      	nop
 80067ec:	08007921 	.word	0x08007921

080067f0 <__sfmoreglue>:
 80067f0:	2268      	movs	r2, #104	; 0x68
 80067f2:	b570      	push	{r4, r5, r6, lr}
 80067f4:	1e4d      	subs	r5, r1, #1
 80067f6:	4355      	muls	r5, r2
 80067f8:	460e      	mov	r6, r1
 80067fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067fe:	f000 fced 	bl	80071dc <_malloc_r>
 8006802:	4604      	mov	r4, r0
 8006804:	b140      	cbz	r0, 8006818 <__sfmoreglue+0x28>
 8006806:	2100      	movs	r1, #0
 8006808:	e9c0 1600 	strd	r1, r6, [r0]
 800680c:	300c      	adds	r0, #12
 800680e:	60a0      	str	r0, [r4, #8]
 8006810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006814:	f7fe fcc8 	bl	80051a8 <memset>
 8006818:	4620      	mov	r0, r4
 800681a:	bd70      	pop	{r4, r5, r6, pc}

0800681c <__sfp_lock_acquire>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__sfp_lock_acquire+0x8>)
 800681e:	f000 b8b8 	b.w	8006992 <__retarget_lock_acquire_recursive>
 8006822:	bf00      	nop
 8006824:	200002a9 	.word	0x200002a9

08006828 <__sfp_lock_release>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__sfp_lock_release+0x8>)
 800682a:	f000 b8b3 	b.w	8006994 <__retarget_lock_release_recursive>
 800682e:	bf00      	nop
 8006830:	200002a9 	.word	0x200002a9

08006834 <__sinit_lock_acquire>:
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <__sinit_lock_acquire+0x8>)
 8006836:	f000 b8ac 	b.w	8006992 <__retarget_lock_acquire_recursive>
 800683a:	bf00      	nop
 800683c:	200002aa 	.word	0x200002aa

08006840 <__sinit_lock_release>:
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <__sinit_lock_release+0x8>)
 8006842:	f000 b8a7 	b.w	8006994 <__retarget_lock_release_recursive>
 8006846:	bf00      	nop
 8006848:	200002aa 	.word	0x200002aa

0800684c <__sinit>:
 800684c:	b510      	push	{r4, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	f7ff fff0 	bl	8006834 <__sinit_lock_acquire>
 8006854:	69a3      	ldr	r3, [r4, #24]
 8006856:	b11b      	cbz	r3, 8006860 <__sinit+0x14>
 8006858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685c:	f7ff bff0 	b.w	8006840 <__sinit_lock_release>
 8006860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006864:	6523      	str	r3, [r4, #80]	; 0x50
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <__sinit+0x68>)
 8006868:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <__sinit+0x6c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	62a2      	str	r2, [r4, #40]	; 0x28
 800686e:	42a3      	cmp	r3, r4
 8006870:	bf08      	it	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	4620      	mov	r0, r4
 8006876:	bf08      	it	eq
 8006878:	61a3      	streq	r3, [r4, #24]
 800687a:	f000 f81f 	bl	80068bc <__sfp>
 800687e:	6060      	str	r0, [r4, #4]
 8006880:	4620      	mov	r0, r4
 8006882:	f000 f81b 	bl	80068bc <__sfp>
 8006886:	60a0      	str	r0, [r4, #8]
 8006888:	4620      	mov	r0, r4
 800688a:	f000 f817 	bl	80068bc <__sfp>
 800688e:	2200      	movs	r2, #0
 8006890:	2104      	movs	r1, #4
 8006892:	60e0      	str	r0, [r4, #12]
 8006894:	6860      	ldr	r0, [r4, #4]
 8006896:	f7ff ff81 	bl	800679c <std>
 800689a:	2201      	movs	r2, #1
 800689c:	2109      	movs	r1, #9
 800689e:	68a0      	ldr	r0, [r4, #8]
 80068a0:	f7ff ff7c 	bl	800679c <std>
 80068a4:	2202      	movs	r2, #2
 80068a6:	2112      	movs	r1, #18
 80068a8:	68e0      	ldr	r0, [r4, #12]
 80068aa:	f7ff ff77 	bl	800679c <std>
 80068ae:	2301      	movs	r3, #1
 80068b0:	61a3      	str	r3, [r4, #24]
 80068b2:	e7d1      	b.n	8006858 <__sinit+0xc>
 80068b4:	08007d4c 	.word	0x08007d4c
 80068b8:	080067e5 	.word	0x080067e5

080068bc <__sfp>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	4607      	mov	r7, r0
 80068c0:	f7ff ffac 	bl	800681c <__sfp_lock_acquire>
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <__sfp+0x84>)
 80068c6:	681e      	ldr	r6, [r3, #0]
 80068c8:	69b3      	ldr	r3, [r6, #24]
 80068ca:	b913      	cbnz	r3, 80068d2 <__sfp+0x16>
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7ff ffbd 	bl	800684c <__sinit>
 80068d2:	3648      	adds	r6, #72	; 0x48
 80068d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068d8:	3b01      	subs	r3, #1
 80068da:	d503      	bpl.n	80068e4 <__sfp+0x28>
 80068dc:	6833      	ldr	r3, [r6, #0]
 80068de:	b30b      	cbz	r3, 8006924 <__sfp+0x68>
 80068e0:	6836      	ldr	r6, [r6, #0]
 80068e2:	e7f7      	b.n	80068d4 <__sfp+0x18>
 80068e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068e8:	b9d5      	cbnz	r5, 8006920 <__sfp+0x64>
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <__sfp+0x88>)
 80068ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068f0:	60e3      	str	r3, [r4, #12]
 80068f2:	6665      	str	r5, [r4, #100]	; 0x64
 80068f4:	f000 f84c 	bl	8006990 <__retarget_lock_init_recursive>
 80068f8:	f7ff ff96 	bl	8006828 <__sfp_lock_release>
 80068fc:	2208      	movs	r2, #8
 80068fe:	4629      	mov	r1, r5
 8006900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006908:	6025      	str	r5, [r4, #0]
 800690a:	61a5      	str	r5, [r4, #24]
 800690c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006910:	f7fe fc4a 	bl	80051a8 <memset>
 8006914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800691c:	4620      	mov	r0, r4
 800691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006920:	3468      	adds	r4, #104	; 0x68
 8006922:	e7d9      	b.n	80068d8 <__sfp+0x1c>
 8006924:	2104      	movs	r1, #4
 8006926:	4638      	mov	r0, r7
 8006928:	f7ff ff62 	bl	80067f0 <__sfmoreglue>
 800692c:	4604      	mov	r4, r0
 800692e:	6030      	str	r0, [r6, #0]
 8006930:	2800      	cmp	r0, #0
 8006932:	d1d5      	bne.n	80068e0 <__sfp+0x24>
 8006934:	f7ff ff78 	bl	8006828 <__sfp_lock_release>
 8006938:	230c      	movs	r3, #12
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	e7ee      	b.n	800691c <__sfp+0x60>
 800693e:	bf00      	nop
 8006940:	08007d4c 	.word	0x08007d4c
 8006944:	ffff0001 	.word	0xffff0001

08006948 <_fwalk_reent>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4606      	mov	r6, r0
 800694e:	4688      	mov	r8, r1
 8006950:	2700      	movs	r7, #0
 8006952:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800695a:	f1b9 0901 	subs.w	r9, r9, #1
 800695e:	d505      	bpl.n	800696c <_fwalk_reent+0x24>
 8006960:	6824      	ldr	r4, [r4, #0]
 8006962:	2c00      	cmp	r4, #0
 8006964:	d1f7      	bne.n	8006956 <_fwalk_reent+0xe>
 8006966:	4638      	mov	r0, r7
 8006968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696c:	89ab      	ldrh	r3, [r5, #12]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d907      	bls.n	8006982 <_fwalk_reent+0x3a>
 8006972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006976:	3301      	adds	r3, #1
 8006978:	d003      	beq.n	8006982 <_fwalk_reent+0x3a>
 800697a:	4629      	mov	r1, r5
 800697c:	4630      	mov	r0, r6
 800697e:	47c0      	blx	r8
 8006980:	4307      	orrs	r7, r0
 8006982:	3568      	adds	r5, #104	; 0x68
 8006984:	e7e9      	b.n	800695a <_fwalk_reent+0x12>
	...

08006988 <_localeconv_r>:
 8006988:	4800      	ldr	r0, [pc, #0]	; (800698c <_localeconv_r+0x4>)
 800698a:	4770      	bx	lr
 800698c:	20000160 	.word	0x20000160

08006990 <__retarget_lock_init_recursive>:
 8006990:	4770      	bx	lr

08006992 <__retarget_lock_acquire_recursive>:
 8006992:	4770      	bx	lr

08006994 <__retarget_lock_release_recursive>:
 8006994:	4770      	bx	lr
	...

08006998 <malloc>:
 8006998:	4b02      	ldr	r3, [pc, #8]	; (80069a4 <malloc+0xc>)
 800699a:	4601      	mov	r1, r0
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	f000 bc1d 	b.w	80071dc <_malloc_r>
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c

080069a8 <memchr>:
 80069a8:	4603      	mov	r3, r0
 80069aa:	b510      	push	{r4, lr}
 80069ac:	b2c9      	uxtb	r1, r1
 80069ae:	4402      	add	r2, r0
 80069b0:	4293      	cmp	r3, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	d101      	bne.n	80069ba <memchr+0x12>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e003      	b.n	80069c2 <memchr+0x1a>
 80069ba:	7804      	ldrb	r4, [r0, #0]
 80069bc:	3301      	adds	r3, #1
 80069be:	428c      	cmp	r4, r1
 80069c0:	d1f6      	bne.n	80069b0 <memchr+0x8>
 80069c2:	bd10      	pop	{r4, pc}

080069c4 <memcpy>:
 80069c4:	440a      	add	r2, r1
 80069c6:	4291      	cmp	r1, r2
 80069c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80069cc:	d100      	bne.n	80069d0 <memcpy+0xc>
 80069ce:	4770      	bx	lr
 80069d0:	b510      	push	{r4, lr}
 80069d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d6:	4291      	cmp	r1, r2
 80069d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069dc:	d1f9      	bne.n	80069d2 <memcpy+0xe>
 80069de:	bd10      	pop	{r4, pc}

080069e0 <_Balloc>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	b976      	cbnz	r6, 8006a08 <_Balloc+0x28>
 80069ea:	2010      	movs	r0, #16
 80069ec:	f7ff ffd4 	bl	8006998 <malloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6260      	str	r0, [r4, #36]	; 0x24
 80069f4:	b920      	cbnz	r0, 8006a00 <_Balloc+0x20>
 80069f6:	2166      	movs	r1, #102	; 0x66
 80069f8:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <_Balloc+0x78>)
 80069fa:	4818      	ldr	r0, [pc, #96]	; (8006a5c <_Balloc+0x7c>)
 80069fc:	f000 fee0 	bl	80077c0 <__assert_func>
 8006a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a04:	6006      	str	r6, [r0, #0]
 8006a06:	60c6      	str	r6, [r0, #12]
 8006a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a0a:	68f3      	ldr	r3, [r6, #12]
 8006a0c:	b183      	cbz	r3, 8006a30 <_Balloc+0x50>
 8006a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a16:	b9b8      	cbnz	r0, 8006a48 <_Balloc+0x68>
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a1e:	1d72      	adds	r2, r6, #5
 8006a20:	4620      	mov	r0, r4
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	f000 fb5e 	bl	80070e4 <_calloc_r>
 8006a28:	b160      	cbz	r0, 8006a44 <_Balloc+0x64>
 8006a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a2e:	e00e      	b.n	8006a4e <_Balloc+0x6e>
 8006a30:	2221      	movs	r2, #33	; 0x21
 8006a32:	2104      	movs	r1, #4
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fb55 	bl	80070e4 <_calloc_r>
 8006a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a3c:	60f0      	str	r0, [r6, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <_Balloc+0x2e>
 8006a44:	2000      	movs	r0, #0
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a54:	e7f7      	b.n	8006a46 <_Balloc+0x66>
 8006a56:	bf00      	nop
 8006a58:	08007d91 	.word	0x08007d91
 8006a5c:	08007e74 	.word	0x08007e74

08006a60 <_Bfree>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Bfree+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff94 	bl	8006998 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6268      	str	r0, [r5, #36]	; 0x24
 8006a74:	b920      	cbnz	r0, 8006a80 <_Bfree+0x20>
 8006a76:	218a      	movs	r1, #138	; 0x8a
 8006a78:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <_Bfree+0x3c>)
 8006a7a:	4809      	ldr	r0, [pc, #36]	; (8006aa0 <_Bfree+0x40>)
 8006a7c:	f000 fea0 	bl	80077c0 <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	b13c      	cbz	r4, 8006a9a <_Bfree+0x3a>
 8006a8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	08007d91 	.word	0x08007d91
 8006aa0:	08007e74 	.word	0x08007e74

08006aa4 <__multadd>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	461e      	mov	r6, r3
 8006aae:	2000      	movs	r0, #0
 8006ab0:	690d      	ldr	r5, [r1, #16]
 8006ab2:	f101 0c14 	add.w	ip, r1, #20
 8006ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aba:	3001      	adds	r0, #1
 8006abc:	b299      	uxth	r1, r3
 8006abe:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac2:	0c1e      	lsrs	r6, r3, #16
 8006ac4:	0c0b      	lsrs	r3, r1, #16
 8006ac6:	fb02 3306 	mla	r3, r2, r6, r3
 8006aca:	b289      	uxth	r1, r1
 8006acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad0:	4285      	cmp	r5, r0
 8006ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8006ada:	dcec      	bgt.n	8006ab6 <__multadd+0x12>
 8006adc:	b30e      	cbz	r6, 8006b22 <__multadd+0x7e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	dc19      	bgt.n	8006b18 <__multadd+0x74>
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	3101      	adds	r1, #1
 8006aea:	f7ff ff79 	bl	80069e0 <_Balloc>
 8006aee:	4680      	mov	r8, r0
 8006af0:	b928      	cbnz	r0, 8006afe <__multadd+0x5a>
 8006af2:	4602      	mov	r2, r0
 8006af4:	21b5      	movs	r1, #181	; 0xb5
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <__multadd+0x84>)
 8006af8:	480c      	ldr	r0, [pc, #48]	; (8006b2c <__multadd+0x88>)
 8006afa:	f000 fe61 	bl	80077c0 <__assert_func>
 8006afe:	6922      	ldr	r2, [r4, #16]
 8006b00:	f104 010c 	add.w	r1, r4, #12
 8006b04:	3202      	adds	r2, #2
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f7ff ff5b 	bl	80069c4 <memcpy>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ffa5 	bl	8006a60 <_Bfree>
 8006b16:	4644      	mov	r4, r8
 8006b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	615e      	str	r6, [r3, #20]
 8006b20:	6125      	str	r5, [r4, #16]
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	08007e03 	.word	0x08007e03
 8006b2c:	08007e74 	.word	0x08007e74

08006b30 <__hi0bits>:
 8006b30:	0c02      	lsrs	r2, r0, #16
 8006b32:	0412      	lsls	r2, r2, #16
 8006b34:	4603      	mov	r3, r0
 8006b36:	b9ca      	cbnz	r2, 8006b6c <__hi0bits+0x3c>
 8006b38:	0403      	lsls	r3, r0, #16
 8006b3a:	2010      	movs	r0, #16
 8006b3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b40:	bf04      	itt	eq
 8006b42:	021b      	lsleq	r3, r3, #8
 8006b44:	3008      	addeq	r0, #8
 8006b46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b4a:	bf04      	itt	eq
 8006b4c:	011b      	lsleq	r3, r3, #4
 8006b4e:	3004      	addeq	r0, #4
 8006b50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b54:	bf04      	itt	eq
 8006b56:	009b      	lsleq	r3, r3, #2
 8006b58:	3002      	addeq	r0, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	db05      	blt.n	8006b6a <__hi0bits+0x3a>
 8006b5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006b62:	f100 0001 	add.w	r0, r0, #1
 8006b66:	bf08      	it	eq
 8006b68:	2020      	moveq	r0, #32
 8006b6a:	4770      	bx	lr
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e7e5      	b.n	8006b3c <__hi0bits+0xc>

08006b70 <__lo0bits>:
 8006b70:	6803      	ldr	r3, [r0, #0]
 8006b72:	4602      	mov	r2, r0
 8006b74:	f013 0007 	ands.w	r0, r3, #7
 8006b78:	d00b      	beq.n	8006b92 <__lo0bits+0x22>
 8006b7a:	07d9      	lsls	r1, r3, #31
 8006b7c:	d421      	bmi.n	8006bc2 <__lo0bits+0x52>
 8006b7e:	0798      	lsls	r0, r3, #30
 8006b80:	bf49      	itett	mi
 8006b82:	085b      	lsrmi	r3, r3, #1
 8006b84:	089b      	lsrpl	r3, r3, #2
 8006b86:	2001      	movmi	r0, #1
 8006b88:	6013      	strmi	r3, [r2, #0]
 8006b8a:	bf5c      	itt	pl
 8006b8c:	2002      	movpl	r0, #2
 8006b8e:	6013      	strpl	r3, [r2, #0]
 8006b90:	4770      	bx	lr
 8006b92:	b299      	uxth	r1, r3
 8006b94:	b909      	cbnz	r1, 8006b9a <__lo0bits+0x2a>
 8006b96:	2010      	movs	r0, #16
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	b2d9      	uxtb	r1, r3
 8006b9c:	b909      	cbnz	r1, 8006ba2 <__lo0bits+0x32>
 8006b9e:	3008      	adds	r0, #8
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	0719      	lsls	r1, r3, #28
 8006ba4:	bf04      	itt	eq
 8006ba6:	091b      	lsreq	r3, r3, #4
 8006ba8:	3004      	addeq	r0, #4
 8006baa:	0799      	lsls	r1, r3, #30
 8006bac:	bf04      	itt	eq
 8006bae:	089b      	lsreq	r3, r3, #2
 8006bb0:	3002      	addeq	r0, #2
 8006bb2:	07d9      	lsls	r1, r3, #31
 8006bb4:	d403      	bmi.n	8006bbe <__lo0bits+0x4e>
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	f100 0001 	add.w	r0, r0, #1
 8006bbc:	d003      	beq.n	8006bc6 <__lo0bits+0x56>
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4770      	bx	lr
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	4770      	bx	lr
 8006bc6:	2020      	movs	r0, #32
 8006bc8:	4770      	bx	lr
	...

08006bcc <__i2b>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	460c      	mov	r4, r1
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	f7ff ff05 	bl	80069e0 <_Balloc>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	b928      	cbnz	r0, 8006be6 <__i2b+0x1a>
 8006bda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <__i2b+0x24>)
 8006be0:	4804      	ldr	r0, [pc, #16]	; (8006bf4 <__i2b+0x28>)
 8006be2:	f000 fded 	bl	80077c0 <__assert_func>
 8006be6:	2301      	movs	r3, #1
 8006be8:	6144      	str	r4, [r0, #20]
 8006bea:	6103      	str	r3, [r0, #16]
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	bf00      	nop
 8006bf0:	08007e03 	.word	0x08007e03
 8006bf4:	08007e74 	.word	0x08007e74

08006bf8 <__multiply>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	4691      	mov	r9, r2
 8006bfe:	690a      	ldr	r2, [r1, #16]
 8006c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c04:	460c      	mov	r4, r1
 8006c06:	429a      	cmp	r2, r3
 8006c08:	bfbe      	ittt	lt
 8006c0a:	460b      	movlt	r3, r1
 8006c0c:	464c      	movlt	r4, r9
 8006c0e:	4699      	movlt	r9, r3
 8006c10:	6927      	ldr	r7, [r4, #16]
 8006c12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	6861      	ldr	r1, [r4, #4]
 8006c1a:	eb07 060a 	add.w	r6, r7, sl
 8006c1e:	42b3      	cmp	r3, r6
 8006c20:	b085      	sub	sp, #20
 8006c22:	bfb8      	it	lt
 8006c24:	3101      	addlt	r1, #1
 8006c26:	f7ff fedb 	bl	80069e0 <_Balloc>
 8006c2a:	b930      	cbnz	r0, 8006c3a <__multiply+0x42>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	f240 115d 	movw	r1, #349	; 0x15d
 8006c32:	4b43      	ldr	r3, [pc, #268]	; (8006d40 <__multiply+0x148>)
 8006c34:	4843      	ldr	r0, [pc, #268]	; (8006d44 <__multiply+0x14c>)
 8006c36:	f000 fdc3 	bl	80077c0 <__assert_func>
 8006c3a:	f100 0514 	add.w	r5, r0, #20
 8006c3e:	462b      	mov	r3, r5
 8006c40:	2200      	movs	r2, #0
 8006c42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c46:	4543      	cmp	r3, r8
 8006c48:	d321      	bcc.n	8006c8e <__multiply+0x96>
 8006c4a:	f104 0314 	add.w	r3, r4, #20
 8006c4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c52:	f109 0314 	add.w	r3, r9, #20
 8006c56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c5a:	9202      	str	r2, [sp, #8]
 8006c5c:	1b3a      	subs	r2, r7, r4
 8006c5e:	3a15      	subs	r2, #21
 8006c60:	f022 0203 	bic.w	r2, r2, #3
 8006c64:	3204      	adds	r2, #4
 8006c66:	f104 0115 	add.w	r1, r4, #21
 8006c6a:	428f      	cmp	r7, r1
 8006c6c:	bf38      	it	cc
 8006c6e:	2204      	movcc	r2, #4
 8006c70:	9201      	str	r2, [sp, #4]
 8006c72:	9a02      	ldr	r2, [sp, #8]
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d80c      	bhi.n	8006c94 <__multiply+0x9c>
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	dd03      	ble.n	8006c86 <__multiply+0x8e>
 8006c7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d059      	beq.n	8006d3a <__multiply+0x142>
 8006c86:	6106      	str	r6, [r0, #16]
 8006c88:	b005      	add	sp, #20
 8006c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8e:	f843 2b04 	str.w	r2, [r3], #4
 8006c92:	e7d8      	b.n	8006c46 <__multiply+0x4e>
 8006c94:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c98:	f1ba 0f00 	cmp.w	sl, #0
 8006c9c:	d023      	beq.n	8006ce6 <__multiply+0xee>
 8006c9e:	46a9      	mov	r9, r5
 8006ca0:	f04f 0c00 	mov.w	ip, #0
 8006ca4:	f104 0e14 	add.w	lr, r4, #20
 8006ca8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cac:	f8d9 1000 	ldr.w	r1, [r9]
 8006cb0:	fa1f fb82 	uxth.w	fp, r2
 8006cb4:	b289      	uxth	r1, r1
 8006cb6:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cba:	4461      	add	r1, ip
 8006cbc:	f8d9 c000 	ldr.w	ip, [r9]
 8006cc0:	0c12      	lsrs	r2, r2, #16
 8006cc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cc6:	fb0a c202 	mla	r2, sl, r2, ip
 8006cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cce:	b289      	uxth	r1, r1
 8006cd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cd4:	4577      	cmp	r7, lr
 8006cd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cda:	f849 1b04 	str.w	r1, [r9], #4
 8006cde:	d8e3      	bhi.n	8006ca8 <__multiply+0xb0>
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	f845 c002 	str.w	ip, [r5, r2]
 8006ce6:	9a03      	ldr	r2, [sp, #12]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cee:	f1b9 0f00 	cmp.w	r9, #0
 8006cf2:	d020      	beq.n	8006d36 <__multiply+0x13e>
 8006cf4:	46ae      	mov	lr, r5
 8006cf6:	f04f 0a00 	mov.w	sl, #0
 8006cfa:	6829      	ldr	r1, [r5, #0]
 8006cfc:	f104 0c14 	add.w	ip, r4, #20
 8006d00:	f8bc b000 	ldrh.w	fp, [ip]
 8006d04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d08:	b289      	uxth	r1, r1
 8006d0a:	fb09 220b 	mla	r2, r9, fp, r2
 8006d0e:	4492      	add	sl, r2
 8006d10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d14:	f84e 1b04 	str.w	r1, [lr], #4
 8006d18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d1c:	f8be 1000 	ldrh.w	r1, [lr]
 8006d20:	0c12      	lsrs	r2, r2, #16
 8006d22:	fb09 1102 	mla	r1, r9, r2, r1
 8006d26:	4567      	cmp	r7, ip
 8006d28:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d30:	d8e6      	bhi.n	8006d00 <__multiply+0x108>
 8006d32:	9a01      	ldr	r2, [sp, #4]
 8006d34:	50a9      	str	r1, [r5, r2]
 8006d36:	3504      	adds	r5, #4
 8006d38:	e79b      	b.n	8006c72 <__multiply+0x7a>
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	e79d      	b.n	8006c7a <__multiply+0x82>
 8006d3e:	bf00      	nop
 8006d40:	08007e03 	.word	0x08007e03
 8006d44:	08007e74 	.word	0x08007e74

08006d48 <__pow5mult>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	f012 0203 	ands.w	r2, r2, #3
 8006d52:	4606      	mov	r6, r0
 8006d54:	460f      	mov	r7, r1
 8006d56:	d007      	beq.n	8006d68 <__pow5mult+0x20>
 8006d58:	4c25      	ldr	r4, [pc, #148]	; (8006df0 <__pow5mult+0xa8>)
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d62:	f7ff fe9f 	bl	8006aa4 <__multadd>
 8006d66:	4607      	mov	r7, r0
 8006d68:	10ad      	asrs	r5, r5, #2
 8006d6a:	d03d      	beq.n	8006de8 <__pow5mult+0xa0>
 8006d6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d6e:	b97c      	cbnz	r4, 8006d90 <__pow5mult+0x48>
 8006d70:	2010      	movs	r0, #16
 8006d72:	f7ff fe11 	bl	8006998 <malloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6270      	str	r0, [r6, #36]	; 0x24
 8006d7a:	b928      	cbnz	r0, 8006d88 <__pow5mult+0x40>
 8006d7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d80:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <__pow5mult+0xac>)
 8006d82:	481d      	ldr	r0, [pc, #116]	; (8006df8 <__pow5mult+0xb0>)
 8006d84:	f000 fd1c 	bl	80077c0 <__assert_func>
 8006d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d8c:	6004      	str	r4, [r0, #0]
 8006d8e:	60c4      	str	r4, [r0, #12]
 8006d90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d98:	b94c      	cbnz	r4, 8006dae <__pow5mult+0x66>
 8006d9a:	f240 2171 	movw	r1, #625	; 0x271
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ff14 	bl	8006bcc <__i2b>
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dac:	6003      	str	r3, [r0, #0]
 8006dae:	f04f 0900 	mov.w	r9, #0
 8006db2:	07eb      	lsls	r3, r5, #31
 8006db4:	d50a      	bpl.n	8006dcc <__pow5mult+0x84>
 8006db6:	4639      	mov	r1, r7
 8006db8:	4622      	mov	r2, r4
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ff1c 	bl	8006bf8 <__multiply>
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff fe4b 	bl	8006a60 <_Bfree>
 8006dca:	4647      	mov	r7, r8
 8006dcc:	106d      	asrs	r5, r5, #1
 8006dce:	d00b      	beq.n	8006de8 <__pow5mult+0xa0>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	b938      	cbnz	r0, 8006de4 <__pow5mult+0x9c>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff ff0d 	bl	8006bf8 <__multiply>
 8006dde:	6020      	str	r0, [r4, #0]
 8006de0:	f8c0 9000 	str.w	r9, [r0]
 8006de4:	4604      	mov	r4, r0
 8006de6:	e7e4      	b.n	8006db2 <__pow5mult+0x6a>
 8006de8:	4638      	mov	r0, r7
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dee:	bf00      	nop
 8006df0:	08007fc0 	.word	0x08007fc0
 8006df4:	08007d91 	.word	0x08007d91
 8006df8:	08007e74 	.word	0x08007e74

08006dfc <__lshift>:
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	460c      	mov	r4, r1
 8006e02:	4607      	mov	r7, r0
 8006e04:	4691      	mov	r9, r2
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	6849      	ldr	r1, [r1, #4]
 8006e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e0e:	68a3      	ldr	r3, [r4, #8]
 8006e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e14:	f108 0601 	add.w	r6, r8, #1
 8006e18:	42b3      	cmp	r3, r6
 8006e1a:	db0b      	blt.n	8006e34 <__lshift+0x38>
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	f7ff fddf 	bl	80069e0 <_Balloc>
 8006e22:	4605      	mov	r5, r0
 8006e24:	b948      	cbnz	r0, 8006e3a <__lshift+0x3e>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e2c:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <__lshift+0xd8>)
 8006e2e:	482a      	ldr	r0, [pc, #168]	; (8006ed8 <__lshift+0xdc>)
 8006e30:	f000 fcc6 	bl	80077c0 <__assert_func>
 8006e34:	3101      	adds	r1, #1
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	e7ee      	b.n	8006e18 <__lshift+0x1c>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f100 0114 	add.w	r1, r0, #20
 8006e40:	f100 0210 	add.w	r2, r0, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	4553      	cmp	r3, sl
 8006e48:	db37      	blt.n	8006eba <__lshift+0xbe>
 8006e4a:	6920      	ldr	r0, [r4, #16]
 8006e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e50:	f104 0314 	add.w	r3, r4, #20
 8006e54:	f019 091f 	ands.w	r9, r9, #31
 8006e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e60:	d02f      	beq.n	8006ec2 <__lshift+0xc6>
 8006e62:	468a      	mov	sl, r1
 8006e64:	f04f 0c00 	mov.w	ip, #0
 8006e68:	f1c9 0e20 	rsb	lr, r9, #32
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	fa02 f209 	lsl.w	r2, r2, r9
 8006e72:	ea42 020c 	orr.w	r2, r2, ip
 8006e76:	f84a 2b04 	str.w	r2, [sl], #4
 8006e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7e:	4298      	cmp	r0, r3
 8006e80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e84:	d8f2      	bhi.n	8006e6c <__lshift+0x70>
 8006e86:	1b03      	subs	r3, r0, r4
 8006e88:	3b15      	subs	r3, #21
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	3304      	adds	r3, #4
 8006e90:	f104 0215 	add.w	r2, r4, #21
 8006e94:	4290      	cmp	r0, r2
 8006e96:	bf38      	it	cc
 8006e98:	2304      	movcc	r3, #4
 8006e9a:	f841 c003 	str.w	ip, [r1, r3]
 8006e9e:	f1bc 0f00 	cmp.w	ip, #0
 8006ea2:	d001      	beq.n	8006ea8 <__lshift+0xac>
 8006ea4:	f108 0602 	add.w	r6, r8, #2
 8006ea8:	3e01      	subs	r6, #1
 8006eaa:	4638      	mov	r0, r7
 8006eac:	4621      	mov	r1, r4
 8006eae:	612e      	str	r6, [r5, #16]
 8006eb0:	f7ff fdd6 	bl	8006a60 <_Bfree>
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	e7c1      	b.n	8006e46 <__lshift+0x4a>
 8006ec2:	3904      	subs	r1, #4
 8006ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec8:	4298      	cmp	r0, r3
 8006eca:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ece:	d8f9      	bhi.n	8006ec4 <__lshift+0xc8>
 8006ed0:	e7ea      	b.n	8006ea8 <__lshift+0xac>
 8006ed2:	bf00      	nop
 8006ed4:	08007e03 	.word	0x08007e03
 8006ed8:	08007e74 	.word	0x08007e74

08006edc <__mcmp>:
 8006edc:	4603      	mov	r3, r0
 8006ede:	690a      	ldr	r2, [r1, #16]
 8006ee0:	6900      	ldr	r0, [r0, #16]
 8006ee2:	b530      	push	{r4, r5, lr}
 8006ee4:	1a80      	subs	r0, r0, r2
 8006ee6:	d10d      	bne.n	8006f04 <__mcmp+0x28>
 8006ee8:	3314      	adds	r3, #20
 8006eea:	3114      	adds	r1, #20
 8006eec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ef0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006efc:	4295      	cmp	r5, r2
 8006efe:	d002      	beq.n	8006f06 <__mcmp+0x2a>
 8006f00:	d304      	bcc.n	8006f0c <__mcmp+0x30>
 8006f02:	2001      	movs	r0, #1
 8006f04:	bd30      	pop	{r4, r5, pc}
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	d3f4      	bcc.n	8006ef4 <__mcmp+0x18>
 8006f0a:	e7fb      	b.n	8006f04 <__mcmp+0x28>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f10:	e7f8      	b.n	8006f04 <__mcmp+0x28>
	...

08006f14 <__mdiff>:
 8006f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	460d      	mov	r5, r1
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4628      	mov	r0, r5
 8006f20:	4614      	mov	r4, r2
 8006f22:	f7ff ffdb 	bl	8006edc <__mcmp>
 8006f26:	1e06      	subs	r6, r0, #0
 8006f28:	d111      	bne.n	8006f4e <__mdiff+0x3a>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff fd57 	bl	80069e0 <_Balloc>
 8006f32:	4602      	mov	r2, r0
 8006f34:	b928      	cbnz	r0, 8006f42 <__mdiff+0x2e>
 8006f36:	f240 2132 	movw	r1, #562	; 0x232
 8006f3a:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <__mdiff+0x110>)
 8006f3c:	483a      	ldr	r0, [pc, #232]	; (8007028 <__mdiff+0x114>)
 8006f3e:	f000 fc3f 	bl	80077c0 <__assert_func>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f48:	4610      	mov	r0, r2
 8006f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	bfa4      	itt	ge
 8006f50:	4623      	movge	r3, r4
 8006f52:	462c      	movge	r4, r5
 8006f54:	4638      	mov	r0, r7
 8006f56:	6861      	ldr	r1, [r4, #4]
 8006f58:	bfa6      	itte	ge
 8006f5a:	461d      	movge	r5, r3
 8006f5c:	2600      	movge	r6, #0
 8006f5e:	2601      	movlt	r6, #1
 8006f60:	f7ff fd3e 	bl	80069e0 <_Balloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	b918      	cbnz	r0, 8006f70 <__mdiff+0x5c>
 8006f68:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <__mdiff+0x110>)
 8006f6e:	e7e5      	b.n	8006f3c <__mdiff+0x28>
 8006f70:	f102 0814 	add.w	r8, r2, #20
 8006f74:	46c2      	mov	sl, r8
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	6927      	ldr	r7, [r4, #16]
 8006f7c:	60c6      	str	r6, [r0, #12]
 8006f7e:	692e      	ldr	r6, [r5, #16]
 8006f80:	f104 0014 	add.w	r0, r4, #20
 8006f84:	f105 0914 	add.w	r9, r5, #20
 8006f88:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006f8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f90:	3410      	adds	r4, #16
 8006f92:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006f96:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f9a:	fa1f f18b 	uxth.w	r1, fp
 8006f9e:	448c      	add	ip, r1
 8006fa0:	b299      	uxth	r1, r3
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	ebac 0101 	sub.w	r1, ip, r1
 8006fa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006fb0:	b289      	uxth	r1, r1
 8006fb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006fb6:	454e      	cmp	r6, r9
 8006fb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006fbc:	f84a 3b04 	str.w	r3, [sl], #4
 8006fc0:	d8e7      	bhi.n	8006f92 <__mdiff+0x7e>
 8006fc2:	1b73      	subs	r3, r6, r5
 8006fc4:	3b15      	subs	r3, #21
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	3515      	adds	r5, #21
 8006fcc:	3304      	adds	r3, #4
 8006fce:	42ae      	cmp	r6, r5
 8006fd0:	bf38      	it	cc
 8006fd2:	2304      	movcc	r3, #4
 8006fd4:	4418      	add	r0, r3
 8006fd6:	4443      	add	r3, r8
 8006fd8:	461e      	mov	r6, r3
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4575      	cmp	r5, lr
 8006fde:	d30e      	bcc.n	8006ffe <__mdiff+0xea>
 8006fe0:	f10e 0103 	add.w	r1, lr, #3
 8006fe4:	1a09      	subs	r1, r1, r0
 8006fe6:	f021 0103 	bic.w	r1, r1, #3
 8006fea:	3803      	subs	r0, #3
 8006fec:	4586      	cmp	lr, r0
 8006fee:	bf38      	it	cc
 8006ff0:	2100      	movcc	r1, #0
 8006ff2:	4419      	add	r1, r3
 8006ff4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ff8:	b18b      	cbz	r3, 800701e <__mdiff+0x10a>
 8006ffa:	6117      	str	r7, [r2, #16]
 8006ffc:	e7a4      	b.n	8006f48 <__mdiff+0x34>
 8006ffe:	f855 8b04 	ldr.w	r8, [r5], #4
 8007002:	fa1f f188 	uxth.w	r1, r8
 8007006:	4461      	add	r1, ip
 8007008:	140c      	asrs	r4, r1, #16
 800700a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800700e:	b289      	uxth	r1, r1
 8007010:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007014:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007018:	f846 1b04 	str.w	r1, [r6], #4
 800701c:	e7de      	b.n	8006fdc <__mdiff+0xc8>
 800701e:	3f01      	subs	r7, #1
 8007020:	e7e8      	b.n	8006ff4 <__mdiff+0xe0>
 8007022:	bf00      	nop
 8007024:	08007e03 	.word	0x08007e03
 8007028:	08007e74 	.word	0x08007e74

0800702c <__d2b>:
 800702c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007030:	2101      	movs	r1, #1
 8007032:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007036:	4690      	mov	r8, r2
 8007038:	461d      	mov	r5, r3
 800703a:	f7ff fcd1 	bl	80069e0 <_Balloc>
 800703e:	4604      	mov	r4, r0
 8007040:	b930      	cbnz	r0, 8007050 <__d2b+0x24>
 8007042:	4602      	mov	r2, r0
 8007044:	f240 310a 	movw	r1, #778	; 0x30a
 8007048:	4b24      	ldr	r3, [pc, #144]	; (80070dc <__d2b+0xb0>)
 800704a:	4825      	ldr	r0, [pc, #148]	; (80070e0 <__d2b+0xb4>)
 800704c:	f000 fbb8 	bl	80077c0 <__assert_func>
 8007050:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007054:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007058:	bb2d      	cbnz	r5, 80070a6 <__d2b+0x7a>
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f1b8 0300 	subs.w	r3, r8, #0
 8007060:	d026      	beq.n	80070b0 <__d2b+0x84>
 8007062:	4668      	mov	r0, sp
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	f7ff fd83 	bl	8006b70 <__lo0bits>
 800706a:	9900      	ldr	r1, [sp, #0]
 800706c:	b1f0      	cbz	r0, 80070ac <__d2b+0x80>
 800706e:	9a01      	ldr	r2, [sp, #4]
 8007070:	f1c0 0320 	rsb	r3, r0, #32
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	430b      	orrs	r3, r1
 800707a:	40c2      	lsrs	r2, r0
 800707c:	6163      	str	r3, [r4, #20]
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	9b01      	ldr	r3, [sp, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2102      	movne	r1, #2
 8007088:	2101      	moveq	r1, #1
 800708a:	61a3      	str	r3, [r4, #24]
 800708c:	6121      	str	r1, [r4, #16]
 800708e:	b1c5      	cbz	r5, 80070c2 <__d2b+0x96>
 8007090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007094:	4405      	add	r5, r0
 8007096:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800709a:	603d      	str	r5, [r7, #0]
 800709c:	6030      	str	r0, [r6, #0]
 800709e:	4620      	mov	r0, r4
 80070a0:	b002      	add	sp, #8
 80070a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070aa:	e7d6      	b.n	800705a <__d2b+0x2e>
 80070ac:	6161      	str	r1, [r4, #20]
 80070ae:	e7e7      	b.n	8007080 <__d2b+0x54>
 80070b0:	a801      	add	r0, sp, #4
 80070b2:	f7ff fd5d 	bl	8006b70 <__lo0bits>
 80070b6:	2101      	movs	r1, #1
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	6121      	str	r1, [r4, #16]
 80070bc:	6163      	str	r3, [r4, #20]
 80070be:	3020      	adds	r0, #32
 80070c0:	e7e5      	b.n	800708e <__d2b+0x62>
 80070c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80070c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070ca:	6038      	str	r0, [r7, #0]
 80070cc:	6918      	ldr	r0, [r3, #16]
 80070ce:	f7ff fd2f 	bl	8006b30 <__hi0bits>
 80070d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80070d6:	6031      	str	r1, [r6, #0]
 80070d8:	e7e1      	b.n	800709e <__d2b+0x72>
 80070da:	bf00      	nop
 80070dc:	08007e03 	.word	0x08007e03
 80070e0:	08007e74 	.word	0x08007e74

080070e4 <_calloc_r>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	fba1 5402 	umull	r5, r4, r1, r2
 80070ea:	b934      	cbnz	r4, 80070fa <_calloc_r+0x16>
 80070ec:	4629      	mov	r1, r5
 80070ee:	f000 f875 	bl	80071dc <_malloc_r>
 80070f2:	4606      	mov	r6, r0
 80070f4:	b928      	cbnz	r0, 8007102 <_calloc_r+0x1e>
 80070f6:	4630      	mov	r0, r6
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	220c      	movs	r2, #12
 80070fc:	2600      	movs	r6, #0
 80070fe:	6002      	str	r2, [r0, #0]
 8007100:	e7f9      	b.n	80070f6 <_calloc_r+0x12>
 8007102:	462a      	mov	r2, r5
 8007104:	4621      	mov	r1, r4
 8007106:	f7fe f84f 	bl	80051a8 <memset>
 800710a:	e7f4      	b.n	80070f6 <_calloc_r+0x12>

0800710c <_free_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4605      	mov	r5, r0
 8007110:	2900      	cmp	r1, #0
 8007112:	d040      	beq.n	8007196 <_free_r+0x8a>
 8007114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007118:	1f0c      	subs	r4, r1, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	bfb8      	it	lt
 800711e:	18e4      	addlt	r4, r4, r3
 8007120:	f000 fcd6 	bl	8007ad0 <__malloc_lock>
 8007124:	4a1c      	ldr	r2, [pc, #112]	; (8007198 <_free_r+0x8c>)
 8007126:	6813      	ldr	r3, [r2, #0]
 8007128:	b933      	cbnz	r3, 8007138 <_free_r+0x2c>
 800712a:	6063      	str	r3, [r4, #4]
 800712c:	6014      	str	r4, [r2, #0]
 800712e:	4628      	mov	r0, r5
 8007130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007134:	f000 bcd2 	b.w	8007adc <__malloc_unlock>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d908      	bls.n	800714e <_free_r+0x42>
 800713c:	6820      	ldr	r0, [r4, #0]
 800713e:	1821      	adds	r1, r4, r0
 8007140:	428b      	cmp	r3, r1
 8007142:	bf01      	itttt	eq
 8007144:	6819      	ldreq	r1, [r3, #0]
 8007146:	685b      	ldreq	r3, [r3, #4]
 8007148:	1809      	addeq	r1, r1, r0
 800714a:	6021      	streq	r1, [r4, #0]
 800714c:	e7ed      	b.n	800712a <_free_r+0x1e>
 800714e:	461a      	mov	r2, r3
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	b10b      	cbz	r3, 8007158 <_free_r+0x4c>
 8007154:	42a3      	cmp	r3, r4
 8007156:	d9fa      	bls.n	800714e <_free_r+0x42>
 8007158:	6811      	ldr	r1, [r2, #0]
 800715a:	1850      	adds	r0, r2, r1
 800715c:	42a0      	cmp	r0, r4
 800715e:	d10b      	bne.n	8007178 <_free_r+0x6c>
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	4401      	add	r1, r0
 8007164:	1850      	adds	r0, r2, r1
 8007166:	4283      	cmp	r3, r0
 8007168:	6011      	str	r1, [r2, #0]
 800716a:	d1e0      	bne.n	800712e <_free_r+0x22>
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	4401      	add	r1, r0
 8007172:	6011      	str	r1, [r2, #0]
 8007174:	6053      	str	r3, [r2, #4]
 8007176:	e7da      	b.n	800712e <_free_r+0x22>
 8007178:	d902      	bls.n	8007180 <_free_r+0x74>
 800717a:	230c      	movs	r3, #12
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	e7d6      	b.n	800712e <_free_r+0x22>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	1821      	adds	r1, r4, r0
 8007184:	428b      	cmp	r3, r1
 8007186:	bf01      	itttt	eq
 8007188:	6819      	ldreq	r1, [r3, #0]
 800718a:	685b      	ldreq	r3, [r3, #4]
 800718c:	1809      	addeq	r1, r1, r0
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	6054      	str	r4, [r2, #4]
 8007194:	e7cb      	b.n	800712e <_free_r+0x22>
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	200002ac 	.word	0x200002ac

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0e      	ldr	r6, [pc, #56]	; (80071d8 <sbrk_aligned+0x3c>)
 80071a0:	460c      	mov	r4, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	4605      	mov	r5, r0
 80071a6:	b911      	cbnz	r1, 80071ae <sbrk_aligned+0x12>
 80071a8:	f000 f9e4 	bl	8007574 <_sbrk_r>
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f9df 	bl	8007574 <_sbrk_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d00a      	beq.n	80071d0 <sbrk_aligned+0x34>
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d007      	beq.n	80071d4 <sbrk_aligned+0x38>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 f9d4 	bl	8007574 <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d101      	bne.n	80071d4 <sbrk_aligned+0x38>
 80071d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80071d4:	4620      	mov	r0, r4
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	200002b0 	.word	0x200002b0

080071dc <_malloc_r>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	1ccd      	adds	r5, r1, #3
 80071e2:	f025 0503 	bic.w	r5, r5, #3
 80071e6:	3508      	adds	r5, #8
 80071e8:	2d0c      	cmp	r5, #12
 80071ea:	bf38      	it	cc
 80071ec:	250c      	movcc	r5, #12
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	4607      	mov	r7, r0
 80071f2:	db01      	blt.n	80071f8 <_malloc_r+0x1c>
 80071f4:	42a9      	cmp	r1, r5
 80071f6:	d905      	bls.n	8007204 <_malloc_r+0x28>
 80071f8:	230c      	movs	r3, #12
 80071fa:	2600      	movs	r6, #0
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	4630      	mov	r0, r6
 8007200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007204:	4e2e      	ldr	r6, [pc, #184]	; (80072c0 <_malloc_r+0xe4>)
 8007206:	f000 fc63 	bl	8007ad0 <__malloc_lock>
 800720a:	6833      	ldr	r3, [r6, #0]
 800720c:	461c      	mov	r4, r3
 800720e:	bb34      	cbnz	r4, 800725e <_malloc_r+0x82>
 8007210:	4629      	mov	r1, r5
 8007212:	4638      	mov	r0, r7
 8007214:	f7ff ffc2 	bl	800719c <sbrk_aligned>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	4604      	mov	r4, r0
 800721c:	d14d      	bne.n	80072ba <_malloc_r+0xde>
 800721e:	6834      	ldr	r4, [r6, #0]
 8007220:	4626      	mov	r6, r4
 8007222:	2e00      	cmp	r6, #0
 8007224:	d140      	bne.n	80072a8 <_malloc_r+0xcc>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	4631      	mov	r1, r6
 800722a:	4638      	mov	r0, r7
 800722c:	eb04 0803 	add.w	r8, r4, r3
 8007230:	f000 f9a0 	bl	8007574 <_sbrk_r>
 8007234:	4580      	cmp	r8, r0
 8007236:	d13a      	bne.n	80072ae <_malloc_r+0xd2>
 8007238:	6821      	ldr	r1, [r4, #0]
 800723a:	3503      	adds	r5, #3
 800723c:	1a6d      	subs	r5, r5, r1
 800723e:	f025 0503 	bic.w	r5, r5, #3
 8007242:	3508      	adds	r5, #8
 8007244:	2d0c      	cmp	r5, #12
 8007246:	bf38      	it	cc
 8007248:	250c      	movcc	r5, #12
 800724a:	4638      	mov	r0, r7
 800724c:	4629      	mov	r1, r5
 800724e:	f7ff ffa5 	bl	800719c <sbrk_aligned>
 8007252:	3001      	adds	r0, #1
 8007254:	d02b      	beq.n	80072ae <_malloc_r+0xd2>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	442b      	add	r3, r5
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	e00e      	b.n	800727c <_malloc_r+0xa0>
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	1b52      	subs	r2, r2, r5
 8007262:	d41e      	bmi.n	80072a2 <_malloc_r+0xc6>
 8007264:	2a0b      	cmp	r2, #11
 8007266:	d916      	bls.n	8007296 <_malloc_r+0xba>
 8007268:	1961      	adds	r1, r4, r5
 800726a:	42a3      	cmp	r3, r4
 800726c:	6025      	str	r5, [r4, #0]
 800726e:	bf18      	it	ne
 8007270:	6059      	strne	r1, [r3, #4]
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	bf08      	it	eq
 8007276:	6031      	streq	r1, [r6, #0]
 8007278:	5162      	str	r2, [r4, r5]
 800727a:	604b      	str	r3, [r1, #4]
 800727c:	4638      	mov	r0, r7
 800727e:	f104 060b 	add.w	r6, r4, #11
 8007282:	f000 fc2b 	bl	8007adc <__malloc_unlock>
 8007286:	f026 0607 	bic.w	r6, r6, #7
 800728a:	1d23      	adds	r3, r4, #4
 800728c:	1af2      	subs	r2, r6, r3
 800728e:	d0b6      	beq.n	80071fe <_malloc_r+0x22>
 8007290:	1b9b      	subs	r3, r3, r6
 8007292:	50a3      	str	r3, [r4, r2]
 8007294:	e7b3      	b.n	80071fe <_malloc_r+0x22>
 8007296:	6862      	ldr	r2, [r4, #4]
 8007298:	42a3      	cmp	r3, r4
 800729a:	bf0c      	ite	eq
 800729c:	6032      	streq	r2, [r6, #0]
 800729e:	605a      	strne	r2, [r3, #4]
 80072a0:	e7ec      	b.n	800727c <_malloc_r+0xa0>
 80072a2:	4623      	mov	r3, r4
 80072a4:	6864      	ldr	r4, [r4, #4]
 80072a6:	e7b2      	b.n	800720e <_malloc_r+0x32>
 80072a8:	4634      	mov	r4, r6
 80072aa:	6876      	ldr	r6, [r6, #4]
 80072ac:	e7b9      	b.n	8007222 <_malloc_r+0x46>
 80072ae:	230c      	movs	r3, #12
 80072b0:	4638      	mov	r0, r7
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	f000 fc12 	bl	8007adc <__malloc_unlock>
 80072b8:	e7a1      	b.n	80071fe <_malloc_r+0x22>
 80072ba:	6025      	str	r5, [r4, #0]
 80072bc:	e7de      	b.n	800727c <_malloc_r+0xa0>
 80072be:	bf00      	nop
 80072c0:	200002ac 	.word	0x200002ac

080072c4 <__sfputc_r>:
 80072c4:	6893      	ldr	r3, [r2, #8]
 80072c6:	b410      	push	{r4}
 80072c8:	3b01      	subs	r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	6093      	str	r3, [r2, #8]
 80072ce:	da07      	bge.n	80072e0 <__sfputc_r+0x1c>
 80072d0:	6994      	ldr	r4, [r2, #24]
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	db01      	blt.n	80072da <__sfputc_r+0x16>
 80072d6:	290a      	cmp	r1, #10
 80072d8:	d102      	bne.n	80072e0 <__sfputc_r+0x1c>
 80072da:	bc10      	pop	{r4}
 80072dc:	f000 b99e 	b.w	800761c <__swbuf_r>
 80072e0:	6813      	ldr	r3, [r2, #0]
 80072e2:	1c58      	adds	r0, r3, #1
 80072e4:	6010      	str	r0, [r2, #0]
 80072e6:	7019      	strb	r1, [r3, #0]
 80072e8:	4608      	mov	r0, r1
 80072ea:	bc10      	pop	{r4}
 80072ec:	4770      	bx	lr

080072ee <__sfputs_r>:
 80072ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f0:	4606      	mov	r6, r0
 80072f2:	460f      	mov	r7, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	18d5      	adds	r5, r2, r3
 80072f8:	42ac      	cmp	r4, r5
 80072fa:	d101      	bne.n	8007300 <__sfputs_r+0x12>
 80072fc:	2000      	movs	r0, #0
 80072fe:	e007      	b.n	8007310 <__sfputs_r+0x22>
 8007300:	463a      	mov	r2, r7
 8007302:	4630      	mov	r0, r6
 8007304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007308:	f7ff ffdc 	bl	80072c4 <__sfputc_r>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d1f3      	bne.n	80072f8 <__sfputs_r+0xa>
 8007310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007314 <_vfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	460d      	mov	r5, r1
 800731a:	4614      	mov	r4, r2
 800731c:	4698      	mov	r8, r3
 800731e:	4606      	mov	r6, r0
 8007320:	b09d      	sub	sp, #116	; 0x74
 8007322:	b118      	cbz	r0, 800732c <_vfiprintf_r+0x18>
 8007324:	6983      	ldr	r3, [r0, #24]
 8007326:	b90b      	cbnz	r3, 800732c <_vfiprintf_r+0x18>
 8007328:	f7ff fa90 	bl	800684c <__sinit>
 800732c:	4b89      	ldr	r3, [pc, #548]	; (8007554 <_vfiprintf_r+0x240>)
 800732e:	429d      	cmp	r5, r3
 8007330:	d11b      	bne.n	800736a <_vfiprintf_r+0x56>
 8007332:	6875      	ldr	r5, [r6, #4]
 8007334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d405      	bmi.n	8007346 <_vfiprintf_r+0x32>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	059a      	lsls	r2, r3, #22
 800733e:	d402      	bmi.n	8007346 <_vfiprintf_r+0x32>
 8007340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007342:	f7ff fb26 	bl	8006992 <__retarget_lock_acquire_recursive>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	071b      	lsls	r3, r3, #28
 800734a:	d501      	bpl.n	8007350 <_vfiprintf_r+0x3c>
 800734c:	692b      	ldr	r3, [r5, #16]
 800734e:	b9eb      	cbnz	r3, 800738c <_vfiprintf_r+0x78>
 8007350:	4629      	mov	r1, r5
 8007352:	4630      	mov	r0, r6
 8007354:	f000 f9c6 	bl	80076e4 <__swsetup_r>
 8007358:	b1c0      	cbz	r0, 800738c <_vfiprintf_r+0x78>
 800735a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735c:	07dc      	lsls	r4, r3, #31
 800735e:	d50e      	bpl.n	800737e <_vfiprintf_r+0x6a>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007364:	b01d      	add	sp, #116	; 0x74
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <_vfiprintf_r+0x244>)
 800736c:	429d      	cmp	r5, r3
 800736e:	d101      	bne.n	8007374 <_vfiprintf_r+0x60>
 8007370:	68b5      	ldr	r5, [r6, #8]
 8007372:	e7df      	b.n	8007334 <_vfiprintf_r+0x20>
 8007374:	4b79      	ldr	r3, [pc, #484]	; (800755c <_vfiprintf_r+0x248>)
 8007376:	429d      	cmp	r5, r3
 8007378:	bf08      	it	eq
 800737a:	68f5      	ldreq	r5, [r6, #12]
 800737c:	e7da      	b.n	8007334 <_vfiprintf_r+0x20>
 800737e:	89ab      	ldrh	r3, [r5, #12]
 8007380:	0598      	lsls	r0, r3, #22
 8007382:	d4ed      	bmi.n	8007360 <_vfiprintf_r+0x4c>
 8007384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007386:	f7ff fb05 	bl	8006994 <__retarget_lock_release_recursive>
 800738a:	e7e9      	b.n	8007360 <_vfiprintf_r+0x4c>
 800738c:	2300      	movs	r3, #0
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	2320      	movs	r3, #32
 8007392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007396:	2330      	movs	r3, #48	; 0x30
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007560 <_vfiprintf_r+0x24c>
 80073a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a8:	4623      	mov	r3, r4
 80073aa:	469a      	mov	sl, r3
 80073ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073b0:	b10a      	cbz	r2, 80073b6 <_vfiprintf_r+0xa2>
 80073b2:	2a25      	cmp	r2, #37	; 0x25
 80073b4:	d1f9      	bne.n	80073aa <_vfiprintf_r+0x96>
 80073b6:	ebba 0b04 	subs.w	fp, sl, r4
 80073ba:	d00b      	beq.n	80073d4 <_vfiprintf_r+0xc0>
 80073bc:	465b      	mov	r3, fp
 80073be:	4622      	mov	r2, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7ff ff93 	bl	80072ee <__sfputs_r>
 80073c8:	3001      	adds	r0, #1
 80073ca:	f000 80aa 	beq.w	8007522 <_vfiprintf_r+0x20e>
 80073ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d0:	445a      	add	r2, fp
 80073d2:	9209      	str	r2, [sp, #36]	; 0x24
 80073d4:	f89a 3000 	ldrb.w	r3, [sl]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80a2 	beq.w	8007522 <_vfiprintf_r+0x20e>
 80073de:	2300      	movs	r3, #0
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e8:	f10a 0a01 	add.w	sl, sl, #1
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	9307      	str	r3, [sp, #28]
 80073f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073f4:	931a      	str	r3, [sp, #104]	; 0x68
 80073f6:	4654      	mov	r4, sl
 80073f8:	2205      	movs	r2, #5
 80073fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fe:	4858      	ldr	r0, [pc, #352]	; (8007560 <_vfiprintf_r+0x24c>)
 8007400:	f7ff fad2 	bl	80069a8 <memchr>
 8007404:	9a04      	ldr	r2, [sp, #16]
 8007406:	b9d8      	cbnz	r0, 8007440 <_vfiprintf_r+0x12c>
 8007408:	06d1      	lsls	r1, r2, #27
 800740a:	bf44      	itt	mi
 800740c:	2320      	movmi	r3, #32
 800740e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007412:	0713      	lsls	r3, r2, #28
 8007414:	bf44      	itt	mi
 8007416:	232b      	movmi	r3, #43	; 0x2b
 8007418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741c:	f89a 3000 	ldrb.w	r3, [sl]
 8007420:	2b2a      	cmp	r3, #42	; 0x2a
 8007422:	d015      	beq.n	8007450 <_vfiprintf_r+0x13c>
 8007424:	4654      	mov	r4, sl
 8007426:	2000      	movs	r0, #0
 8007428:	f04f 0c0a 	mov.w	ip, #10
 800742c:	9a07      	ldr	r2, [sp, #28]
 800742e:	4621      	mov	r1, r4
 8007430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007434:	3b30      	subs	r3, #48	; 0x30
 8007436:	2b09      	cmp	r3, #9
 8007438:	d94e      	bls.n	80074d8 <_vfiprintf_r+0x1c4>
 800743a:	b1b0      	cbz	r0, 800746a <_vfiprintf_r+0x156>
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	e014      	b.n	800746a <_vfiprintf_r+0x156>
 8007440:	eba0 0308 	sub.w	r3, r0, r8
 8007444:	fa09 f303 	lsl.w	r3, r9, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	46a2      	mov	sl, r4
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	e7d2      	b.n	80073f6 <_vfiprintf_r+0xe2>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	1d19      	adds	r1, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9103      	str	r1, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfbb      	ittet	lt
 800745c:	425b      	neglt	r3, r3
 800745e:	f042 0202 	orrlt.w	r2, r2, #2
 8007462:	9307      	strge	r3, [sp, #28]
 8007464:	9307      	strlt	r3, [sp, #28]
 8007466:	bfb8      	it	lt
 8007468:	9204      	strlt	r2, [sp, #16]
 800746a:	7823      	ldrb	r3, [r4, #0]
 800746c:	2b2e      	cmp	r3, #46	; 0x2e
 800746e:	d10c      	bne.n	800748a <_vfiprintf_r+0x176>
 8007470:	7863      	ldrb	r3, [r4, #1]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d135      	bne.n	80074e2 <_vfiprintf_r+0x1ce>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	3402      	adds	r4, #2
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	9203      	str	r2, [sp, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfb8      	it	lt
 8007484:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007488:	9305      	str	r3, [sp, #20]
 800748a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007564 <_vfiprintf_r+0x250>
 800748e:	2203      	movs	r2, #3
 8007490:	4650      	mov	r0, sl
 8007492:	7821      	ldrb	r1, [r4, #0]
 8007494:	f7ff fa88 	bl	80069a8 <memchr>
 8007498:	b140      	cbz	r0, 80074ac <_vfiprintf_r+0x198>
 800749a:	2340      	movs	r3, #64	; 0x40
 800749c:	eba0 000a 	sub.w	r0, r0, sl
 80074a0:	fa03 f000 	lsl.w	r0, r3, r0
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	3401      	adds	r4, #1
 80074a8:	4303      	orrs	r3, r0
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	2206      	movs	r2, #6
 80074b2:	482d      	ldr	r0, [pc, #180]	; (8007568 <_vfiprintf_r+0x254>)
 80074b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b8:	f7ff fa76 	bl	80069a8 <memchr>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d03f      	beq.n	8007540 <_vfiprintf_r+0x22c>
 80074c0:	4b2a      	ldr	r3, [pc, #168]	; (800756c <_vfiprintf_r+0x258>)
 80074c2:	bb1b      	cbnz	r3, 800750c <_vfiprintf_r+0x1f8>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	3308      	adds	r3, #8
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d2:	443b      	add	r3, r7
 80074d4:	9309      	str	r3, [sp, #36]	; 0x24
 80074d6:	e767      	b.n	80073a8 <_vfiprintf_r+0x94>
 80074d8:	460c      	mov	r4, r1
 80074da:	2001      	movs	r0, #1
 80074dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e0:	e7a5      	b.n	800742e <_vfiprintf_r+0x11a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f04f 0c0a 	mov.w	ip, #10
 80074e8:	4619      	mov	r1, r3
 80074ea:	3401      	adds	r4, #1
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4620      	mov	r0, r4
 80074f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f4:	3a30      	subs	r2, #48	; 0x30
 80074f6:	2a09      	cmp	r2, #9
 80074f8:	d903      	bls.n	8007502 <_vfiprintf_r+0x1ee>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c5      	beq.n	800748a <_vfiprintf_r+0x176>
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	e7c3      	b.n	800748a <_vfiprintf_r+0x176>
 8007502:	4604      	mov	r4, r0
 8007504:	2301      	movs	r3, #1
 8007506:	fb0c 2101 	mla	r1, ip, r1, r2
 800750a:	e7f0      	b.n	80074ee <_vfiprintf_r+0x1da>
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	462a      	mov	r2, r5
 8007512:	4630      	mov	r0, r6
 8007514:	4b16      	ldr	r3, [pc, #88]	; (8007570 <_vfiprintf_r+0x25c>)
 8007516:	a904      	add	r1, sp, #16
 8007518:	f7fd feec 	bl	80052f4 <_printf_float>
 800751c:	4607      	mov	r7, r0
 800751e:	1c78      	adds	r0, r7, #1
 8007520:	d1d6      	bne.n	80074d0 <_vfiprintf_r+0x1bc>
 8007522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007524:	07d9      	lsls	r1, r3, #31
 8007526:	d405      	bmi.n	8007534 <_vfiprintf_r+0x220>
 8007528:	89ab      	ldrh	r3, [r5, #12]
 800752a:	059a      	lsls	r2, r3, #22
 800752c:	d402      	bmi.n	8007534 <_vfiprintf_r+0x220>
 800752e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007530:	f7ff fa30 	bl	8006994 <__retarget_lock_release_recursive>
 8007534:	89ab      	ldrh	r3, [r5, #12]
 8007536:	065b      	lsls	r3, r3, #25
 8007538:	f53f af12 	bmi.w	8007360 <_vfiprintf_r+0x4c>
 800753c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800753e:	e711      	b.n	8007364 <_vfiprintf_r+0x50>
 8007540:	ab03      	add	r3, sp, #12
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	462a      	mov	r2, r5
 8007546:	4630      	mov	r0, r6
 8007548:	4b09      	ldr	r3, [pc, #36]	; (8007570 <_vfiprintf_r+0x25c>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	f7fe f96e 	bl	800582c <_printf_i>
 8007550:	e7e4      	b.n	800751c <_vfiprintf_r+0x208>
 8007552:	bf00      	nop
 8007554:	08007e34 	.word	0x08007e34
 8007558:	08007e54 	.word	0x08007e54
 800755c:	08007e14 	.word	0x08007e14
 8007560:	08007fcc 	.word	0x08007fcc
 8007564:	08007fd2 	.word	0x08007fd2
 8007568:	08007fd6 	.word	0x08007fd6
 800756c:	080052f5 	.word	0x080052f5
 8007570:	080072ef 	.word	0x080072ef

08007574 <_sbrk_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	2300      	movs	r3, #0
 8007578:	4d05      	ldr	r5, [pc, #20]	; (8007590 <_sbrk_r+0x1c>)
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f7fb fe2a 	bl	80031d8 <_sbrk>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_sbrk_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_sbrk_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	200002b4 	.word	0x200002b4

08007594 <__sread>:
 8007594:	b510      	push	{r4, lr}
 8007596:	460c      	mov	r4, r1
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	f000 faa4 	bl	8007ae8 <_read_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	bfab      	itete	ge
 80075a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075a6:	89a3      	ldrhlt	r3, [r4, #12]
 80075a8:	181b      	addge	r3, r3, r0
 80075aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075ae:	bfac      	ite	ge
 80075b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075b2:	81a3      	strhlt	r3, [r4, #12]
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <__swrite>:
 80075b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	461f      	mov	r7, r3
 80075bc:	898b      	ldrh	r3, [r1, #12]
 80075be:	4605      	mov	r5, r0
 80075c0:	05db      	lsls	r3, r3, #23
 80075c2:	460c      	mov	r4, r1
 80075c4:	4616      	mov	r6, r2
 80075c6:	d505      	bpl.n	80075d4 <__swrite+0x1e>
 80075c8:	2302      	movs	r3, #2
 80075ca:	2200      	movs	r2, #0
 80075cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d0:	f000 f9f4 	bl	80079bc <_lseek_r>
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	4632      	mov	r2, r6
 80075d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	4628      	mov	r0, r5
 80075e0:	463b      	mov	r3, r7
 80075e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ea:	f000 b869 	b.w	80076c0 <_write_r>

080075ee <__sseek>:
 80075ee:	b510      	push	{r4, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f6:	f000 f9e1 	bl	80079bc <_lseek_r>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	bf15      	itete	ne
 8007600:	6560      	strne	r0, [r4, #84]	; 0x54
 8007602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800760a:	81a3      	strheq	r3, [r4, #12]
 800760c:	bf18      	it	ne
 800760e:	81a3      	strhne	r3, [r4, #12]
 8007610:	bd10      	pop	{r4, pc}

08007612 <__sclose>:
 8007612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007616:	f000 b8f1 	b.w	80077fc <_close_r>
	...

0800761c <__swbuf_r>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	460e      	mov	r6, r1
 8007620:	4614      	mov	r4, r2
 8007622:	4605      	mov	r5, r0
 8007624:	b118      	cbz	r0, 800762e <__swbuf_r+0x12>
 8007626:	6983      	ldr	r3, [r0, #24]
 8007628:	b90b      	cbnz	r3, 800762e <__swbuf_r+0x12>
 800762a:	f7ff f90f 	bl	800684c <__sinit>
 800762e:	4b21      	ldr	r3, [pc, #132]	; (80076b4 <__swbuf_r+0x98>)
 8007630:	429c      	cmp	r4, r3
 8007632:	d12b      	bne.n	800768c <__swbuf_r+0x70>
 8007634:	686c      	ldr	r4, [r5, #4]
 8007636:	69a3      	ldr	r3, [r4, #24]
 8007638:	60a3      	str	r3, [r4, #8]
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	071a      	lsls	r2, r3, #28
 800763e:	d52f      	bpl.n	80076a0 <__swbuf_r+0x84>
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	b36b      	cbz	r3, 80076a0 <__swbuf_r+0x84>
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	6820      	ldr	r0, [r4, #0]
 8007648:	b2f6      	uxtb	r6, r6
 800764a:	1ac0      	subs	r0, r0, r3
 800764c:	6963      	ldr	r3, [r4, #20]
 800764e:	4637      	mov	r7, r6
 8007650:	4283      	cmp	r3, r0
 8007652:	dc04      	bgt.n	800765e <__swbuf_r+0x42>
 8007654:	4621      	mov	r1, r4
 8007656:	4628      	mov	r0, r5
 8007658:	f000 f962 	bl	8007920 <_fflush_r>
 800765c:	bb30      	cbnz	r0, 80076ac <__swbuf_r+0x90>
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	3001      	adds	r0, #1
 8007662:	3b01      	subs	r3, #1
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	6022      	str	r2, [r4, #0]
 800766c:	701e      	strb	r6, [r3, #0]
 800766e:	6963      	ldr	r3, [r4, #20]
 8007670:	4283      	cmp	r3, r0
 8007672:	d004      	beq.n	800767e <__swbuf_r+0x62>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	07db      	lsls	r3, r3, #31
 8007678:	d506      	bpl.n	8007688 <__swbuf_r+0x6c>
 800767a:	2e0a      	cmp	r6, #10
 800767c:	d104      	bne.n	8007688 <__swbuf_r+0x6c>
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f000 f94d 	bl	8007920 <_fflush_r>
 8007686:	b988      	cbnz	r0, 80076ac <__swbuf_r+0x90>
 8007688:	4638      	mov	r0, r7
 800768a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <__swbuf_r+0x9c>)
 800768e:	429c      	cmp	r4, r3
 8007690:	d101      	bne.n	8007696 <__swbuf_r+0x7a>
 8007692:	68ac      	ldr	r4, [r5, #8]
 8007694:	e7cf      	b.n	8007636 <__swbuf_r+0x1a>
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <__swbuf_r+0xa0>)
 8007698:	429c      	cmp	r4, r3
 800769a:	bf08      	it	eq
 800769c:	68ec      	ldreq	r4, [r5, #12]
 800769e:	e7ca      	b.n	8007636 <__swbuf_r+0x1a>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 f81e 	bl	80076e4 <__swsetup_r>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0cb      	beq.n	8007644 <__swbuf_r+0x28>
 80076ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80076b0:	e7ea      	b.n	8007688 <__swbuf_r+0x6c>
 80076b2:	bf00      	nop
 80076b4:	08007e34 	.word	0x08007e34
 80076b8:	08007e54 	.word	0x08007e54
 80076bc:	08007e14 	.word	0x08007e14

080076c0 <_write_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4604      	mov	r4, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	2200      	movs	r2, #0
 80076ca:	4d05      	ldr	r5, [pc, #20]	; (80076e0 <_write_r+0x20>)
 80076cc:	602a      	str	r2, [r5, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7fb fd35 	bl	800313e <_write>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_write_r+0x1e>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_write_r+0x1e>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	200002b4 	.word	0x200002b4

080076e4 <__swsetup_r>:
 80076e4:	4b32      	ldr	r3, [pc, #200]	; (80077b0 <__swsetup_r+0xcc>)
 80076e6:	b570      	push	{r4, r5, r6, lr}
 80076e8:	681d      	ldr	r5, [r3, #0]
 80076ea:	4606      	mov	r6, r0
 80076ec:	460c      	mov	r4, r1
 80076ee:	b125      	cbz	r5, 80076fa <__swsetup_r+0x16>
 80076f0:	69ab      	ldr	r3, [r5, #24]
 80076f2:	b913      	cbnz	r3, 80076fa <__swsetup_r+0x16>
 80076f4:	4628      	mov	r0, r5
 80076f6:	f7ff f8a9 	bl	800684c <__sinit>
 80076fa:	4b2e      	ldr	r3, [pc, #184]	; (80077b4 <__swsetup_r+0xd0>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d10f      	bne.n	8007720 <__swsetup_r+0x3c>
 8007700:	686c      	ldr	r4, [r5, #4]
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007708:	0719      	lsls	r1, r3, #28
 800770a:	d42c      	bmi.n	8007766 <__swsetup_r+0x82>
 800770c:	06dd      	lsls	r5, r3, #27
 800770e:	d411      	bmi.n	8007734 <__swsetup_r+0x50>
 8007710:	2309      	movs	r3, #9
 8007712:	6033      	str	r3, [r6, #0]
 8007714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	e03e      	b.n	800779e <__swsetup_r+0xba>
 8007720:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <__swsetup_r+0xd4>)
 8007722:	429c      	cmp	r4, r3
 8007724:	d101      	bne.n	800772a <__swsetup_r+0x46>
 8007726:	68ac      	ldr	r4, [r5, #8]
 8007728:	e7eb      	b.n	8007702 <__swsetup_r+0x1e>
 800772a:	4b24      	ldr	r3, [pc, #144]	; (80077bc <__swsetup_r+0xd8>)
 800772c:	429c      	cmp	r4, r3
 800772e:	bf08      	it	eq
 8007730:	68ec      	ldreq	r4, [r5, #12]
 8007732:	e7e6      	b.n	8007702 <__swsetup_r+0x1e>
 8007734:	0758      	lsls	r0, r3, #29
 8007736:	d512      	bpl.n	800775e <__swsetup_r+0x7a>
 8007738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800773a:	b141      	cbz	r1, 800774e <__swsetup_r+0x6a>
 800773c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007740:	4299      	cmp	r1, r3
 8007742:	d002      	beq.n	800774a <__swsetup_r+0x66>
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff fce1 	bl	800710c <_free_r>
 800774a:	2300      	movs	r3, #0
 800774c:	6363      	str	r3, [r4, #52]	; 0x34
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	2300      	movs	r3, #0
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	6923      	ldr	r3, [r4, #16]
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	f043 0308 	orr.w	r3, r3, #8
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	b94b      	cbnz	r3, 800777e <__swsetup_r+0x9a>
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007774:	d003      	beq.n	800777e <__swsetup_r+0x9a>
 8007776:	4621      	mov	r1, r4
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f957 	bl	8007a2c <__smakebuf_r>
 800777e:	89a0      	ldrh	r0, [r4, #12]
 8007780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007784:	f010 0301 	ands.w	r3, r0, #1
 8007788:	d00a      	beq.n	80077a0 <__swsetup_r+0xbc>
 800778a:	2300      	movs	r3, #0
 800778c:	60a3      	str	r3, [r4, #8]
 800778e:	6963      	ldr	r3, [r4, #20]
 8007790:	425b      	negs	r3, r3
 8007792:	61a3      	str	r3, [r4, #24]
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	b943      	cbnz	r3, 80077aa <__swsetup_r+0xc6>
 8007798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800779c:	d1ba      	bne.n	8007714 <__swsetup_r+0x30>
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	0781      	lsls	r1, r0, #30
 80077a2:	bf58      	it	pl
 80077a4:	6963      	ldrpl	r3, [r4, #20]
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	e7f4      	b.n	8007794 <__swsetup_r+0xb0>
 80077aa:	2000      	movs	r0, #0
 80077ac:	e7f7      	b.n	800779e <__swsetup_r+0xba>
 80077ae:	bf00      	nop
 80077b0:	2000000c 	.word	0x2000000c
 80077b4:	08007e34 	.word	0x08007e34
 80077b8:	08007e54 	.word	0x08007e54
 80077bc:	08007e14 	.word	0x08007e14

080077c0 <__assert_func>:
 80077c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077c2:	4614      	mov	r4, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <__assert_func+0x2c>)
 80077c8:	4605      	mov	r5, r0
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68d8      	ldr	r0, [r3, #12]
 80077ce:	b14c      	cbz	r4, 80077e4 <__assert_func+0x24>
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <__assert_func+0x30>)
 80077d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077d6:	9100      	str	r1, [sp, #0]
 80077d8:	462b      	mov	r3, r5
 80077da:	4906      	ldr	r1, [pc, #24]	; (80077f4 <__assert_func+0x34>)
 80077dc:	f000 f8dc 	bl	8007998 <fiprintf>
 80077e0:	f000 f9a1 	bl	8007b26 <abort>
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <__assert_func+0x38>)
 80077e6:	461c      	mov	r4, r3
 80077e8:	e7f3      	b.n	80077d2 <__assert_func+0x12>
 80077ea:	bf00      	nop
 80077ec:	2000000c 	.word	0x2000000c
 80077f0:	08007fdd 	.word	0x08007fdd
 80077f4:	08007fea 	.word	0x08007fea
 80077f8:	08008018 	.word	0x08008018

080077fc <_close_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	2300      	movs	r3, #0
 8007800:	4d05      	ldr	r5, [pc, #20]	; (8007818 <_close_r+0x1c>)
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7fb fcb5 	bl	8003176 <_close>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_close_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_close_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200002b4 	.word	0x200002b4

0800781c <__sflush_r>:
 800781c:	898a      	ldrh	r2, [r1, #12]
 800781e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007820:	4605      	mov	r5, r0
 8007822:	0710      	lsls	r0, r2, #28
 8007824:	460c      	mov	r4, r1
 8007826:	d457      	bmi.n	80078d8 <__sflush_r+0xbc>
 8007828:	684b      	ldr	r3, [r1, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dc04      	bgt.n	8007838 <__sflush_r+0x1c>
 800782e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	dc01      	bgt.n	8007838 <__sflush_r+0x1c>
 8007834:	2000      	movs	r0, #0
 8007836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800783a:	2e00      	cmp	r6, #0
 800783c:	d0fa      	beq.n	8007834 <__sflush_r+0x18>
 800783e:	2300      	movs	r3, #0
 8007840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007844:	682f      	ldr	r7, [r5, #0]
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	d032      	beq.n	80078b0 <__sflush_r+0x94>
 800784a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	075a      	lsls	r2, r3, #29
 8007850:	d505      	bpl.n	800785e <__sflush_r+0x42>
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	1ac0      	subs	r0, r0, r3
 8007856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007858:	b10b      	cbz	r3, 800785e <__sflush_r+0x42>
 800785a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800785c:	1ac0      	subs	r0, r0, r3
 800785e:	2300      	movs	r3, #0
 8007860:	4602      	mov	r2, r0
 8007862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007864:	4628      	mov	r0, r5
 8007866:	6a21      	ldr	r1, [r4, #32]
 8007868:	47b0      	blx	r6
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	d106      	bne.n	800787e <__sflush_r+0x62>
 8007870:	6829      	ldr	r1, [r5, #0]
 8007872:	291d      	cmp	r1, #29
 8007874:	d82c      	bhi.n	80078d0 <__sflush_r+0xb4>
 8007876:	4a29      	ldr	r2, [pc, #164]	; (800791c <__sflush_r+0x100>)
 8007878:	40ca      	lsrs	r2, r1
 800787a:	07d6      	lsls	r6, r2, #31
 800787c:	d528      	bpl.n	80078d0 <__sflush_r+0xb4>
 800787e:	2200      	movs	r2, #0
 8007880:	6062      	str	r2, [r4, #4]
 8007882:	6922      	ldr	r2, [r4, #16]
 8007884:	04d9      	lsls	r1, r3, #19
 8007886:	6022      	str	r2, [r4, #0]
 8007888:	d504      	bpl.n	8007894 <__sflush_r+0x78>
 800788a:	1c42      	adds	r2, r0, #1
 800788c:	d101      	bne.n	8007892 <__sflush_r+0x76>
 800788e:	682b      	ldr	r3, [r5, #0]
 8007890:	b903      	cbnz	r3, 8007894 <__sflush_r+0x78>
 8007892:	6560      	str	r0, [r4, #84]	; 0x54
 8007894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007896:	602f      	str	r7, [r5, #0]
 8007898:	2900      	cmp	r1, #0
 800789a:	d0cb      	beq.n	8007834 <__sflush_r+0x18>
 800789c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d002      	beq.n	80078aa <__sflush_r+0x8e>
 80078a4:	4628      	mov	r0, r5
 80078a6:	f7ff fc31 	bl	800710c <_free_r>
 80078aa:	2000      	movs	r0, #0
 80078ac:	6360      	str	r0, [r4, #52]	; 0x34
 80078ae:	e7c2      	b.n	8007836 <__sflush_r+0x1a>
 80078b0:	6a21      	ldr	r1, [r4, #32]
 80078b2:	2301      	movs	r3, #1
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b0      	blx	r6
 80078b8:	1c41      	adds	r1, r0, #1
 80078ba:	d1c7      	bne.n	800784c <__sflush_r+0x30>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0c4      	beq.n	800784c <__sflush_r+0x30>
 80078c2:	2b1d      	cmp	r3, #29
 80078c4:	d001      	beq.n	80078ca <__sflush_r+0xae>
 80078c6:	2b16      	cmp	r3, #22
 80078c8:	d101      	bne.n	80078ce <__sflush_r+0xb2>
 80078ca:	602f      	str	r7, [r5, #0]
 80078cc:	e7b2      	b.n	8007834 <__sflush_r+0x18>
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	e7ae      	b.n	8007836 <__sflush_r+0x1a>
 80078d8:	690f      	ldr	r7, [r1, #16]
 80078da:	2f00      	cmp	r7, #0
 80078dc:	d0aa      	beq.n	8007834 <__sflush_r+0x18>
 80078de:	0793      	lsls	r3, r2, #30
 80078e0:	bf18      	it	ne
 80078e2:	2300      	movne	r3, #0
 80078e4:	680e      	ldr	r6, [r1, #0]
 80078e6:	bf08      	it	eq
 80078e8:	694b      	ldreq	r3, [r1, #20]
 80078ea:	1bf6      	subs	r6, r6, r7
 80078ec:	600f      	str	r7, [r1, #0]
 80078ee:	608b      	str	r3, [r1, #8]
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	dd9f      	ble.n	8007834 <__sflush_r+0x18>
 80078f4:	4633      	mov	r3, r6
 80078f6:	463a      	mov	r2, r7
 80078f8:	4628      	mov	r0, r5
 80078fa:	6a21      	ldr	r1, [r4, #32]
 80078fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007900:	47e0      	blx	ip
 8007902:	2800      	cmp	r0, #0
 8007904:	dc06      	bgt.n	8007914 <__sflush_r+0xf8>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800790c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	e790      	b.n	8007836 <__sflush_r+0x1a>
 8007914:	4407      	add	r7, r0
 8007916:	1a36      	subs	r6, r6, r0
 8007918:	e7ea      	b.n	80078f0 <__sflush_r+0xd4>
 800791a:	bf00      	nop
 800791c:	20400001 	.word	0x20400001

08007920 <_fflush_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	690b      	ldr	r3, [r1, #16]
 8007924:	4605      	mov	r5, r0
 8007926:	460c      	mov	r4, r1
 8007928:	b913      	cbnz	r3, 8007930 <_fflush_r+0x10>
 800792a:	2500      	movs	r5, #0
 800792c:	4628      	mov	r0, r5
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	b118      	cbz	r0, 800793a <_fflush_r+0x1a>
 8007932:	6983      	ldr	r3, [r0, #24]
 8007934:	b90b      	cbnz	r3, 800793a <_fflush_r+0x1a>
 8007936:	f7fe ff89 	bl	800684c <__sinit>
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <_fflush_r+0x6c>)
 800793c:	429c      	cmp	r4, r3
 800793e:	d11b      	bne.n	8007978 <_fflush_r+0x58>
 8007940:	686c      	ldr	r4, [r5, #4]
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0ef      	beq.n	800792a <_fflush_r+0xa>
 800794a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d404      	bmi.n	800795a <_fflush_r+0x3a>
 8007950:	0599      	lsls	r1, r3, #22
 8007952:	d402      	bmi.n	800795a <_fflush_r+0x3a>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f7ff f81c 	bl	8006992 <__retarget_lock_acquire_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff ff5d 	bl	800781c <__sflush_r>
 8007962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007964:	4605      	mov	r5, r0
 8007966:	07da      	lsls	r2, r3, #31
 8007968:	d4e0      	bmi.n	800792c <_fflush_r+0xc>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	d4dd      	bmi.n	800792c <_fflush_r+0xc>
 8007970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007972:	f7ff f80f 	bl	8006994 <__retarget_lock_release_recursive>
 8007976:	e7d9      	b.n	800792c <_fflush_r+0xc>
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <_fflush_r+0x70>)
 800797a:	429c      	cmp	r4, r3
 800797c:	d101      	bne.n	8007982 <_fflush_r+0x62>
 800797e:	68ac      	ldr	r4, [r5, #8]
 8007980:	e7df      	b.n	8007942 <_fflush_r+0x22>
 8007982:	4b04      	ldr	r3, [pc, #16]	; (8007994 <_fflush_r+0x74>)
 8007984:	429c      	cmp	r4, r3
 8007986:	bf08      	it	eq
 8007988:	68ec      	ldreq	r4, [r5, #12]
 800798a:	e7da      	b.n	8007942 <_fflush_r+0x22>
 800798c:	08007e34 	.word	0x08007e34
 8007990:	08007e54 	.word	0x08007e54
 8007994:	08007e14 	.word	0x08007e14

08007998 <fiprintf>:
 8007998:	b40e      	push	{r1, r2, r3}
 800799a:	b503      	push	{r0, r1, lr}
 800799c:	4601      	mov	r1, r0
 800799e:	ab03      	add	r3, sp, #12
 80079a0:	4805      	ldr	r0, [pc, #20]	; (80079b8 <fiprintf+0x20>)
 80079a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a6:	6800      	ldr	r0, [r0, #0]
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	f7ff fcb3 	bl	8007314 <_vfiprintf_r>
 80079ae:	b002      	add	sp, #8
 80079b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b4:	b003      	add	sp, #12
 80079b6:	4770      	bx	lr
 80079b8:	2000000c 	.word	0x2000000c

080079bc <_lseek_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	2200      	movs	r2, #0
 80079c6:	4d05      	ldr	r5, [pc, #20]	; (80079dc <_lseek_r+0x20>)
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fb fbf7 	bl	80031be <_lseek>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_lseek_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_lseek_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200002b4 	.word	0x200002b4

080079e0 <__swhatbuf_r>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	460e      	mov	r6, r1
 80079e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e8:	4614      	mov	r4, r2
 80079ea:	2900      	cmp	r1, #0
 80079ec:	461d      	mov	r5, r3
 80079ee:	b096      	sub	sp, #88	; 0x58
 80079f0:	da08      	bge.n	8007a04 <__swhatbuf_r+0x24>
 80079f2:	2200      	movs	r2, #0
 80079f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	061a      	lsls	r2, r3, #24
 80079fc:	d410      	bmi.n	8007a20 <__swhatbuf_r+0x40>
 80079fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a02:	e00e      	b.n	8007a22 <__swhatbuf_r+0x42>
 8007a04:	466a      	mov	r2, sp
 8007a06:	f000 f895 	bl	8007b34 <_fstat_r>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	dbf1      	blt.n	80079f2 <__swhatbuf_r+0x12>
 8007a0e:	9a01      	ldr	r2, [sp, #4]
 8007a10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a18:	425a      	negs	r2, r3
 8007a1a:	415a      	adcs	r2, r3
 8007a1c:	602a      	str	r2, [r5, #0]
 8007a1e:	e7ee      	b.n	80079fe <__swhatbuf_r+0x1e>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	2000      	movs	r0, #0
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	b016      	add	sp, #88	; 0x58
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a2c <__smakebuf_r>:
 8007a2c:	898b      	ldrh	r3, [r1, #12]
 8007a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a30:	079d      	lsls	r5, r3, #30
 8007a32:	4606      	mov	r6, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	d507      	bpl.n	8007a48 <__smakebuf_r+0x1c>
 8007a38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	2301      	movs	r3, #1
 8007a42:	6163      	str	r3, [r4, #20]
 8007a44:	b002      	add	sp, #8
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	466a      	mov	r2, sp
 8007a4a:	ab01      	add	r3, sp, #4
 8007a4c:	f7ff ffc8 	bl	80079e0 <__swhatbuf_r>
 8007a50:	9900      	ldr	r1, [sp, #0]
 8007a52:	4605      	mov	r5, r0
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7ff fbc1 	bl	80071dc <_malloc_r>
 8007a5a:	b948      	cbnz	r0, 8007a70 <__smakebuf_r+0x44>
 8007a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a60:	059a      	lsls	r2, r3, #22
 8007a62:	d4ef      	bmi.n	8007a44 <__smakebuf_r+0x18>
 8007a64:	f023 0303 	bic.w	r3, r3, #3
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	81a3      	strh	r3, [r4, #12]
 8007a6e:	e7e3      	b.n	8007a38 <__smakebuf_r+0xc>
 8007a70:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <__smakebuf_r+0x7c>)
 8007a72:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	6020      	str	r0, [r4, #0]
 8007a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	6120      	str	r0, [r4, #16]
 8007a82:	6163      	str	r3, [r4, #20]
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	b15b      	cbz	r3, 8007aa0 <__smakebuf_r+0x74>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a8e:	f000 f863 	bl	8007b58 <_isatty_r>
 8007a92:	b128      	cbz	r0, 8007aa0 <__smakebuf_r+0x74>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	89a0      	ldrh	r0, [r4, #12]
 8007aa2:	4305      	orrs	r5, r0
 8007aa4:	81a5      	strh	r5, [r4, #12]
 8007aa6:	e7cd      	b.n	8007a44 <__smakebuf_r+0x18>
 8007aa8:	080067e5 	.word	0x080067e5

08007aac <__ascii_mbtowc>:
 8007aac:	b082      	sub	sp, #8
 8007aae:	b901      	cbnz	r1, 8007ab2 <__ascii_mbtowc+0x6>
 8007ab0:	a901      	add	r1, sp, #4
 8007ab2:	b142      	cbz	r2, 8007ac6 <__ascii_mbtowc+0x1a>
 8007ab4:	b14b      	cbz	r3, 8007aca <__ascii_mbtowc+0x1e>
 8007ab6:	7813      	ldrb	r3, [r2, #0]
 8007ab8:	600b      	str	r3, [r1, #0]
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	1e10      	subs	r0, r2, #0
 8007abe:	bf18      	it	ne
 8007ac0:	2001      	movne	r0, #1
 8007ac2:	b002      	add	sp, #8
 8007ac4:	4770      	bx	lr
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	e7fb      	b.n	8007ac2 <__ascii_mbtowc+0x16>
 8007aca:	f06f 0001 	mvn.w	r0, #1
 8007ace:	e7f8      	b.n	8007ac2 <__ascii_mbtowc+0x16>

08007ad0 <__malloc_lock>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__malloc_lock+0x8>)
 8007ad2:	f7fe bf5e 	b.w	8006992 <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	200002a8 	.word	0x200002a8

08007adc <__malloc_unlock>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__malloc_unlock+0x8>)
 8007ade:	f7fe bf59 	b.w	8006994 <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	200002a8 	.word	0x200002a8

08007ae8 <_read_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	2200      	movs	r2, #0
 8007af2:	4d05      	ldr	r5, [pc, #20]	; (8007b08 <_read_r+0x20>)
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7fb fb04 	bl	8003104 <_read>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_read_r+0x1e>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_read_r+0x1e>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	200002b4 	.word	0x200002b4

08007b0c <__ascii_wctomb>:
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	b141      	cbz	r1, 8007b24 <__ascii_wctomb+0x18>
 8007b12:	2aff      	cmp	r2, #255	; 0xff
 8007b14:	d904      	bls.n	8007b20 <__ascii_wctomb+0x14>
 8007b16:	228a      	movs	r2, #138	; 0x8a
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	4770      	bx	lr
 8007b20:	2001      	movs	r0, #1
 8007b22:	700a      	strb	r2, [r1, #0]
 8007b24:	4770      	bx	lr

08007b26 <abort>:
 8007b26:	2006      	movs	r0, #6
 8007b28:	b508      	push	{r3, lr}
 8007b2a:	f000 f84d 	bl	8007bc8 <raise>
 8007b2e:	2001      	movs	r0, #1
 8007b30:	f7fb fade 	bl	80030f0 <_exit>

08007b34 <_fstat_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	2300      	movs	r3, #0
 8007b38:	4d06      	ldr	r5, [pc, #24]	; (8007b54 <_fstat_r+0x20>)
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	f7fb fb23 	bl	800318c <_fstat>
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	d102      	bne.n	8007b50 <_fstat_r+0x1c>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	b103      	cbz	r3, 8007b50 <_fstat_r+0x1c>
 8007b4e:	6023      	str	r3, [r4, #0]
 8007b50:	bd38      	pop	{r3, r4, r5, pc}
 8007b52:	bf00      	nop
 8007b54:	200002b4 	.word	0x200002b4

08007b58 <_isatty_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4d05      	ldr	r5, [pc, #20]	; (8007b74 <_isatty_r+0x1c>)
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	602b      	str	r3, [r5, #0]
 8007b64:	f7fb fb21 	bl	80031aa <_isatty>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_isatty_r+0x1a>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_isatty_r+0x1a>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	200002b4 	.word	0x200002b4

08007b78 <_raise_r>:
 8007b78:	291f      	cmp	r1, #31
 8007b7a:	b538      	push	{r3, r4, r5, lr}
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	d904      	bls.n	8007b8c <_raise_r+0x14>
 8007b82:	2316      	movs	r3, #22
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b8e:	b112      	cbz	r2, 8007b96 <_raise_r+0x1e>
 8007b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b94:	b94b      	cbnz	r3, 8007baa <_raise_r+0x32>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 f830 	bl	8007bfc <_getpid_r>
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ba6:	f000 b817 	b.w	8007bd8 <_kill_r>
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d00a      	beq.n	8007bc4 <_raise_r+0x4c>
 8007bae:	1c59      	adds	r1, r3, #1
 8007bb0:	d103      	bne.n	8007bba <_raise_r+0x42>
 8007bb2:	2316      	movs	r3, #22
 8007bb4:	6003      	str	r3, [r0, #0]
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	e7e7      	b.n	8007b8a <_raise_r+0x12>
 8007bba:	2400      	movs	r4, #0
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bc2:	4798      	blx	r3
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e7e0      	b.n	8007b8a <_raise_r+0x12>

08007bc8 <raise>:
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <raise+0xc>)
 8007bca:	4601      	mov	r1, r0
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f7ff bfd3 	b.w	8007b78 <_raise_r>
 8007bd2:	bf00      	nop
 8007bd4:	2000000c 	.word	0x2000000c

08007bd8 <_kill_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_kill_r+0x20>)
 8007bde:	4604      	mov	r4, r0
 8007be0:	4608      	mov	r0, r1
 8007be2:	4611      	mov	r1, r2
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	f7fb fa73 	bl	80030d0 <_kill>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d102      	bne.n	8007bf4 <_kill_r+0x1c>
 8007bee:	682b      	ldr	r3, [r5, #0]
 8007bf0:	b103      	cbz	r3, 8007bf4 <_kill_r+0x1c>
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	bd38      	pop	{r3, r4, r5, pc}
 8007bf6:	bf00      	nop
 8007bf8:	200002b4 	.word	0x200002b4

08007bfc <_getpid_r>:
 8007bfc:	f7fb ba61 	b.w	80030c2 <_getpid>

08007c00 <_init>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr

08007c0c <_fini>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr
